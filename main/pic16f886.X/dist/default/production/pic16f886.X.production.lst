

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 11 15:09:36 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 1.45
    35                           ; Generated 16/11/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F886 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  000E                     	;# 
    83  000F                     	;# 
    84  0010                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0013                     	;# 
    88  0014                     	;# 
    89  0015                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  001D                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  0081                     	;# 
   103  0085                     	;# 
   104  0086                     	;# 
   105  0087                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  008F                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  0105                     	;# 
   130  0107                     	;# 
   131  0108                     	;# 
   132  0109                     	;# 
   133  010C                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0185                     	;# 
   139  0187                     	;# 
   140  0188                     	;# 
   141  0189                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144                           
   145                           	psect	idataBANK0
   146  07FC                     __pidataBANK0:	
   147                           
   148                           ;initializer for _res
   149  07FC  3401               	retlw	1
   150                           
   151                           	psect	strings
   152  0800                     __pstrings:	
   153  0800                     stringtab:	
   154  0800                     __stringtab:	
   155  0800                     stringcode:	
   156                           ;	String table - string pointers are 1 byte each
   157                           
   158  0800                     stringdir:	
   159  0800  3008               	movlw	high stringdir
   160  0801  008A               	movwf	10
   161  0802  0804               	movf	4,w
   162  0803  0A84               	incf	4,f
   163  0804  0782               	addwf	2,f
   164  0805                     __stringbase:	
   165  0805  3400               	retlw	0
   166  0806                     __end_of__stringtab:	
   167  0806                     _dpowers:	
   168  0806  3401               	retlw	1
   169  0807  3400               	retlw	0
   170  0808  340A               	retlw	10
   171  0809  3400               	retlw	0
   172  080A  3464               	retlw	100
   173  080B  3400               	retlw	0
   174  080C  34E8               	retlw	232
   175  080D  3403               	retlw	3
   176  080E  3410               	retlw	16
   177  080F  3427               	retlw	39
   178  0810                     __end_of_dpowers:	
   179  0810                     _swTop:	
   180  0810  34BF               	retlw	191
   181  0811                     __end_of_swTop:	
   182  0811                     _swBot:	
   183  0811  3487               	retlw	135
   184  0812                     __end_of_swBot:	
   185  0812                     STR_1:	
   186  0812  3425               	retlw	37	;'%'
   187  0813  3430               	retlw	48	;'0'
   188  0814  3433               	retlw	51	;'3'
   189  0815  3464               	retlw	100	;'d'
   190  0816  340A               	retlw	10
   191  0817  3400               	retlw	0
   192                           
   193                           ; #config settings
   194  0000                     
   195                           	psect	nvBANK0
   196  006B                     __pnvBANK0:	
   197  006B                     _garron:	
   198  006B                     	ds	2
   199  000B                     _INTCON	set	11
   200  001A                     _RCREG	set	26
   201  0005                     _PORTA	set	5
   202  0005                     _PORTAbits	set	5
   203  0006                     _PORTB	set	6
   204  0007                     _PORTCbits	set	7
   205  000D                     _PIR2bits	set	13
   206  0012                     _T2CON	set	18
   207  0019                     _TXREG	set	25
   208  000C                     _PIR1bits	set	12
   209  0018                     _RCSTAbits	set	24
   210  0087                     _TRISC	set	135
   211  0086                     _TRISB	set	134
   212  0085                     _TRISA	set	133
   213  008F                     _OSCCON	set	143
   214  0092                     _PR2	set	146
   215  0099                     _SPBRG	set	153
   216  009A                     _SPBRGH	set	154
   217  0098                     _TXSTAbits	set	152
   218  008C                     _PIE1bits	set	140
   219  010C                     _EEDAT	set	268
   220  010D                     _EEADR	set	269
   221  0188                     _ANSEL	set	392
   222  0189                     _ANSELH	set	393
   223  018D                     _EECON2	set	397
   224  018C                     _EECON1bits	set	396
   225  0187                     _BAUDCTLbits	set	391
   226                           
   227                           	psect	cinit
   228  0015                     start_initialization:	
   229  0015                     __initialization:	
   230                           
   231                           ; Initialize objects allocated to BANK0
   232  0015  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   233  001A  00ED               	movwf	__pdataBANK0& (0+127)
   234                           
   235                           ; Clear objects allocated to BANK1
   236  001B  1383               	bcf	3,7	;select IRP bank0
   237  001C  30A0               	movlw	low __pbssBANK1
   238  001D  0084               	movwf	4
   239  001E  30BE               	movlw	low (__pbssBANK1+30)
   240  001F  120A  158A  22CF  120A  118A  	fcall	clear_ram0
   241                           
   242                           ; Clear objects allocated to BANK0
   243  0024  3058               	movlw	low __pbssBANK0
   244  0025  0084               	movwf	4
   245  0026  306A               	movlw	low (__pbssBANK0+18)
   246  0027  120A  158A  22CF   	fcall	clear_ram0
   247                           
   248                           ; Clear objects allocated to BITBANK0
   249  002A  01EA               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   250  002B                     end_of_initialization:	
   251                           ;End of C runtime variable initialization code
   252                           
   253  002B                     __end_of__initialization:	
   254  002B  0183               	clrf	3
   255  002C  120A  158A  2D5E   	ljmp	_main	;jump to C main() function
   256                           
   257                           	psect	bitbssBANK0
   258  0350                     __pbitbssBANK0:	
   259  0350                     ints_isr@process:	
   260  0350                     	ds	1
   261  0351                     _reset:	
   262  0351                     	ds	1
   263  0352                     _btnDown:	
   264  0352                     	ds	1
   265  0353                     _btnUp:	
   266  0353                     	ds	1
   267  0354                     _swiza:	
   268  0354                     	ds	1
   269                           
   270                           	psect	bssBANK0
   271  0058                     __pbssBANK0:	
   272  0058                     _timerReset:	
   273  0058                     	ds	2
   274  005A                     _tempo:	
   275  005A                     	ds	2
   276  005C                     _accuValor:	
   277  005C                     	ds	2
   278  005E                     _tick:	
   279  005E                     	ds	1
   280  005F                     _btnDownT:	
   281  005F                     	ds	1
   282  0060                     _btnUpT:	
   283  0060                     	ds	1
   284  0061                     _digit:	
   285  0061                     	ds	1
   286  0062                     _resU:	
   287  0062                     	ds	1
   288  0063                     _resD:	
   289  0063                     	ds	1
   290  0064                     _resC:	
   291  0064                     	ds	1
   292  0065                     _outU:	
   293  0065                     	ds	1
   294  0066                     _outD:	
   295  0066                     	ds	1
   296  0067                     _outC:	
   297  0067                     	ds	1
   298  0068                     _i:	
   299  0068                     	ds	1
   300  0069                     _j:	
   301  0069                     	ds	1
   302                           
   303                           	psect	dataBANK0
   304  006D                     __pdataBANK0:	
   305  006D                     _res:	
   306  006D                     	ds	1
   307                           
   308                           	psect	bssBANK1
   309  00A0                     __pbssBANK1:	
   310  00A0                     _datos:	
   311  00A0                     	ds	28
   312  00BC                     _mainAux:	
   313  00BC                     	ds	2
   314                           
   315                           	psect	clrtext
   316  0ACF                     clear_ram0:	
   317                           ;	Called with FSR containing the base address, and
   318                           ;	W with the last address+1
   319                           
   320  0ACF  0064               	clrwdt	;clear the watchdog before getting into this loop
   321  0AD0                     clrloop0:	
   322  0AD0  0180               	clrf	0	;clear RAM location pointed to by FSR
   323  0AD1  0A84               	incf	4,f	;increment pointer
   324  0AD2  0604               	xorwf	4,w	;XOR with final address
   325  0AD3  1903               	btfsc	3,2	;have we reached the end yet?
   326  0AD4  3400               	retlw	0	;all done for this memory range, return
   327  0AD5  0604               	xorwf	4,w	;XOR again to restore value
   328  0AD6  2AD0               	goto	clrloop0	;do the next byte
   329                           
   330                           	psect	cstackBANK1
   331  00BE                     __pcstackBANK1:	
   332  00BE                     ??_uart_init:	
   333  00BE                     ?_init_timer2:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  00BE                     ?_rw_eeprom:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  00BE                     init_timer2@post:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  00BE                     rw_eeprom@data:	
   343                           ; 1 bytes @ 0x0
   344                           
   345                           
   346                           ; 1 bytes @ 0x0
   347  00BE                     	ds	1
   348  00BF                     init_timer2@eoc:	
   349  00BF                     rw_eeprom@rw:	
   350                           ; 1 bytes @ 0x1
   351                           
   352                           
   353                           ; 1 bytes @ 0x1
   354  00BF                     	ds	1
   355  00C0                     ??_init_timer2:	
   356  00C0                     ??_rw_eeprom:	
   357                           ; 1 bytes @ 0x2
   358                           
   359  00C0                     rw_eeprom@addr:	
   360                           ; 1 bytes @ 0x2
   361                           
   362                           
   363                           ; 1 bytes @ 0x2
   364  00C0                     	ds	1
   365  00C1                     ?_cattle_nr:	
   366  00C1                     cattle_nr@cattle:	
   367                           ; 2 bytes @ 0x3
   368                           
   369                           
   370                           ; 2 bytes @ 0x3
   371  00C1                     	ds	1
   372  00C2                     init_timer2@pre:	
   373                           
   374                           ; 1 bytes @ 0x4
   375  00C2                     	ds	1
   376  00C3                     ??_cattle_nr:	
   377  00C3                     init_timer2@sfr:	
   378                           ; 1 bytes @ 0x5
   379                           
   380                           
   381                           ; 1 bytes @ 0x5
   382  00C3                     	ds	2
   383  00C5                     cattle_nr@opt:	
   384                           
   385                           ; 1 bytes @ 0x7
   386  00C5                     	ds	1
   387  00C6                     cattle_nr@rta:	
   388                           
   389                           ; 2 bytes @ 0x8
   390  00C6                     	ds	2
   391  00C8                     cattle_nr@dato:	
   392                           
   393                           ; 1 bytes @ 0xA
   394  00C8                     	ds	1
   395  00C9                     ??_main:	
   396                           
   397                           ; 1 bytes @ 0xB
   398  00C9                     	ds	2
   399                           
   400                           	psect	cstackCOMMON
   401  0070                     __pcstackCOMMON:	
   402  0070                     ?_isdigit:	
   403  0070                     ??_isdigit:	
   404                           ; 1 bit 
   405                           
   406  0070                     ?_uart_init:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ?_putch:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ??_putch:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_display:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ??_display:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_ints_isr:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_main:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?i1_rw_eeprom:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?___wmul:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     putch@data:	
   434                           ; 2 bytes @ 0x0
   435                           
   436  0070                     _isdigit$632:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     i1rw_eeprom@data:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ___wmul@multiplier:	
   443                           ; 1 bytes @ 0x0
   444                           
   445                           
   446                           ; 2 bytes @ 0x0
   447  0070                     	ds	1
   448  0071                     isdigit@c:	
   449  0071                     i1rw_eeprom@rw:	
   450                           ; 1 bytes @ 0x1
   451                           
   452                           
   453                           ; 1 bytes @ 0x1
   454  0071                     	ds	1
   455  0072                     ??i1_rw_eeprom:	
   456  0072                     i1rw_eeprom@addr:	
   457                           ; 1 bytes @ 0x2
   458                           
   459  0072                     ___wmul@multiplicand:	
   460                           ; 1 bytes @ 0x2
   461                           
   462                           
   463                           ; 2 bytes @ 0x2
   464  0072                     	ds	1
   465  0073                     ?i1_cattle_nr:	
   466  0073                     i1cattle_nr@cattle:	
   467                           ; 2 bytes @ 0x3
   468                           
   469                           
   470                           ; 2 bytes @ 0x3
   471  0073                     	ds	1
   472  0074                     ??___wmul:	
   473  0074                     ___wmul@product:	
   474                           ; 1 bytes @ 0x4
   475                           
   476                           
   477                           ; 2 bytes @ 0x4
   478  0074                     	ds	1
   479  0075                     ??i1_cattle_nr:	
   480                           
   481                           ; 1 bytes @ 0x5
   482  0075                     	ds	1
   483  0076                     ?___lwdiv:	
   484  0076                     ___lwdiv@divisor:	
   485                           ; 2 bytes @ 0x6
   486                           
   487                           
   488                           ; 2 bytes @ 0x6
   489  0076                     	ds	1
   490  0077                     i1cattle_nr@opt:	
   491                           
   492                           ; 1 bytes @ 0x7
   493  0077                     	ds	1
   494  0078                     ___lwdiv@dividend:	
   495  0078                     i1cattle_nr@rta:	
   496                           ; 2 bytes @ 0x8
   497                           
   498                           
   499                           ; 2 bytes @ 0x8
   500  0078                     	ds	2
   501  007A                     ??___lwdiv:	
   502  007A                     i1cattle_nr@dato:	
   503                           ; 1 bytes @ 0xA
   504                           
   505                           
   506                           ; 1 bytes @ 0xA
   507  007A                     	ds	1
   508  007B                     ___lwdiv@quotient:	
   509                           
   510                           ; 2 bytes @ 0xB
   511  007B                     	ds	2
   512  007D                     ___lwdiv@counter:	
   513                           
   514                           ; 1 bytes @ 0xD
   515  007D                     	ds	1
   516                           
   517                           	psect	cstackBANK0
   518  0020                     __pcstackBANK0:	
   519  0020                     ?___lwmod:	
   520  0020                     ___lwmod@divisor:	
   521                           ; 2 bytes @ 0x0
   522                           
   523                           
   524                           ; 2 bytes @ 0x0
   525  0020                     	ds	2
   526  0022                     ___lwmod@dividend:	
   527                           
   528                           ; 2 bytes @ 0x2
   529  0022                     	ds	2
   530  0024                     ??___lwmod:	
   531                           
   532                           ; 1 bytes @ 0x4
   533  0024                     	ds	1
   534  0025                     ___lwmod@counter:	
   535                           
   536                           ; 1 bytes @ 0x5
   537  0025                     	ds	1
   538  0026                     ?_printf:	
   539                           
   540                           ; 2 bytes @ 0x6
   541  0026                     	ds	2
   542  0028                     ??_printf:	
   543                           
   544                           ; 1 bytes @ 0x8
   545  0028                     	ds	3
   546  002B                     printf@ap:	
   547                           
   548                           ; 1 bytes @ 0xB
   549  002B                     	ds	1
   550  002C                     printf@prec:	
   551                           
   552                           ; 1 bytes @ 0xC
   553  002C                     	ds	1
   554  002D                     printf@val:	
   555                           
   556                           ; 2 bytes @ 0xD
   557  002D                     	ds	2
   558  002F                     printf@flag:	
   559                           
   560                           ; 1 bytes @ 0xF
   561  002F                     	ds	1
   562  0030                     printf@f:	
   563                           
   564                           ; 1 bytes @ 0x10
   565  0030                     	ds	1
   566  0031                     printf@width:	
   567                           
   568                           ; 2 bytes @ 0x11
   569  0031                     	ds	2
   570  0033                     printf@c:	
   571                           
   572                           ; 1 bytes @ 0x13
   573  0033                     	ds	1
   574  0034                     ??_ints_isr:	
   575                           
   576                           ; 1 bytes @ 0x14
   577  0034                     	ds	12
   578  0040                     ints_isr@drop:	
   579                           
   580                           ; 1 bytes @ 0x20
   581  0040                     	ds	1
   582  0041                     ints_isr@upper:	
   583                           
   584                           ; 2 bytes @ 0x21
   585  0041                     	ds	2
   586  0043                     ints_isr@nral2:	
   587                           
   588                           ; 1 bytes @ 0x23
   589  0043                     	ds	1
   590  0044                     ints_isr@garron_1c:	
   591                           
   592                           ; 1 bytes @ 0x24
   593  0044                     	ds	1
   594  0045                     ints_isr@garron_1d:	
   595                           
   596                           ; 1 bytes @ 0x25
   597  0045                     	ds	1
   598  0046                     ints_isr@garron_1u:	
   599                           
   600                           ; 1 bytes @ 0x26
   601  0046                     	ds	1
   602  0047                     ints_isr@garron_2c:	
   603                           
   604                           ; 1 bytes @ 0x27
   605  0047                     	ds	1
   606  0048                     ints_isr@garron_2d:	
   607                           
   608                           ; 1 bytes @ 0x28
   609  0048                     	ds	1
   610  0049                     ints_isr@garron_2u:	
   611                           
   612                           ; 1 bytes @ 0x29
   613  0049                     	ds	1
   614  004A                     _ints_isr$845:	
   615                           
   616                           ; 2 bytes @ 0x2A
   617  004A                     	ds	2
   618  004C                     ints_isr@k:	
   619                           
   620                           ; 1 bytes @ 0x2C
   621  004C                     	ds	1
   622  004D                     ints_isr@k_401:	
   623                           
   624                           ; 1 bytes @ 0x2D
   625  004D                     	ds	1
   626  004E                     ints_isr@aux:	
   627                           
   628                           ; 1 bytes @ 0x2E
   629  004E                     	ds	1
   630  004F                     ints_isr@aux_405:	
   631                           
   632                           ; 2 bytes @ 0x2F
   633  004F                     	ds	2
   634  0051                     ints_isr@nral1:	
   635                           
   636                           ; 1 bytes @ 0x31
   637  0051                     	ds	1
   638  0052                     ints_isr@lower_404:	
   639                           
   640                           ; 2 bytes @ 0x32
   641  0052                     	ds	2
   642  0054                     ints_isr@valor:	
   643                           
   644                           ; 2 bytes @ 0x34
   645  0054                     	ds	2
   646  0056                     ints_isr@lower:	
   647                           
   648                           ; 2 bytes @ 0x36
   649  0056                     	ds	2
   650                           
   651                           	psect	maintext
   652  0D5E                     __pmaintext:	
   653 ;;
   654 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   655 ;;
   656 ;; *************** function _main *****************
   657 ;; Defined at:
   658 ;;		line 604 in file "main.c"
   659 ;; Parameters:    Size  Location     Type
   660 ;;		None
   661 ;; Auto vars:     Size  Location     Type
   662 ;;		None
   663 ;; Return value:  Size  Location     Type
   664 ;;                  1    wreg      void 
   665 ;; Registers used:
   666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   667 ;; Tracked objects:
   668 ;;		On entry : B00/0
   669 ;;		On exit  : 0/0
   670 ;;		Unchanged: 0/0
   671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   672 ;;      Params:         0       0       0       0       0
   673 ;;      Locals:         0       0       0       0       0
   674 ;;      Temps:          0       0       2       0       0
   675 ;;      Totals:         0       0       2       0       0
   676 ;;Total ram usage:        2 bytes
   677 ;; Hardware stack levels required when called:    5
   678 ;; This function calls:
   679 ;;		_cattle_nr
   680 ;;		_init_timer2
   681 ;;		_uart_init
   682 ;; This function is called by:
   683 ;;		Startup code after reset
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           
   688                           ;psect for function _main
   689  0D5E                     _main:	
   690                           
   691                           ;main.c: 605: OSCCON = 0b01110001;
   692                           
   693                           ;incstack = 0
   694                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   695  0D5E  3071               	movlw	113
   696  0D5F  1683               	bsf	3,5	;RP0=1, select bank1
   697  0D60  1303               	bcf	3,6	;RP1=0, select bank1
   698  0D61  008F               	movwf	15	;volatile
   699                           
   700                           ;main.c: 606: INTCON = 0xC0;
   701  0D62  30C0               	movlw	192
   702  0D63  008B               	movwf	11	;volatile
   703                           
   704                           ;main.c: 607: ANSELH = 0x00;
   705  0D64  1683               	bsf	3,5	;RP0=1, select bank3
   706  0D65  1703               	bsf	3,6	;RP1=1, select bank3
   707  0D66  0189               	clrf	9	;volatile
   708                           
   709                           ;main.c: 608: ANSEL = 0x00;
   710  0D67  0188               	clrf	8	;volatile
   711                           
   712                           ;main.c: 609: TRISA = 0x30;
   713  0D68  3030               	movlw	48
   714  0D69  1683               	bsf	3,5	;RP0=1, select bank1
   715  0D6A  1303               	bcf	3,6	;RP1=0, select bank1
   716  0D6B  0085               	movwf	5	;volatile
   717                           
   718                           ;main.c: 610: TRISB = 0x00;
   719  0D6C  0186               	clrf	6	;volatile
   720                           
   721                           ;main.c: 611: TRISC = 0x00;
   722  0D6D  0187               	clrf	7	;volatile
   723                           
   724                           ;main.c: 612: btnUp = 0;
   725  0D6E  1283               	bcf	3,5	;RP0=0, select bank0
   726  0D6F  1303               	bcf	3,6	;RP1=0, select bank0
   727  0D70  11EA               	bcf	_btnUp/(0+8),_btnUp& (0+7)
   728                           
   729                           ;main.c: 613: btnDown = 0;
   730  0D71  116A               	bcf	_btnDown/(0+8),_btnDown& (0+7)
   731                           
   732                           ;main.c: 614: garron = cattle_nr(0,0x00);
   733  0D72  3000               	movlw	0
   734  0D73  1683               	bsf	3,5	;RP0=1, select bank1
   735  0D74  1303               	bcf	3,6	;RP1=0, select bank1
   736  0D75  00C1               	movwf	cattle_nr@cattle^(0+128)
   737  0D76  00C2               	movwf	(cattle_nr@cattle+1)^(0+128)
   738  0D77  3000               	movlw	0
   739  0D78  120A  158A  24AC  120A  158A  	fcall	_cattle_nr
   740  0D7D  1683               	bsf	3,5	;RP0=1, select bank1
   741  0D7E  1303               	bcf	3,6	;RP1=0, select bank1
   742  0D7F  0842               	movf	(?_cattle_nr+1)^(0+128),w
   743  0D80  1283               	bcf	3,5	;RP0=0, select bank0
   744  0D81  1303               	bcf	3,6	;RP1=0, select bank0
   745  0D82  00EC               	movwf	_garron+1
   746  0D83  1683               	bsf	3,5	;RP0=1, select bank1
   747  0D84  1303               	bcf	3,6	;RP1=0, select bank1
   748  0D85  0841               	movf	?_cattle_nr^(0+128),w
   749  0D86  1283               	bcf	3,5	;RP0=0, select bank0
   750  0D87  1303               	bcf	3,6	;RP1=0, select bank0
   751  0D88  00EB               	movwf	_garron
   752                           
   753                           ;main.c: 616: if (garron % 2) {
   754  0D89  1C6B               	btfss	_garron,0
   755  0D8A  2DFD               	goto	l310
   756                           
   757                           ;main.c: 617: res = 0;
   758  0D8B  01ED               	clrf	_res
   759                           
   760                           ;main.c: 618: mainAux = (garron + 1) >> 1;
   761  0D8C  086B               	movf	_garron,w
   762  0D8D  3E01               	addlw	1
   763  0D8E  1683               	bsf	3,5	;RP0=1, select bank1
   764  0D8F  1303               	bcf	3,6	;RP1=0, select bank1
   765  0D90  00C9               	movwf	??_main^(0+128)
   766  0D91  1283               	bcf	3,5	;RP0=0, select bank0
   767  0D92  1303               	bcf	3,6	;RP1=0, select bank0
   768  0D93  086C               	movf	_garron+1,w
   769  0D94  1803               	skipnc
   770  0D95  3E01               	addlw	1
   771  0D96  3E00               	addlw	0
   772  0D97  1683               	bsf	3,5	;RP0=1, select bank1
   773  0D98  1303               	bcf	3,6	;RP1=0, select bank1
   774  0D99  00CA               	movwf	(??_main+1)^(0+128)
   775  0D9A  1003               	clrc
   776  0D9B  0CCA               	rrf	(??_main^(0+128)+1),f
   777  0D9C  0CC9               	rrf	??_main^(0+128),f
   778  0D9D  0849               	movf	??_main^(0+128),w
   779  0D9E  00BC               	movwf	_mainAux^(0+128)
   780  0D9F  084A               	movf	(??_main+1)^(0+128),w
   781  0DA0  00BD               	movwf	(_mainAux+1)^(0+128)
   782  0DA1                     l311:	
   783                           ;main.c: 619: while (mainAux > 999) {
   784                           
   785  0DA1  3003               	movlw	3
   786  0DA2  023D               	subwf	(_mainAux+1)^(0+128),w
   787  0DA3  30E8               	movlw	232
   788  0DA4  1903               	skipnz
   789  0DA5  023C               	subwf	_mainAux^(0+128),w
   790  0DA6  1C03               	btfss	3,0
   791  0DA7  2DBD               	goto	l2683
   792                           
   793                           ;main.c: 620: mainAux -= 1000;
   794  0DA8  30E8               	movlw	232
   795  0DA9  02BC               	subwf	_mainAux^(0+128),f
   796  0DAA  3003               	movlw	3
   797  0DAB  1C03               	skipc
   798  0DAC  03BD               	decf	(_mainAux+1)^(0+128),f
   799  0DAD  02BD               	subwf	(_mainAux+1)^(0+128),f
   800  0DAE  2DA1               	goto	l311
   801  0DAF                     l2679:	
   802                           ;main.c: 621: }
   803                           ;main.c: 622: while (mainAux > 99) {
   804                           
   805                           
   806                           ;main.c: 623: resC++;
   807  0DAF  3001               	movlw	1
   808  0DB0  00C9               	movwf	??_main^(0+128)
   809  0DB1  0849               	movf	??_main^(0+128),w
   810  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
   811  0DB3  1303               	bcf	3,6	;RP1=0, select bank0
   812  0DB4  07E4               	addwf	_resC,f
   813                           
   814                           ;main.c: 624: mainAux -= 100;
   815  0DB5  3064               	movlw	100
   816  0DB6  1683               	bsf	3,5	;RP0=1, select bank1
   817  0DB7  1303               	bcf	3,6	;RP1=0, select bank1
   818  0DB8  02BC               	subwf	_mainAux^(0+128),f
   819  0DB9  3000               	movlw	0
   820  0DBA  1C03               	skipc
   821  0DBB  03BD               	decf	(_mainAux+1)^(0+128),f
   822  0DBC  02BD               	subwf	(_mainAux+1)^(0+128),f
   823  0DBD                     l2683:	
   824  0DBD  3000               	movlw	0
   825  0DBE  023D               	subwf	(_mainAux+1)^(0+128),w
   826  0DBF  3064               	movlw	100
   827  0DC0  1903               	skipnz
   828  0DC1  023C               	subwf	_mainAux^(0+128),w
   829  0DC2  1C03               	btfss	3,0
   830  0DC3  2DD3               	goto	l2689
   831  0DC4  2DAF               	goto	l2679
   832  0DC5                     l2685:	
   833                           ;main.c: 625: }
   834                           ;main.c: 626: while (mainAux > 9) {
   835                           
   836                           
   837                           ;main.c: 627: resD++;
   838  0DC5  3001               	movlw	1
   839  0DC6  00C9               	movwf	??_main^(0+128)
   840  0DC7  0849               	movf	??_main^(0+128),w
   841  0DC8  1283               	bcf	3,5	;RP0=0, select bank0
   842  0DC9  1303               	bcf	3,6	;RP1=0, select bank0
   843  0DCA  07E3               	addwf	_resD,f
   844                           
   845                           ;main.c: 628: mainAux -= 10;
   846  0DCB  300A               	movlw	10
   847  0DCC  1683               	bsf	3,5	;RP0=1, select bank1
   848  0DCD  1303               	bcf	3,6	;RP1=0, select bank1
   849  0DCE  02BC               	subwf	_mainAux^(0+128),f
   850  0DCF  3000               	movlw	0
   851  0DD0  1C03               	skipc
   852  0DD1  03BD               	decf	(_mainAux+1)^(0+128),f
   853  0DD2  02BD               	subwf	(_mainAux+1)^(0+128),f
   854  0DD3                     l2689:	
   855  0DD3  3000               	movlw	0
   856  0DD4  023D               	subwf	(_mainAux+1)^(0+128),w
   857  0DD5  300A               	movlw	10
   858  0DD6  1903               	skipnz
   859  0DD7  023C               	subwf	_mainAux^(0+128),w
   860  0DD8  1803               	skipnc
   861  0DD9  2DC5               	goto	l2685
   862                           
   863                           ;main.c: 629: }
   864                           ;main.c: 630: resU = mainAux;
   865  0DDA  083C               	movf	_mainAux^(0+128),w
   866  0DDB  00C9               	movwf	??_main^(0+128)
   867  0DDC  0849               	movf	??_main^(0+128),w
   868  0DDD  1283               	bcf	3,5	;RP0=0, select bank0
   869  0DDE  1303               	bcf	3,6	;RP1=0, select bank0
   870  0DDF  00E2               	movwf	_resU
   871                           
   872                           ;main.c: 631: outC = 0x0F;
   873  0DE0  300F               	movlw	15
   874  0DE1  1683               	bsf	3,5	;RP0=1, select bank1
   875  0DE2  1303               	bcf	3,6	;RP1=0, select bank1
   876  0DE3  00C9               	movwf	??_main^(0+128)
   877  0DE4  0849               	movf	??_main^(0+128),w
   878  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
   879  0DE6  1303               	bcf	3,6	;RP1=0, select bank0
   880  0DE7  00E7               	movwf	_outC
   881                           
   882                           ;main.c: 632: outD = 0x0F;
   883  0DE8  300F               	movlw	15
   884  0DE9  1683               	bsf	3,5	;RP0=1, select bank1
   885  0DEA  1303               	bcf	3,6	;RP1=0, select bank1
   886  0DEB  00C9               	movwf	??_main^(0+128)
   887  0DEC  0849               	movf	??_main^(0+128),w
   888  0DED  1283               	bcf	3,5	;RP0=0, select bank0
   889  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
   890  0DEF  00E6               	movwf	_outD
   891                           
   892                           ;main.c: 633: outU = 0x0F;
   893  0DF0  300F               	movlw	15
   894  0DF1  1683               	bsf	3,5	;RP0=1, select bank1
   895  0DF2  1303               	bcf	3,6	;RP1=0, select bank1
   896  0DF3  00C9               	movwf	??_main^(0+128)
   897  0DF4  0849               	movf	??_main^(0+128),w
   898  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
   899  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
   900  0DF7  00E5               	movwf	_outU
   901                           
   902                           ;main.c: 634: PORTAbits.RA6 = 1;
   903  0DF8  1705               	bsf	5,6	;volatile
   904                           
   905                           ;main.c: 635: PORTCbits.RC0 = 0;
   906  0DF9  1007               	bcf	7,0	;volatile
   907                           
   908                           ;main.c: 636: PORTCbits.RC1 = 0;
   909  0DFA  1087               	bcf	7,1	;volatile
   910                           
   911                           ;main.c: 637: PORTCbits.RC2 = 1;
   912  0DFB  1507               	bsf	7,2	;volatile
   913                           
   914                           ;main.c: 638: } else {
   915  0DFC  2E53               	goto	l2725
   916  0DFD                     l310:	
   917                           
   918                           ;main.c: 639: res = 1;
   919  0DFD  01ED               	clrf	_res
   920  0DFE  0AED               	incf	_res,f
   921                           
   922                           ;main.c: 640: PORTAbits.RA6 = 0;
   923  0DFF  1305               	bcf	5,6	;volatile
   924                           
   925                           ;main.c: 641: mainAux = garron >> 1;
   926  0E00  086C               	movf	_garron+1,w
   927  0E01  1683               	bsf	3,5	;RP0=1, select bank1
   928  0E02  1303               	bcf	3,6	;RP1=0, select bank1
   929  0E03  00CA               	movwf	(??_main^(0+128)+1)
   930  0E04  1283               	bcf	3,5	;RP0=0, select bank0
   931  0E05  1303               	bcf	3,6	;RP1=0, select bank0
   932  0E06  086B               	movf	_garron,w
   933  0E07  1683               	bsf	3,5	;RP0=1, select bank1
   934  0E08  1303               	bcf	3,6	;RP1=0, select bank1
   935  0E09  00C9               	movwf	??_main^(0+128)
   936  0E0A  1003               	clrc
   937  0E0B  0CCA               	rrf	(??_main^(0+128)+1),f
   938  0E0C  0CC9               	rrf	??_main^(0+128),f
   939  0E0D  0849               	movf	??_main^(0+128),w
   940  0E0E  00BC               	movwf	_mainAux^(0+128)
   941  0E0F  084A               	movf	(??_main+1)^(0+128),w
   942  0E10  00BD               	movwf	(_mainAux+1)^(0+128)
   943  0E11                     l321:	
   944                           ;main.c: 642: while (mainAux > 999) {
   945                           
   946  0E11  3003               	movlw	3
   947  0E12  023D               	subwf	(_mainAux+1)^(0+128),w
   948  0E13  30E8               	movlw	232
   949  0E14  1903               	skipnz
   950  0E15  023C               	subwf	_mainAux^(0+128),w
   951  0E16  1C03               	btfss	3,0
   952  0E17  2E2D               	goto	l2709
   953                           
   954                           ;main.c: 643: mainAux -= 1000;
   955  0E18  30E8               	movlw	232
   956  0E19  02BC               	subwf	_mainAux^(0+128),f
   957  0E1A  3003               	movlw	3
   958  0E1B  1C03               	skipc
   959  0E1C  03BD               	decf	(_mainAux+1)^(0+128),f
   960  0E1D  02BD               	subwf	(_mainAux+1)^(0+128),f
   961  0E1E  2E11               	goto	l321
   962  0E1F                     l2705:	
   963                           ;main.c: 644: }
   964                           ;main.c: 645: while (mainAux > 99) {
   965                           
   966                           
   967                           ;main.c: 646: resC++;
   968  0E1F  3001               	movlw	1
   969  0E20  00C9               	movwf	??_main^(0+128)
   970  0E21  0849               	movf	??_main^(0+128),w
   971  0E22  1283               	bcf	3,5	;RP0=0, select bank0
   972  0E23  1303               	bcf	3,6	;RP1=0, select bank0
   973  0E24  07E4               	addwf	_resC,f
   974                           
   975                           ;main.c: 647: mainAux -= 100;
   976  0E25  3064               	movlw	100
   977  0E26  1683               	bsf	3,5	;RP0=1, select bank1
   978  0E27  1303               	bcf	3,6	;RP1=0, select bank1
   979  0E28  02BC               	subwf	_mainAux^(0+128),f
   980  0E29  3000               	movlw	0
   981  0E2A  1C03               	skipc
   982  0E2B  03BD               	decf	(_mainAux+1)^(0+128),f
   983  0E2C  02BD               	subwf	(_mainAux+1)^(0+128),f
   984  0E2D                     l2709:	
   985  0E2D  3000               	movlw	0
   986  0E2E  023D               	subwf	(_mainAux+1)^(0+128),w
   987  0E2F  3064               	movlw	100
   988  0E30  1903               	skipnz
   989  0E31  023C               	subwf	_mainAux^(0+128),w
   990  0E32  1C03               	btfss	3,0
   991  0E33  2E43               	goto	l2715
   992  0E34  2E1F               	goto	l2705
   993  0E35                     l2711:	
   994                           ;main.c: 648: }
   995                           ;main.c: 649: while (mainAux > 9) {
   996                           
   997                           
   998                           ;main.c: 650: resD++;
   999  0E35  3001               	movlw	1
  1000  0E36  00C9               	movwf	??_main^(0+128)
  1001  0E37  0849               	movf	??_main^(0+128),w
  1002  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  1003  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  1004  0E3A  07E3               	addwf	_resD,f
  1005                           
  1006                           ;main.c: 651: mainAux -= 10;
  1007  0E3B  300A               	movlw	10
  1008  0E3C  1683               	bsf	3,5	;RP0=1, select bank1
  1009  0E3D  1303               	bcf	3,6	;RP1=0, select bank1
  1010  0E3E  02BC               	subwf	_mainAux^(0+128),f
  1011  0E3F  3000               	movlw	0
  1012  0E40  1C03               	skipc
  1013  0E41  03BD               	decf	(_mainAux+1)^(0+128),f
  1014  0E42  02BD               	subwf	(_mainAux+1)^(0+128),f
  1015  0E43                     l2715:	
  1016  0E43  3000               	movlw	0
  1017  0E44  023D               	subwf	(_mainAux+1)^(0+128),w
  1018  0E45  300A               	movlw	10
  1019  0E46  1903               	skipnz
  1020  0E47  023C               	subwf	_mainAux^(0+128),w
  1021  0E48  1803               	skipnc
  1022  0E49  2E35               	goto	l2711
  1023                           
  1024                           ;main.c: 652: }
  1025                           ;main.c: 653: resU = mainAux;
  1026  0E4A  083C               	movf	_mainAux^(0+128),w
  1027  0E4B  00C9               	movwf	??_main^(0+128)
  1028  0E4C  0849               	movf	??_main^(0+128),w
  1029  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  1030  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  1031  0E4F  00E2               	movwf	_resU
  1032                           
  1033                           ;main.c: 654: PORTCbits.RC0 = 0;
  1034  0E50  1007               	bcf	7,0	;volatile
  1035                           
  1036                           ;main.c: 655: PORTCbits.RC1 = 1;
  1037  0E51  1487               	bsf	7,1	;volatile
  1038                           
  1039                           ;main.c: 656: PORTCbits.RC2 = 0;
  1040  0E52  1107               	bcf	7,2	;volatile
  1041  0E53                     l2725:	
  1042                           
  1043                           ;main.c: 657: }
  1044                           ;main.c: 658: reset = 0;
  1045  0E53  10EA               	bcf	_reset/(0+8),_reset& (0+7)
  1046                           
  1047                           ;main.c: 659: init_timer2(2, 5, 125);
  1048  0E54  3005               	movlw	5
  1049  0E55  1683               	bsf	3,5	;RP0=1, select bank1
  1050  0E56  1303               	bcf	3,6	;RP1=0, select bank1
  1051  0E57  00C9               	movwf	??_main^(0+128)
  1052  0E58  0849               	movf	??_main^(0+128),w
  1053  0E59  00BE               	movwf	init_timer2@post^(0+128)
  1054  0E5A  307D               	movlw	125
  1055  0E5B  00CA               	movwf	(??_main+1)^(0+128)
  1056  0E5C  084A               	movf	(??_main+1)^(0+128),w
  1057  0E5D  00BF               	movwf	init_timer2@eoc^(0+128)
  1058  0E5E  3002               	movlw	2
  1059  0E5F  120A  158A  2344  120A  158A  	fcall	_init_timer2
  1060                           
  1061                           ;main.c: 660: uart_init();
  1062  0E64  120A  158A  22E5  120A  158A  	fcall	_uart_init
  1063  0E69                     l330:	
  1064                           ;main.c: 661: while(1){}
  1065                           
  1066  0E69  2E69               	goto	l330
  1067  0E6A                     __end_of_main:	
  1068                           
  1069                           	psect	text1
  1070  0AE5                     __ptext1:	
  1071 ;; *************** function _uart_init *****************
  1072 ;; Defined at:
  1073 ;;		line 30 in file "main.c"
  1074 ;; Parameters:    Size  Location     Type
  1075 ;;		None
  1076 ;; Auto vars:     Size  Location     Type
  1077 ;;		None
  1078 ;; Return value:  Size  Location     Type
  1079 ;;                  1    wreg      void 
  1080 ;; Registers used:
  1081 ;;		wreg, status,2
  1082 ;; Tracked objects:
  1083 ;;		On entry : 0/0
  1084 ;;		On exit  : 0/0
  1085 ;;		Unchanged: 0/0
  1086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1087 ;;      Params:         0       0       0       0       0
  1088 ;;      Locals:         0       0       0       0       0
  1089 ;;      Temps:          0       0       0       0       0
  1090 ;;      Totals:         0       0       0       0       0
  1091 ;;Total ram usage:        0 bytes
  1092 ;; Hardware stack levels used:    1
  1093 ;; Hardware stack levels required when called:    3
  1094 ;; This function calls:
  1095 ;;		Nothing
  1096 ;; This function is called by:
  1097 ;;		_main
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           
  1102                           ;psect for function _uart_init
  1103  0AE5                     _uart_init:	
  1104                           
  1105                           ;main.c: 31: PIE1bits.RCIE = 1;
  1106                           
  1107                           ;incstack = 0
  1108                           ; Regs used in _uart_init: [wreg+status,2]
  1109  0AE5  1683               	bsf	3,5	;RP0=1, select bank1
  1110  0AE6  1303               	bcf	3,6	;RP1=0, select bank1
  1111  0AE7  168C               	bsf	12,5	;volatile
  1112                           
  1113                           ;main.c: 32: PIE1bits.TXIE = 0;
  1114  0AE8  120C               	bcf	12,4	;volatile
  1115                           
  1116                           ;main.c: 33: TXSTAbits.BRGH = 1;
  1117  0AE9  1518               	bsf	24,2	;volatile
  1118                           
  1119                           ;main.c: 34: BAUDCTLbits.BRG16 = 0;
  1120  0AEA  1683               	bsf	3,5	;RP0=1, select bank3
  1121  0AEB  1703               	bsf	3,6	;RP1=1, select bank3
  1122  0AEC  1187               	bcf	7,3	;volatile
  1123                           
  1124                           ;main.c: 37: SPBRGH = 0x00;
  1125  0AED  1683               	bsf	3,5	;RP0=1, select bank1
  1126  0AEE  1303               	bcf	3,6	;RP1=0, select bank1
  1127  0AEF  019A               	clrf	26	;volatile
  1128                           
  1129                           ;main.c: 38: SPBRG = 0x33;
  1130  0AF0  3033               	movlw	51
  1131  0AF1  0099               	movwf	25	;volatile
  1132                           
  1133                           ;main.c: 40: TXSTAbits.SYNC = 0;
  1134  0AF2  1218               	bcf	24,4	;volatile
  1135                           
  1136                           ;main.c: 41: RCSTAbits.SPEN = 1;
  1137  0AF3  1283               	bcf	3,5	;RP0=0, select bank0
  1138  0AF4  1303               	bcf	3,6	;RP1=0, select bank0
  1139  0AF5  1798               	bsf	24,7	;volatile
  1140                           
  1141                           ;main.c: 42: TXSTAbits.TXEN = 1;
  1142  0AF6  1683               	bsf	3,5	;RP0=1, select bank1
  1143  0AF7  1303               	bcf	3,6	;RP1=0, select bank1
  1144  0AF8  1698               	bsf	24,5	;volatile
  1145                           
  1146                           ;main.c: 43: RCSTAbits.CREN = 1;
  1147  0AF9  1283               	bcf	3,5	;RP0=0, select bank0
  1148  0AFA  1303               	bcf	3,6	;RP1=0, select bank0
  1149  0AFB  1618               	bsf	24,4	;volatile
  1150  0AFC  0008               	return
  1151  0AFD                     __end_of_uart_init:	
  1152                           
  1153                           	psect	text2
  1154  0B44                     __ptext2:	
  1155 ;; *************** function _init_timer2 *****************
  1156 ;; Defined at:
  1157 ;;		line 52 in file "main.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;  pre             1    wreg     unsigned char 
  1160 ;;  post            1    0[BANK1 ] unsigned char 
  1161 ;;  eoc             1    1[BANK1 ] unsigned char 
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  pre             1    4[BANK1 ] unsigned char 
  1164 ;;  sfr             1    5[BANK1 ] unsigned char 
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  1    wreg      void 
  1167 ;; Registers used:
  1168 ;;		wreg, status,2, status,0
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1174 ;;      Params:         0       0       2       0       0
  1175 ;;      Locals:         0       0       2       0       0
  1176 ;;      Temps:          0       0       2       0       0
  1177 ;;      Totals:         0       0       6       0       0
  1178 ;;Total ram usage:        6 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; Hardware stack levels required when called:    3
  1181 ;; This function calls:
  1182 ;;		Nothing
  1183 ;; This function is called by:
  1184 ;;		_main
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           
  1189                           ;psect for function _init_timer2
  1190  0B44                     _init_timer2:	
  1191                           
  1192                           ;incstack = 0
  1193                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
  1194                           ;init_timer2@pre stored from wreg
  1195  0B44  1683               	bsf	3,5	;RP0=1, select bank1
  1196  0B45  1303               	bcf	3,6	;RP1=0, select bank1
  1197  0B46  00C2               	movwf	init_timer2@pre^(0+128)
  1198                           
  1199                           ;main.c: 53: unsigned char sfr = 0x00;
  1200  0B47  01C3               	clrf	init_timer2@sfr^(0+128)
  1201                           
  1202                           ;main.c: 54: PIR1bits.TMR2IF = 0;
  1203  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  1204  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  1205  0B4A  108C               	bcf	12,1	;volatile
  1206                           
  1207                           ;main.c: 55: PR2 = eoc;
  1208  0B4B  1683               	bsf	3,5	;RP0=1, select bank1
  1209  0B4C  1303               	bcf	3,6	;RP1=0, select bank1
  1210  0B4D  083F               	movf	init_timer2@eoc^(0+128),w
  1211  0B4E  0092               	movwf	18	;volatile
  1212                           
  1213                           ;main.c: 56: sfr = ((post-1) << 3) & 0x78;
  1214  0B4F  083E               	movf	init_timer2@post^(0+128),w
  1215  0B50  00C0               	movwf	??_init_timer2^(0+128)
  1216  0B51  3002               	movlw	2
  1217  0B52                     u1795:	
  1218  0B52  1003               	clrc
  1219  0B53  0DC0               	rlf	??_init_timer2^(0+128),f
  1220  0B54  3EFF               	addlw	-1
  1221  0B55  1D03               	skipz
  1222  0B56  2B52               	goto	u1795
  1223  0B57  1003               	clrc
  1224  0B58  0D40               	rlf	??_init_timer2^(0+128),w
  1225  0B59  3EF8               	addlw	248
  1226  0B5A  3978               	andlw	120
  1227  0B5B  00C1               	movwf	(??_init_timer2+1)^(0+128)
  1228  0B5C  0841               	movf	(??_init_timer2+1)^(0+128),w
  1229  0B5D  00C3               	movwf	init_timer2@sfr^(0+128)
  1230                           
  1231                           ;main.c: 57: sfr += 4;
  1232  0B5E  3004               	movlw	4
  1233  0B5F  00C0               	movwf	??_init_timer2^(0+128)
  1234  0B60  0840               	movf	??_init_timer2^(0+128),w
  1235  0B61  07C3               	addwf	init_timer2@sfr^(0+128),f
  1236                           
  1237                           ;main.c: 58: sfr += pre;
  1238  0B62  0842               	movf	init_timer2@pre^(0+128),w
  1239  0B63  00C0               	movwf	??_init_timer2^(0+128)
  1240  0B64  0840               	movf	??_init_timer2^(0+128),w
  1241  0B65  07C3               	addwf	init_timer2@sfr^(0+128),f
  1242                           
  1243                           ;main.c: 59: T2CON = sfr;
  1244  0B66  0843               	movf	init_timer2@sfr^(0+128),w
  1245  0B67  1283               	bcf	3,5	;RP0=0, select bank0
  1246  0B68  1303               	bcf	3,6	;RP1=0, select bank0
  1247  0B69  0092               	movwf	18	;volatile
  1248                           
  1249                           ;main.c: 60: PIE1bits.TMR2IE = 1;
  1250  0B6A  1683               	bsf	3,5	;RP0=1, select bank1
  1251  0B6B  1303               	bcf	3,6	;RP1=0, select bank1
  1252  0B6C  148C               	bsf	12,1	;volatile
  1253  0B6D  0008               	return
  1254  0B6E                     __end_of_init_timer2:	
  1255                           
  1256                           	psect	text3
  1257  0CAC                     __ptext3:	
  1258 ;; *************** function _cattle_nr *****************
  1259 ;; Defined at:
  1260 ;;		line 136 in file "main.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;  opt             1    wreg     unsigned char 
  1263 ;;  cattle          2    3[BANK1 ] unsigned int 
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;  opt             1    7[BANK1 ] unsigned char 
  1266 ;;  rta             2    8[BANK1 ] unsigned int 
  1267 ;;  dato            1   10[BANK1 ] unsigned char 
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  2    3[BANK1 ] unsigned int 
  1270 ;; Registers used:
  1271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1277 ;;      Params:         0       0       2       0       0
  1278 ;;      Locals:         0       0       4       0       0
  1279 ;;      Temps:          0       0       2       0       0
  1280 ;;      Totals:         0       0       8       0       0
  1281 ;;Total ram usage:        8 bytes
  1282 ;; Hardware stack levels used:    1
  1283 ;; Hardware stack levels required when called:    4
  1284 ;; This function calls:
  1285 ;;		_rw_eeprom
  1286 ;; This function is called by:
  1287 ;;		_main
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           
  1292                           ;psect for function _cattle_nr
  1293  0CAC                     _cattle_nr:	
  1294                           
  1295                           ;incstack = 0
  1296                           ; Regs used in _cattle_nr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1297                           ;cattle_nr@opt stored from wreg
  1298  0CAC  1683               	bsf	3,5	;RP0=1, select bank1
  1299  0CAD  1303               	bcf	3,6	;RP1=0, select bank1
  1300  0CAE  00C5               	movwf	cattle_nr@opt^(0+128)
  1301                           
  1302                           ;main.c: 137: unsigned int rta = 0;
  1303  0CAF  01C6               	clrf	cattle_nr@rta^(0+128)
  1304  0CB0  01C7               	clrf	(cattle_nr@rta+1)^(0+128)
  1305                           
  1306                           ;main.c: 138: unsigned char dato = 0;
  1307  0CB1  01C8               	clrf	cattle_nr@dato^(0+128)
  1308                           
  1309                           ;main.c: 139: switch (opt) {
  1310  0CB2  2D51               	goto	l2023
  1311  0CB3                     l1993:	
  1312                           ;main.c: 140: case 0:
  1313                           
  1314                           
  1315                           ;main.c: 141: dato = rw_eeprom(0x00, 0, 0);
  1316  0CB3  01BE               	clrf	rw_eeprom@data^(0+128)
  1317  0CB4  01BF               	clrf	rw_eeprom@rw^(0+128)
  1318  0CB5  3000               	movlw	0
  1319  0CB6  120A  158A  236E  120A  158A  	fcall	_rw_eeprom
  1320  0CBB  1683               	bsf	3,5	;RP0=1, select bank1
  1321  0CBC  1303               	bcf	3,6	;RP1=0, select bank1
  1322  0CBD  00C3               	movwf	??_cattle_nr^(0+128)
  1323  0CBE  0843               	movf	??_cattle_nr^(0+128),w
  1324  0CBF  00C8               	movwf	cattle_nr@dato^(0+128)
  1325                           
  1326                           ;main.c: 142: if (dato == 0x10) {
  1327  0CC0  3010               	movlw	16
  1328  0CC1  0648               	xorwf	cattle_nr@dato^(0+128),w
  1329  0CC2  1D03               	btfss	3,2
  1330  0CC3  2CF6               	goto	l2005
  1331                           
  1332                           ;main.c: 143: dato = rw_eeprom(0x01, 0, 0);
  1333  0CC4  01BE               	clrf	rw_eeprom@data^(0+128)
  1334  0CC5  01BF               	clrf	rw_eeprom@rw^(0+128)
  1335  0CC6  3001               	movlw	1
  1336  0CC7  120A  158A  236E  120A  158A  	fcall	_rw_eeprom
  1337  0CCC  1683               	bsf	3,5	;RP0=1, select bank1
  1338  0CCD  1303               	bcf	3,6	;RP1=0, select bank1
  1339  0CCE  00C3               	movwf	??_cattle_nr^(0+128)
  1340  0CCF  0843               	movf	??_cattle_nr^(0+128),w
  1341  0CD0  00C8               	movwf	cattle_nr@dato^(0+128)
  1342                           
  1343                           ;main.c: 144: rta = dato;
  1344  0CD1  0848               	movf	cattle_nr@dato^(0+128),w
  1345  0CD2  00C3               	movwf	??_cattle_nr^(0+128)
  1346  0CD3  01C4               	clrf	(??_cattle_nr^(0+128)+1)
  1347  0CD4  0843               	movf	??_cattle_nr^(0+128),w
  1348  0CD5  00C6               	movwf	cattle_nr@rta^(0+128)
  1349  0CD6  0844               	movf	(??_cattle_nr+1)^(0+128),w
  1350  0CD7  00C7               	movwf	(cattle_nr@rta+1)^(0+128)
  1351                           
  1352                           ;main.c: 145: rta = rta << 8;
  1353  0CD8  0846               	movf	cattle_nr@rta^(0+128),w
  1354  0CD9  00C4               	movwf	(??_cattle_nr^(0+128)+1)
  1355  0CDA  01C3               	clrf	??_cattle_nr^(0+128)
  1356  0CDB  0843               	movf	??_cattle_nr^(0+128),w
  1357  0CDC  00C6               	movwf	cattle_nr@rta^(0+128)
  1358  0CDD  0844               	movf	(??_cattle_nr+1)^(0+128),w
  1359  0CDE  00C7               	movwf	(cattle_nr@rta+1)^(0+128)
  1360                           
  1361                           ;main.c: 146: dato = rw_eeprom(0x02, 0, 0);
  1362  0CDF  01BE               	clrf	rw_eeprom@data^(0+128)
  1363  0CE0  01BF               	clrf	rw_eeprom@rw^(0+128)
  1364  0CE1  3002               	movlw	2
  1365  0CE2  120A  158A  236E  120A  158A  	fcall	_rw_eeprom
  1366  0CE7  1683               	bsf	3,5	;RP0=1, select bank1
  1367  0CE8  1303               	bcf	3,6	;RP1=0, select bank1
  1368  0CE9  00C3               	movwf	??_cattle_nr^(0+128)
  1369  0CEA  0843               	movf	??_cattle_nr^(0+128),w
  1370  0CEB  00C8               	movwf	cattle_nr@dato^(0+128)
  1371                           
  1372                           ;main.c: 147: rta += dato;
  1373  0CEC  0848               	movf	cattle_nr@dato^(0+128),w
  1374  0CED  00C3               	movwf	??_cattle_nr^(0+128)
  1375  0CEE  01C4               	clrf	(??_cattle_nr^(0+128)+1)
  1376  0CEF  0843               	movf	??_cattle_nr^(0+128),w
  1377  0CF0  07C6               	addwf	cattle_nr@rta^(0+128),f
  1378  0CF1  1803               	skipnc
  1379  0CF2  0AC7               	incf	(cattle_nr@rta+1)^(0+128),f
  1380  0CF3  0844               	movf	(??_cattle_nr+1)^(0+128),w
  1381  0CF4  07C7               	addwf	(cattle_nr@rta+1)^(0+128),f
  1382                           
  1383                           ;main.c: 148: } else {
  1384  0CF5  2D59               	goto	l2025
  1385  0CF6                     l2005:	
  1386                           
  1387                           ;main.c: 149: rw_eeprom(0x00, 0x10, 1);
  1388  0CF6  3010               	movlw	16
  1389  0CF7  00C3               	movwf	??_cattle_nr^(0+128)
  1390  0CF8  0843               	movf	??_cattle_nr^(0+128),w
  1391  0CF9  00BE               	movwf	rw_eeprom@data^(0+128)
  1392  0CFA  01BF               	clrf	rw_eeprom@rw^(0+128)
  1393  0CFB  0ABF               	incf	rw_eeprom@rw^(0+128),f
  1394  0CFC  3000               	movlw	0
  1395  0CFD  120A  158A  236E  120A  158A  	fcall	_rw_eeprom
  1396                           
  1397                           ;main.c: 150: rw_eeprom(0x01, 0x00, 1);
  1398  0D02  1683               	bsf	3,5	;RP0=1, select bank1
  1399  0D03  1303               	bcf	3,6	;RP1=0, select bank1
  1400  0D04  01BE               	clrf	rw_eeprom@data^(0+128)
  1401  0D05  01BF               	clrf	rw_eeprom@rw^(0+128)
  1402  0D06  0ABF               	incf	rw_eeprom@rw^(0+128),f
  1403  0D07  3001               	movlw	1
  1404  0D08  120A  158A  236E  120A  158A  	fcall	_rw_eeprom
  1405                           
  1406                           ;main.c: 151: rw_eeprom(0x02, 0x00, 1);
  1407  0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  1408  0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  1409  0D0F  01BE               	clrf	rw_eeprom@data^(0+128)
  1410  0D10  01BF               	clrf	rw_eeprom@rw^(0+128)
  1411  0D11  0ABF               	incf	rw_eeprom@rw^(0+128),f
  1412  0D12  3002               	movlw	2
  1413  0D13  120A  158A  236E  120A  158A  	fcall	_rw_eeprom
  1414                           
  1415                           ;main.c: 152: rta = 0;
  1416  0D18  1683               	bsf	3,5	;RP0=1, select bank1
  1417  0D19  1303               	bcf	3,6	;RP1=0, select bank1
  1418  0D1A  01C6               	clrf	cattle_nr@rta^(0+128)
  1419  0D1B  01C7               	clrf	(cattle_nr@rta+1)^(0+128)
  1420                           
  1421                           ;main.c: 153: }
  1422                           ;main.c: 154: break;
  1423  0D1C  2D59               	goto	l2025
  1424  0D1D                     l2009:	
  1425                           ;main.c: 155: case 1:
  1426                           
  1427                           
  1428                           ;main.c: 156: dato = cattle & 0x00FF;
  1429  0D1D  0841               	movf	cattle_nr@cattle^(0+128),w
  1430  0D1E  00C3               	movwf	??_cattle_nr^(0+128)
  1431  0D1F  0843               	movf	??_cattle_nr^(0+128),w
  1432  0D20  00C8               	movwf	cattle_nr@dato^(0+128)
  1433                           
  1434                           ;main.c: 157: rw_eeprom(0x02, dato, 1);
  1435  0D21  0848               	movf	cattle_nr@dato^(0+128),w
  1436  0D22  00C3               	movwf	??_cattle_nr^(0+128)
  1437  0D23  0843               	movf	??_cattle_nr^(0+128),w
  1438  0D24  00BE               	movwf	rw_eeprom@data^(0+128)
  1439  0D25  01BF               	clrf	rw_eeprom@rw^(0+128)
  1440  0D26  0ABF               	incf	rw_eeprom@rw^(0+128),f
  1441  0D27  3002               	movlw	2
  1442  0D28  120A  158A  236E  120A  158A  	fcall	_rw_eeprom
  1443                           
  1444                           ;main.c: 159: cattle = cattle >> 8;
  1445  0D2D  1683               	bsf	3,5	;RP0=1, select bank1
  1446  0D2E  1303               	bcf	3,6	;RP1=0, select bank1
  1447  0D2F  0842               	movf	(cattle_nr@cattle+1)^(0+128),w
  1448  0D30  00C4               	movwf	(??_cattle_nr^(0+128)+1)
  1449  0D31  0841               	movf	cattle_nr@cattle^(0+128),w
  1450  0D32  00C3               	movwf	??_cattle_nr^(0+128)
  1451  0D33  0844               	movf	(??_cattle_nr^(0+128)+1),w
  1452  0D34  00C3               	movwf	??_cattle_nr^(0+128)
  1453  0D35  01C4               	clrf	(??_cattle_nr^(0+128)+1)
  1454  0D36  0843               	movf	??_cattle_nr^(0+128),w
  1455  0D37  00C1               	movwf	cattle_nr@cattle^(0+128)
  1456  0D38  0844               	movf	(??_cattle_nr+1)^(0+128),w
  1457  0D39  00C2               	movwf	(cattle_nr@cattle+1)^(0+128)
  1458                           
  1459                           ;main.c: 160: dato = cattle & 0x00FF;
  1460  0D3A  0841               	movf	cattle_nr@cattle^(0+128),w
  1461  0D3B  00C3               	movwf	??_cattle_nr^(0+128)
  1462  0D3C  0843               	movf	??_cattle_nr^(0+128),w
  1463  0D3D  00C8               	movwf	cattle_nr@dato^(0+128)
  1464                           
  1465                           ;main.c: 161: rw_eeprom(0x01, dato, 1);
  1466  0D3E  0848               	movf	cattle_nr@dato^(0+128),w
  1467  0D3F  00C3               	movwf	??_cattle_nr^(0+128)
  1468  0D40  0843               	movf	??_cattle_nr^(0+128),w
  1469  0D41  00BE               	movwf	rw_eeprom@data^(0+128)
  1470  0D42  01BF               	clrf	rw_eeprom@rw^(0+128)
  1471  0D43  0ABF               	incf	rw_eeprom@rw^(0+128),f
  1472  0D44  3001               	movlw	1
  1473  0D45  120A  158A  236E  120A  158A  	fcall	_rw_eeprom
  1474                           
  1475                           ;main.c: 162: rta = 0x10;
  1476  0D4A  3010               	movlw	16
  1477  0D4B  1683               	bsf	3,5	;RP0=1, select bank1
  1478  0D4C  1303               	bcf	3,6	;RP1=0, select bank1
  1479  0D4D  00C6               	movwf	cattle_nr@rta^(0+128)
  1480  0D4E  3000               	movlw	0
  1481  0D4F  00C7               	movwf	(cattle_nr@rta^(0+128)+1)
  1482                           
  1483                           ;main.c: 164: }
  1484                           
  1485                           ;main.c: 163: break;
  1486  0D50  2D59               	goto	l2025
  1487  0D51                     l2023:	
  1488  0D51  0845               	movf	cattle_nr@opt^(0+128),w
  1489                           
  1490                           ; Switch size 1, requested type "space"
  1491                           ; Number of cases is 2, Range of values is 0 to 1
  1492                           ; switch strategies available:
  1493                           ; Name         Instructions Cycles
  1494                           ; simple_byte            7     4 (average)
  1495                           ; direct_byte           14     8 (fixed)
  1496                           ; jumptable            260     6 (fixed)
  1497                           ;	Chosen strategy is simple_byte
  1498  0D52  3A00               	xorlw	0	; case 0
  1499  0D53  1903               	skipnz
  1500  0D54  2CB3               	goto	l1993
  1501  0D55  3A01               	xorlw	1	; case 1
  1502  0D56  1903               	skipnz
  1503  0D57  2D1D               	goto	l2009
  1504  0D58  2D59               	goto	l2025
  1505  0D59                     l2025:	
  1506                           
  1507                           ;main.c: 165: return rta;
  1508  0D59  0847               	movf	(cattle_nr@rta+1)^(0+128),w
  1509  0D5A  00C2               	movwf	(?_cattle_nr+1)^(0+128)
  1510  0D5B  0846               	movf	cattle_nr@rta^(0+128),w
  1511  0D5C  00C1               	movwf	?_cattle_nr^(0+128)
  1512  0D5D  0008               	return
  1513  0D5E                     __end_of_cattle_nr:	
  1514                           
  1515                           	psect	text4
  1516  0B6E                     __ptext4:	
  1517 ;; *************** function _rw_eeprom *****************
  1518 ;; Defined at:
  1519 ;;		line 63 in file "main.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  addr            1    wreg     unsigned char 
  1522 ;;  data            1    0[BANK1 ] unsigned char 
  1523 ;;  rw              1    1[BANK1 ] unsigned char 
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;  addr            1    2[BANK1 ] unsigned char 
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      unsigned char 
  1528 ;; Registers used:
  1529 ;;		wreg, status,2, status,0
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1535 ;;      Params:         0       0       2       0       0
  1536 ;;      Locals:         0       0       1       0       0
  1537 ;;      Temps:          0       0       0       0       0
  1538 ;;      Totals:         0       0       3       0       0
  1539 ;;Total ram usage:        3 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; Hardware stack levels required when called:    3
  1542 ;; This function calls:
  1543 ;;		Nothing
  1544 ;; This function is called by:
  1545 ;;		_cattle_nr
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           
  1550                           ;psect for function _rw_eeprom
  1551  0B6E                     _rw_eeprom:	
  1552                           
  1553                           ;incstack = 0
  1554                           ; Regs used in _rw_eeprom: [wreg+status,2+status,0]
  1555                           ;rw_eeprom@addr stored from wreg
  1556  0B6E  1683               	bsf	3,5	;RP0=1, select bank1
  1557  0B6F  1303               	bcf	3,6	;RP1=0, select bank1
  1558  0B70  00C0               	movwf	rw_eeprom@addr^(0+128)
  1559                           
  1560                           ;main.c: 65: if (rw) {
  1561  0B71  083F               	movf	rw_eeprom@rw^(0+128),w
  1562  0B72  1903               	btfsc	3,2
  1563  0B73  2B8E               	goto	l1821
  1564                           
  1565                           ;main.c: 66: EEADR = addr;
  1566  0B74  0840               	movf	rw_eeprom@addr^(0+128),w
  1567  0B75  1283               	bcf	3,5	;RP0=0, select bank2
  1568  0B76  1703               	bsf	3,6	;RP1=1, select bank2
  1569  0B77  008D               	movwf	13	;volatile
  1570                           
  1571                           ;main.c: 67: EEDAT = data;
  1572  0B78  1683               	bsf	3,5	;RP0=1, select bank1
  1573  0B79  1303               	bcf	3,6	;RP1=0, select bank1
  1574  0B7A  083E               	movf	rw_eeprom@data^(0+128),w
  1575  0B7B  1283               	bcf	3,5	;RP0=0, select bank2
  1576  0B7C  1703               	bsf	3,6	;RP1=1, select bank2
  1577  0B7D  008C               	movwf	12	;volatile
  1578                           
  1579                           ;main.c: 68: EECON1bits.EEPGD = 0;
  1580  0B7E  1683               	bsf	3,5	;RP0=1, select bank3
  1581  0B7F  1703               	bsf	3,6	;RP1=1, select bank3
  1582  0B80  138C               	bcf	12,7	;volsfr
  1583                           
  1584                           ;main.c: 69: EECON1bits.WREN = 1;
  1585  0B81  150C               	bsf	12,2	;volsfr
  1586                           
  1587                           ;main.c: 70: EECON2 = 0x55;
  1588  0B82  3055               	movlw	85
  1589  0B83  008D               	movwf	13	;volsfr
  1590                           
  1591                           ;main.c: 71: EECON2 = 0xAA;
  1592  0B84  30AA               	movlw	170
  1593  0B85  008D               	movwf	13	;volsfr
  1594                           
  1595                           ;main.c: 72: EECON1bits.WR = 1;
  1596  0B86  148C               	bsf	12,1	;volsfr
  1597  0B87                     l124:	
  1598                           ;main.c: 73: while (!PIR2bits.EEIF);
  1599                           
  1600  0B87  1283               	bcf	3,5	;RP0=0, select bank0
  1601  0B88  1303               	bcf	3,6	;RP1=0, select bank0
  1602  0B89  1E0D               	btfss	13,4	;volatile
  1603  0B8A  2B87               	goto	l124
  1604                           
  1605                           ;main.c: 74: PIR2bits.EEIF = 0;
  1606  0B8B  120D               	bcf	13,4	;volatile
  1607                           
  1608                           ;main.c: 75: return 0;
  1609  0B8C  3000               	movlw	0
  1610                           
  1611                           ;main.c: 76: }
  1612  0B8D  0008               	return
  1613  0B8E                     l1821:	
  1614                           
  1615                           ;main.c: 77: else {
  1616                           ;main.c: 78: EEADR = addr;
  1617  0B8E  1683               	bsf	3,5	;RP0=1, select bank1
  1618  0B8F  1303               	bcf	3,6	;RP1=0, select bank1
  1619  0B90  0840               	movf	rw_eeprom@addr^(0+128),w
  1620  0B91  1283               	bcf	3,5	;RP0=0, select bank2
  1621  0B92  1703               	bsf	3,6	;RP1=1, select bank2
  1622  0B93  008D               	movwf	13	;volatile
  1623                           
  1624                           ;main.c: 79: EECON1bits.EEPGD = 0;
  1625  0B94  1683               	bsf	3,5	;RP0=1, select bank3
  1626  0B95  1703               	bsf	3,6	;RP1=1, select bank3
  1627  0B96  138C               	bcf	12,7	;volsfr
  1628                           
  1629                           ;main.c: 80: EECON1bits.RD = 1;
  1630  0B97  140C               	bsf	12,0	;volsfr
  1631                           
  1632                           ;main.c: 81: return EEDAT;
  1633  0B98  1283               	bcf	3,5	;RP0=0, select bank2
  1634  0B99  1703               	bsf	3,6	;RP1=1, select bank2
  1635  0B9A  080C               	movf	12,w	;volatile
  1636  0B9B  0008               	return
  1637  0B9C                     __end_of_rw_eeprom:	
  1638                           
  1639                           	psect	text5
  1640  002F                     __ptext5:	
  1641 ;; *************** function _ints_isr *****************
  1642 ;; Defined at:
  1643 ;;		line 168 in file "main.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;		None
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;  k               1   45[BANK0 ] unsigned char 
  1648 ;;  k               1   44[BANK0 ] unsigned char 
  1649 ;;  lower           2   50[BANK0 ] unsigned int 
  1650 ;;  aux             2   47[BANK0 ] unsigned int 
  1651 ;;  lower           2   54[BANK0 ] unsigned int 
  1652 ;;  valor           2   52[BANK0 ] unsigned int 
  1653 ;;  upper           2   33[BANK0 ] unsigned int 
  1654 ;;  nral1           1   49[BANK0 ] unsigned char 
  1655 ;;  aux             1   46[BANK0 ] unsigned char 
  1656 ;;  garron_2u       1   41[BANK0 ] unsigned char 
  1657 ;;  garron_2d       1   40[BANK0 ] unsigned char 
  1658 ;;  garron_2c       1   39[BANK0 ] unsigned char 
  1659 ;;  garron_1u       1   38[BANK0 ] unsigned char 
  1660 ;;  garron_1d       1   37[BANK0 ] unsigned char 
  1661 ;;  garron_1c       1   36[BANK0 ] unsigned char 
  1662 ;;  nral2           1   35[BANK0 ] unsigned char 
  1663 ;;  drop            1   32[BANK0 ] unsigned char 
  1664 ;; Return value:  Size  Location     Type
  1665 ;;                  1    wreg      void 
  1666 ;; Registers used:
  1667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1673 ;;      Params:         0       0       0       0       0
  1674 ;;      Locals:         0      24       0       0       0
  1675 ;;      Temps:          0      12       0       0       0
  1676 ;;      Totals:         0      36       0       0       0
  1677 ;;Total ram usage:       36 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    2
  1680 ;; This function calls:
  1681 ;;		___lwdiv
  1682 ;;		___wmul
  1683 ;;		_display
  1684 ;;		_printf
  1685 ;;		i1_cattle_nr
  1686 ;; This function is called by:
  1687 ;;		Interrupt level 1
  1688 ;; This function uses a non-reentrant model
  1689 ;;
  1690                           
  1691                           
  1692                           ;psect for function _ints_isr
  1693  002F                     _ints_isr:	
  1694                           
  1695                           ;main.c: 171: if (PIR1bits.RCIF) {
  1696  002F  1E8C               	btfss	12,5	;volatile
  1697  0030  2D48               	goto	i1l2447
  1698                           
  1699                           ;main.c: 173: unsigned char aux = 0, nral1 = 0, nral2 = 0;
  1700  0031  01CE               	clrf	ints_isr@aux
  1701  0032  01D1               	clrf	ints_isr@nral1
  1702  0033  01C3               	clrf	ints_isr@nral2
  1703                           
  1704                           ;main.c: 174: unsigned int valor = 0, upper = 0, lower = 0;
  1705  0034  01D4               	clrf	ints_isr@valor
  1706  0035  01D5               	clrf	ints_isr@valor+1
  1707  0036  01C1               	clrf	ints_isr@upper
  1708  0037  01C2               	clrf	ints_isr@upper+1
  1709  0038  01D6               	clrf	ints_isr@lower
  1710  0039  01D7               	clrf	ints_isr@lower+1
  1711                           
  1712                           ;main.c: 175: unsigned char garron_1c = 0, garron_1d = 0, garron_1u = 0;
  1713  003A  01C4               	clrf	ints_isr@garron_1c
  1714  003B  01C5               	clrf	ints_isr@garron_1d
  1715  003C  01C6               	clrf	ints_isr@garron_1u
  1716                           
  1717                           ;main.c: 176: unsigned char garron_2c = 0, garron_2d = 0, garron_2u = 0;
  1718  003D  01C7               	clrf	ints_isr@garron_2c
  1719  003E  01C8               	clrf	ints_isr@garron_2d
  1720  003F  01C9               	clrf	ints_isr@garron_2u
  1721  0040                     i1l165:	
  1722                           ;main.c: 177: static bit process;
  1723                           ;main.c: 178: unsigned char drop;
  1724                           ;main.c: 191: while (!PIR1bits.RCIF);
  1725                           
  1726  0040  1E8C               	btfss	12,5	;volatile
  1727  0041  2840               	goto	i1l165
  1728                           
  1729                           ;main.c: 192: if (!RCSTAbits.FERR & !RCSTAbits.OERR) {
  1730  0042  1898               	btfsc	24,1	;volatile
  1731  0043  2846               	goto	u209_20
  1732  0044  3001               	movlw	1
  1733  0045  2847               	goto	u209_22
  1734  0046                     u209_20:	
  1735  0046  3000               	movlw	0
  1736  0047                     u209_22:	
  1737  0047  00B4               	movwf	??_ints_isr
  1738  0048  1918               	btfsc	24,2	;volatile
  1739  0049  284C               	goto	u210_20
  1740  004A  3001               	movlw	1
  1741  004B  284D               	goto	u210_22
  1742  004C                     u210_20:	
  1743  004C  3000               	movlw	0
  1744  004D                     u210_22:	
  1745  004D  0534               	andwf	??_ints_isr,w
  1746  004E  3800               	iorlw	0
  1747  004F  1903               	skipnz
  1748  0050  2D35               	goto	i1l2441
  1749                           
  1750                           ;main.c: 193: datos[i] = RCREG;
  1751  0051  081A               	movf	26,w	;volatile
  1752  0052  00B4               	movwf	??_ints_isr
  1753  0053  0868               	movf	_i,w
  1754  0054  3EA0               	addlw	(low (_datos| 0))& (0+255)
  1755  0055  0084               	movwf	4
  1756  0056  0834               	movf	??_ints_isr,w
  1757  0057  1383               	bcf	3,7	;select IRP bank1
  1758  0058  0080               	movwf	0
  1759                           
  1760                           ;main.c: 194: i++;
  1761  0059  3001               	movlw	1
  1762  005A  00B4               	movwf	??_ints_isr
  1763  005B  0834               	movf	??_ints_isr,w
  1764  005C  07E8               	addwf	_i,f
  1765                           
  1766                           ;main.c: 198: if (datos[i-1] == '\r' | datos[i-1] == '\n') {
  1767  005D  0868               	movf	_i,w
  1768  005E  3EFF               	addlw	255
  1769  005F  3EA0               	addlw	(low (_datos| 0))& (0+255)
  1770  0060  0084               	movwf	4
  1771  0061  300D               	movlw	13
  1772  0062  0600               	xorwf	0,w
  1773  0063  1903               	btfsc	3,2
  1774  0064  286D               	goto	i1l171
  1775  0065  0868               	movf	_i,w
  1776  0066  3EFF               	addlw	255
  1777  0067  3EA0               	addlw	(low (_datos| 0))& (0+255)
  1778  0068  0084               	movwf	4
  1779  0069  300A               	movlw	10
  1780  006A  0600               	xorwf	0,w
  1781  006B  1D03               	btfss	3,2
  1782  006C  2D48               	goto	i1l2447
  1783  006D                     i1l171:	
  1784                           
  1785                           ;main.c: 199: process = 0;
  1786  006D  106A               	bcf	ints_isr@process/(0+8),ints_isr@process& (0+7)
  1787                           
  1788                           ;main.c: 200: if (datos[0] == 0x02) {
  1789  006E  3002               	movlw	2
  1790  006F  1683               	bsf	3,5	;RP0=1, select bank1
  1791  0070  1303               	bcf	3,6	;RP1=0, select bank1
  1792  0071  0620               	xorwf	_datos^(0+128),w
  1793  0072  1D03               	btfss	3,2
  1794  0073  29DB               	goto	i1l2227
  1795                           
  1796                           ;main.c: 201: if (i > 20) {
  1797  0074  3015               	movlw	21
  1798  0075  1283               	bcf	3,5	;RP0=0, select bank0
  1799  0076  1303               	bcf	3,6	;RP1=0, select bank0
  1800  0077  0268               	subwf	_i,w
  1801  0078  1C03               	skipc
  1802  0079  2963               	goto	i1l2213
  1803                           
  1804                           ;main.c: 202: for (unsigned char k = 0; k < i; k++) {
  1805  007A  01CC               	clrf	ints_isr@k
  1806  007B  2880               	goto	i1l2187
  1807  007C                     i1l2185:	
  1808                           ;main.c: 205: break;
  1809                           
  1810  007C  3001               	movlw	1
  1811  007D  00B4               	movwf	??_ints_isr
  1812  007E  0834               	movf	??_ints_isr,w
  1813  007F  07CC               	addwf	ints_isr@k,f
  1814  0080                     i1l2187:	
  1815  0080  0868               	movf	_i,w
  1816  0081  024C               	subwf	ints_isr@k,w
  1817  0082  1803               	btfsc	3,0
  1818  0083  288F               	goto	i1l2189
  1819                           
  1820                           ;main.c: 203: if (datos[k] == 0x23) {
  1821  0084  084C               	movf	ints_isr@k,w
  1822  0085  3EA0               	addlw	(low (_datos| 0))& (0+255)
  1823  0086  0084               	movwf	4
  1824  0087  3023               	movlw	35
  1825  0088  0600               	xorwf	0,w
  1826  0089  1D03               	btfss	3,2
  1827  008A  287C               	goto	i1l2185
  1828                           
  1829                           ;main.c: 204: nral1 = k;
  1830  008B  084C               	movf	ints_isr@k,w
  1831  008C  00B4               	movwf	??_ints_isr
  1832  008D  0834               	movf	??_ints_isr,w
  1833  008E  00D1               	movwf	ints_isr@nral1
  1834  008F                     i1l2189:	
  1835                           
  1836                           ;main.c: 206: }
  1837                           ;main.c: 207: }
  1838                           ;main.c: 208: for (unsigned char k = (nral1 + 1); k < i; k++) {
  1839  008F  0851               	movf	ints_isr@nral1,w
  1840  0090  3E01               	addlw	1
  1841  0091  00B4               	movwf	??_ints_isr
  1842  0092  0834               	movf	??_ints_isr,w
  1843  0093  00CD               	movwf	ints_isr@k_401
  1844  0094  2899               	goto	i1l2197
  1845  0095                     i1l2195:	
  1846                           ;main.c: 211: break;
  1847                           
  1848  0095  3001               	movlw	1
  1849  0096  00B4               	movwf	??_ints_isr
  1850  0097  0834               	movf	??_ints_isr,w
  1851  0098  07CD               	addwf	ints_isr@k_401,f
  1852  0099                     i1l2197:	
  1853  0099  0868               	movf	_i,w
  1854  009A  024D               	subwf	ints_isr@k_401,w
  1855  009B  1803               	btfsc	3,0
  1856  009C  28A8               	goto	i1l2199
  1857                           
  1858                           ;main.c: 209: if (datos[k] == 0x23) {
  1859  009D  084D               	movf	ints_isr@k_401,w
  1860  009E  3EA0               	addlw	(low (_datos| 0))& (0+255)
  1861  009F  0084               	movwf	4
  1862  00A0  3023               	movlw	35
  1863  00A1  0600               	xorwf	0,w
  1864  00A2  1D03               	btfss	3,2
  1865  00A3  2895               	goto	i1l2195
  1866                           
  1867                           ;main.c: 210: nral2 = k;
  1868  00A4  084D               	movf	ints_isr@k_401,w
  1869  00A5  00B4               	movwf	??_ints_isr
  1870  00A6  0834               	movf	??_ints_isr,w
  1871  00A7  00C3               	movwf	ints_isr@nral2
  1872  00A8                     i1l2199:	
  1873                           
  1874                           ;main.c: 212: }
  1875                           ;main.c: 213: }
  1876                           ;main.c: 214: if (datos[nral1 + 1] != '-') {
  1877  00A8  0851               	movf	ints_isr@nral1,w
  1878  00A9  3E01               	addlw	1
  1879  00AA  3EA0               	addlw	(low (_datos| 0))& (0+255)
  1880  00AB  0084               	movwf	4
  1881  00AC  302D               	movlw	45
  1882  00AD  0600               	xorwf	0,w
  1883  00AE  1D03               	btfss	3,2
  1884  00AF  2945               	goto	i1l2209
  1885  00B0  2962               	goto	i1l2211
  1886  00B1                     i1l2203:	
  1887                           ;main.c: 216: case 3:
  1888                           
  1889                           ;main.c: 215: switch (nral2 - nral1) {
  1890                           
  1891                           
  1892                           ;main.c: 217: valor = (datos[nral1 + 1] - 48) * 100 + (datos[nral1 + 2] - 48) * 10;
  1893  00B1  0851               	movf	ints_isr@nral1,w
  1894  00B2  3E01               	addlw	1
  1895  00B3  3EA0               	addlw	(low (_datos| 0))& (0+255)
  1896  00B4  0084               	movwf	4
  1897  00B5  1383               	bcf	3,7	;select IRP bank1
  1898  00B6  0800               	movf	0,w
  1899  00B7  3ED0               	addlw	208
  1900  00B8  00F0               	movwf	___wmul@multiplier
  1901  00B9  30FF               	movlw	255
  1902  00BA  1803               	skipnc
  1903  00BB  3000               	movlw	0
  1904  00BC  00F1               	movwf	___wmul@multiplier+1
  1905  00BD  3064               	movlw	100
  1906  00BE  00F2               	movwf	___wmul@multiplicand
  1907  00BF  3000               	movlw	0
  1908  00C0  00F3               	movwf	___wmul@multiplicand+1
  1909  00C1  120A  158A  22FD  120A  118A  	fcall	___wmul
  1910  00C6  0870               	movf	?___wmul,w
  1911  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1912  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1913  00C9  00B4               	movwf	??_ints_isr
  1914  00CA  0871               	movf	?___wmul+1,w
  1915  00CB  00B5               	movwf	??_ints_isr+1
  1916  00CC  0851               	movf	ints_isr@nral1,w
  1917  00CD  3E02               	addlw	2
  1918  00CE  3EA0               	addlw	(low (_datos| 0))& (0+255)
  1919  00CF  0084               	movwf	4
  1920  00D0  1383               	bcf	3,7	;select IRP bank1
  1921  00D1  0800               	movf	0,w
  1922  00D2  3ED0               	addlw	208
  1923  00D3  00F0               	movwf	___wmul@multiplier
  1924  00D4  30FF               	movlw	255
  1925  00D5  1803               	skipnc
  1926  00D6  3000               	movlw	0
  1927  00D7  00F1               	movwf	___wmul@multiplier+1
  1928  00D8  300A               	movlw	10
  1929  00D9  00F2               	movwf	___wmul@multiplicand
  1930  00DA  3000               	movlw	0
  1931  00DB  00F3               	movwf	___wmul@multiplicand+1
  1932  00DC  120A  158A  22FD  120A  118A  	fcall	___wmul
  1933  00E1  0870               	movf	?___wmul,w
  1934  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1935  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1936  00E4  0734               	addwf	??_ints_isr,w
  1937  00E5  00D4               	movwf	ints_isr@valor
  1938  00E6  0871               	movf	?___wmul+1,w
  1939  00E7  1803               	skipnc
  1940  00E8  0A71               	incf	?___wmul+1,w
  1941  00E9  0735               	addwf	??_ints_isr+1,w
  1942  00EA  2943               	goto	L1
  1943  00EB                     i1l2205:	
  1944                           ;main.c: 219: case 4:
  1945                           
  1946                           ;main.c: 218: break;
  1947                           
  1948                           
  1949                           ;main.c: 220: valor = (datos[nral1 + 1] - 48) * 1000 + (datos[nral1 + 2] - 48) * 100 + (
      +                          datos[nral1 + 3] - 48) * 10;
  1950  00EB  0851               	movf	ints_isr@nral1,w
  1951  00EC  3E01               	addlw	1
  1952  00ED  3EA0               	addlw	(low (_datos| 0))& (0+255)
  1953  00EE  0084               	movwf	4
  1954  00EF  1383               	bcf	3,7	;select IRP bank1
  1955  00F0  0800               	movf	0,w
  1956  00F1  3ED0               	addlw	208
  1957  00F2  00F0               	movwf	___wmul@multiplier
  1958  00F3  30FF               	movlw	255
  1959  00F4  1803               	skipnc
  1960  00F5  3000               	movlw	0
  1961  00F6  00F1               	movwf	___wmul@multiplier+1
  1962  00F7  30E8               	movlw	232
  1963  00F8  00F2               	movwf	___wmul@multiplicand
  1964  00F9  3003               	movlw	3
  1965  00FA  00F3               	movwf	___wmul@multiplicand+1
  1966  00FB  120A  158A  22FD  120A  118A  	fcall	___wmul
  1967  0100  0870               	movf	?___wmul,w
  1968  0101  1283               	bcf	3,5	;RP0=0, select bank0
  1969  0102  1303               	bcf	3,6	;RP1=0, select bank0
  1970  0103  00B4               	movwf	??_ints_isr
  1971  0104  0871               	movf	?___wmul+1,w
  1972  0105  00B5               	movwf	??_ints_isr+1
  1973  0106  0851               	movf	ints_isr@nral1,w
  1974  0107  3E02               	addlw	2
  1975  0108  3EA0               	addlw	(low (_datos| 0))& (0+255)
  1976  0109  0084               	movwf	4
  1977  010A  1383               	bcf	3,7	;select IRP bank1
  1978  010B  0800               	movf	0,w
  1979  010C  3ED0               	addlw	208
  1980  010D  00F0               	movwf	___wmul@multiplier
  1981  010E  30FF               	movlw	255
  1982  010F  1803               	skipnc
  1983  0110  3000               	movlw	0
  1984  0111  00F1               	movwf	___wmul@multiplier+1
  1985  0112  3064               	movlw	100
  1986  0113  00F2               	movwf	___wmul@multiplicand
  1987  0114  3000               	movlw	0
  1988  0115  00F3               	movwf	___wmul@multiplicand+1
  1989  0116  120A  158A  22FD  120A  118A  	fcall	___wmul
  1990  011B  0870               	movf	?___wmul,w
  1991  011C  1283               	bcf	3,5	;RP0=0, select bank0
  1992  011D  1303               	bcf	3,6	;RP1=0, select bank0
  1993  011E  0734               	addwf	??_ints_isr,w
  1994  011F  00B6               	movwf	??_ints_isr+2
  1995  0120  0871               	movf	?___wmul+1,w
  1996  0121  1803               	skipnc
  1997  0122  0A71               	incf	?___wmul+1,w
  1998  0123  0735               	addwf	??_ints_isr+1,w
  1999  0124  00B7               	movwf	??_ints_isr+3
  2000  0125  0851               	movf	ints_isr@nral1,w
  2001  0126  3E03               	addlw	3
  2002  0127  3EA0               	addlw	(low (_datos| 0))& (0+255)
  2003  0128  0084               	movwf	4
  2004  0129  1383               	bcf	3,7	;select IRP bank1
  2005  012A  0800               	movf	0,w
  2006  012B  3ED0               	addlw	208
  2007  012C  00F0               	movwf	___wmul@multiplier
  2008  012D  30FF               	movlw	255
  2009  012E  1803               	skipnc
  2010  012F  3000               	movlw	0
  2011  0130  00F1               	movwf	___wmul@multiplier+1
  2012  0131  300A               	movlw	10
  2013  0132  00F2               	movwf	___wmul@multiplicand
  2014  0133  3000               	movlw	0
  2015  0134  00F3               	movwf	___wmul@multiplicand+1
  2016  0135  120A  158A  22FD  120A  118A  	fcall	___wmul
  2017  013A  0870               	movf	?___wmul,w
  2018  013B  1283               	bcf	3,5	;RP0=0, select bank0
  2019  013C  1303               	bcf	3,6	;RP1=0, select bank0
  2020  013D  0736               	addwf	??_ints_isr+2,w
  2021  013E  00D4               	movwf	ints_isr@valor
  2022  013F  0871               	movf	?___wmul+1,w
  2023  0140  1803               	skipnc
  2024  0141  0A71               	incf	?___wmul+1,w
  2025  0142  0737               	addwf	??_ints_isr+3,w
  2026  0143                     L1:	
  2027  0143  00D5               	movwf	ints_isr@valor+1
  2028                           
  2029                           ;main.c: 222: }
  2030                           
  2031                           ;main.c: 221: break;
  2032  0144  2961               	goto	i1l185
  2033  0145                     i1l2209:	
  2034  0145  0851               	movf	ints_isr@nral1,w
  2035  0146  00B4               	movwf	??_ints_isr
  2036  0147  01B5               	clrf	??_ints_isr+1
  2037  0148  09B4               	comf	??_ints_isr,f
  2038  0149  09B5               	comf	??_ints_isr+1,f
  2039  014A  0AB4               	incf	??_ints_isr,f
  2040  014B  1903               	skipnz
  2041  014C  0AB5               	incf	??_ints_isr+1,f
  2042  014D  0843               	movf	ints_isr@nral2,w
  2043  014E  0734               	addwf	??_ints_isr,w
  2044  014F  00B6               	movwf	??_ints_isr+2
  2045  0150  0835               	movf	??_ints_isr+1,w
  2046  0151  1803               	skipnc
  2047  0152  0A35               	incf	??_ints_isr+1,w
  2048  0153  00B7               	movwf	??_ints_isr+3
  2049                           
  2050                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2051                           ; Switch size 1, requested type "space"
  2052                           ; Number of cases is 1, Range of values is 0 to 0
  2053                           ; switch strategies available:
  2054                           ; Name         Instructions Cycles
  2055                           ; simple_byte            4     3 (average)
  2056                           ; direct_byte           11     8 (fixed)
  2057                           ; jumptable            260     6 (fixed)
  2058                           ;	Chosen strategy is simple_byte
  2059  0154  0837               	movf	??_ints_isr+3,w
  2060  0155  3A00               	xorlw	0	; case 0
  2061  0156  1903               	skipnz
  2062  0157  2959               	goto	i1l2751
  2063  0158  2961               	goto	i1l185
  2064  0159                     i1l2751:	
  2065                           
  2066                           ; Switch size 1, requested type "space"
  2067                           ; Number of cases is 2, Range of values is 3 to 4
  2068                           ; switch strategies available:
  2069                           ; Name         Instructions Cycles
  2070                           ; simple_byte            7     4 (average)
  2071                           ; direct_byte           17    11 (fixed)
  2072                           ; jumptable            263     9 (fixed)
  2073                           ;	Chosen strategy is simple_byte
  2074  0159  0836               	movf	??_ints_isr+2,w
  2075  015A  3A03               	xorlw	3	; case 3
  2076  015B  1903               	skipnz
  2077  015C  28B1               	goto	i1l2203
  2078  015D  3A07               	xorlw	7	; case 4
  2079  015E  1903               	skipnz
  2080  015F  28EB               	goto	i1l2205
  2081  0160  2961               	goto	i1l185
  2082  0161                     i1l185:	
  2083                           
  2084                           ;main.c: 223: process = 1;
  2085  0161  146A               	bsf	ints_isr@process/(0+8),ints_isr@process& (0+7)
  2086  0162                     i1l2211:	
  2087                           
  2088                           ;main.c: 224: }
  2089                           ;main.c: 225: i = 0;
  2090  0162  01E8               	clrf	_i
  2091  0163                     i1l2213:	
  2092                           
  2093                           ;main.c: 226: }
  2094                           ;main.c: 228: if (datos[i-1] == '\n') {
  2095  0163  0868               	movf	_i,w
  2096  0164  3EFF               	addlw	255
  2097  0165  3EA0               	addlw	(low (_datos| 0))& (0+255)
  2098  0166  0084               	movwf	4
  2099  0167  300A               	movlw	10
  2100  0168  1383               	bcf	3,7	;select IRP bank1
  2101  0169  0600               	xorwf	0,w
  2102  016A  1D03               	btfss	3,2
  2103  016B  29DD               	goto	i1l2229
  2104                           
  2105                           ;main.c: 229: if (datos[6] == '0' && datos[7] == '0') {
  2106  016C  3030               	movlw	48
  2107  016D  1683               	bsf	3,5	;RP0=1, select bank1
  2108  016E  1303               	bcf	3,6	;RP1=0, select bank1
  2109  016F  0626               	xorwf	(_datos^(0+128)+6),w
  2110  0170  1D03               	btfss	3,2
  2111  0171  297B               	goto	i1l2221
  2112  0172  3030               	movlw	48
  2113  0173  0627               	xorwf	(_datos^(0+128)+7),w
  2114  0174  1D03               	btfss	3,2
  2115  0175  297B               	goto	i1l2221
  2116                           
  2117                           ;main.c: 230: valor = 0;
  2118  0176  1283               	bcf	3,5	;RP0=0, select bank0
  2119  0177  1303               	bcf	3,6	;RP1=0, select bank0
  2120  0178  01D4               	clrf	ints_isr@valor
  2121  0179  01D5               	clrf	ints_isr@valor+1
  2122                           
  2123                           ;main.c: 231: } else {
  2124  017A  29D8               	goto	i1l2223
  2125  017B                     i1l2221:	
  2126                           
  2127                           ;main.c: 232: valor = (datos[6] - 48) * 1000 + (datos[7] - 48) * 100 + (datos[8] - 48) *
      +                           10 + (datos[9] - 48);
  2128  017B  1683               	bsf	3,5	;RP0=1, select bank1
  2129  017C  1303               	bcf	3,6	;RP1=0, select bank1
  2130  017D  0826               	movf	(_datos^(0+128)+6),w
  2131  017E  3ED0               	addlw	208
  2132  017F  00F0               	movwf	___wmul@multiplier
  2133  0180  30FF               	movlw	255
  2134  0181  1803               	skipnc
  2135  0182  3000               	movlw	0
  2136  0183  00F1               	movwf	___wmul@multiplier+1
  2137  0184  30E8               	movlw	232
  2138  0185  00F2               	movwf	___wmul@multiplicand
  2139  0186  3003               	movlw	3
  2140  0187  00F3               	movwf	___wmul@multiplicand+1
  2141  0188  120A  158A  22FD  120A  118A  	fcall	___wmul
  2142  018D  1683               	bsf	3,5	;RP0=1, select bank1
  2143  018E  1303               	bcf	3,6	;RP1=0, select bank1
  2144  018F  0829               	movf	(_datos^(0+128)+9),w
  2145  0190  0770               	addwf	?___wmul,w
  2146  0191  1283               	bcf	3,5	;RP0=0, select bank0
  2147  0192  1303               	bcf	3,6	;RP1=0, select bank0
  2148  0193  00B4               	movwf	??_ints_isr
  2149  0194  0871               	movf	?___wmul+1,w
  2150  0195  1803               	skipnc
  2151  0196  0A71               	incf	?___wmul+1,w
  2152  0197  00B5               	movwf	??_ints_isr+1
  2153  0198  1683               	bsf	3,5	;RP0=1, select bank1
  2154  0199  1303               	bcf	3,6	;RP1=0, select bank1
  2155  019A  0827               	movf	(_datos^(0+128)+7),w
  2156  019B  3ED0               	addlw	208
  2157  019C  00F0               	movwf	___wmul@multiplier
  2158  019D  30FF               	movlw	255
  2159  019E  1803               	skipnc
  2160  019F  3000               	movlw	0
  2161  01A0  00F1               	movwf	___wmul@multiplier+1
  2162  01A1  3064               	movlw	100
  2163  01A2  00F2               	movwf	___wmul@multiplicand
  2164  01A3  3000               	movlw	0
  2165  01A4  00F3               	movwf	___wmul@multiplicand+1
  2166  01A5  120A  158A  22FD  120A  118A  	fcall	___wmul
  2167  01AA  0870               	movf	?___wmul,w
  2168  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  2169  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  2170  01AD  0734               	addwf	??_ints_isr,w
  2171  01AE  00B6               	movwf	??_ints_isr+2
  2172  01AF  0871               	movf	?___wmul+1,w
  2173  01B0  1803               	skipnc
  2174  01B1  0A71               	incf	?___wmul+1,w
  2175  01B2  0735               	addwf	??_ints_isr+1,w
  2176  01B3  00B7               	movwf	??_ints_isr+3
  2177  01B4  1683               	bsf	3,5	;RP0=1, select bank1
  2178  01B5  1303               	bcf	3,6	;RP1=0, select bank1
  2179  01B6  0828               	movf	(_datos^(0+128)+8),w
  2180  01B7  3ED0               	addlw	208
  2181  01B8  00F0               	movwf	___wmul@multiplier
  2182  01B9  30FF               	movlw	255
  2183  01BA  1803               	skipnc
  2184  01BB  3000               	movlw	0
  2185  01BC  00F1               	movwf	___wmul@multiplier+1
  2186  01BD  300A               	movlw	10
  2187  01BE  00F2               	movwf	___wmul@multiplicand
  2188  01BF  3000               	movlw	0
  2189  01C0  00F3               	movwf	___wmul@multiplicand+1
  2190  01C1  120A  158A  22FD  120A  118A  	fcall	___wmul
  2191  01C6  0870               	movf	?___wmul,w
  2192  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  2193  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  2194  01C9  0736               	addwf	??_ints_isr+2,w
  2195  01CA  00B8               	movwf	??_ints_isr+4
  2196  01CB  0871               	movf	?___wmul+1,w
  2197  01CC  1803               	skipnc
  2198  01CD  0A71               	incf	?___wmul+1,w
  2199  01CE  0737               	addwf	??_ints_isr+3,w
  2200  01CF  00B9               	movwf	??_ints_isr+5
  2201  01D0  0838               	movf	??_ints_isr+4,w
  2202  01D1  3ED0               	addlw	208
  2203  01D2  00D4               	movwf	ints_isr@valor
  2204  01D3  0839               	movf	??_ints_isr+5,w
  2205  01D4  1803               	skipnc
  2206  01D5  3E01               	addlw	1
  2207  01D6  3EFF               	addlw	255
  2208  01D7  00D5               	movwf	ints_isr@valor+1
  2209  01D8                     i1l2223:	
  2210                           
  2211                           ;main.c: 234: }
  2212                           ;main.c: 235: i = 0;
  2213  01D8  01E8               	clrf	_i
  2214                           
  2215                           ;main.c: 236: process = 1;
  2216  01D9  146A               	bsf	ints_isr@process/(0+8),ints_isr@process& (0+7)
  2217                           
  2218                           ;main.c: 237: }
  2219                           ;main.c: 238: } else {
  2220  01DA  29DD               	goto	i1l2229
  2221  01DB                     i1l2227:	
  2222                           
  2223                           ;main.c: 239: i = 0;
  2224  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  2225  01DC  01E8               	clrf	_i
  2226  01DD                     i1l2229:	
  2227                           
  2228                           ;main.c: 240: }
  2229                           ;main.c: 242: if (datos[0] == '\t') {
  2230  01DD  3009               	movlw	9
  2231  01DE  1683               	bsf	3,5	;RP0=1, select bank1
  2232  01DF  1303               	bcf	3,6	;RP1=0, select bank1
  2233  01E0  0620               	xorwf	_datos^(0+128),w
  2234  01E1  1903               	btfsc	3,2
  2235  01E2  2AAA               	goto	i1l2291
  2236  01E3  2AB4               	goto	i1l191
  2237  01E4                     i1l2233:	
  2238                           ;main.c: 244: case 'R':
  2239                           
  2240                           ;main.c: 243: switch (datos[1]){
  2241                           
  2242                           
  2243                           ;main.c: 245: tempo = 0;
  2244  01E4  1283               	bcf	3,5	;RP0=0, select bank0
  2245  01E5  1303               	bcf	3,6	;RP1=0, select bank0
  2246  01E6  01DA               	clrf	_tempo
  2247  01E7  01DB               	clrf	_tempo+1
  2248                           
  2249                           ;main.c: 246: garron = 0;
  2250  01E8  01EB               	clrf	_garron
  2251  01E9  01EC               	clrf	_garron+1
  2252                           
  2253                           ;main.c: 247: res = 1;
  2254  01EA  01ED               	clrf	_res
  2255  01EB  0AED               	incf	_res,f
  2256  01EC                     i1l2237:	
  2257                           ;main.c: 248: do {
  2258                           
  2259                           
  2260                           ;main.c: 249: aux = cattle_nr(1, garron);
  2261  01EC  086C               	movf	_garron+1,w
  2262  01ED  00F4               	movwf	i1cattle_nr@cattle+1
  2263  01EE  086B               	movf	_garron,w
  2264  01EF  00F3               	movwf	i1cattle_nr@cattle
  2265  01F0  3001               	movlw	1
  2266  01F1  120A  158A  240C  120A  118A  	fcall	i1_cattle_nr
  2267  01F6  0873               	movf	?i1_cattle_nr,w
  2268  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  2269  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  2270  01F9  00B4               	movwf	??_ints_isr
  2271  01FA  0834               	movf	??_ints_isr,w
  2272  01FB  00CE               	movwf	ints_isr@aux
  2273                           
  2274                           ;main.c: 250: } while (aux != 0x10);
  2275  01FC  3010               	movlw	16
  2276  01FD  064E               	xorwf	ints_isr@aux,w
  2277  01FE  1D03               	btfss	3,2
  2278  01FF  29EC               	goto	i1l2237
  2279                           
  2280                           ;main.c: 251: outC = 0xF0;
  2281  0200  30F0               	movlw	240
  2282  0201  00B4               	movwf	??_ints_isr
  2283  0202  0834               	movf	??_ints_isr,w
  2284  0203  00E7               	movwf	_outC
  2285                           
  2286                           ;main.c: 252: outD = 0xF0;
  2287  0204  30F0               	movlw	240
  2288  0205  00B4               	movwf	??_ints_isr
  2289  0206  0834               	movf	??_ints_isr,w
  2290  0207  00E6               	movwf	_outD
  2291                           
  2292                           ;main.c: 253: outU = 0xF0;
  2293  0208  30F0               	movlw	240
  2294  0209  00B4               	movwf	??_ints_isr
  2295  020A  0834               	movf	??_ints_isr,w
  2296  020B  00E5               	movwf	_outU
  2297                           
  2298                           ;main.c: 254: resC = 0x00;
  2299  020C  01E4               	clrf	_resC
  2300                           
  2301                           ;main.c: 255: resD = 0x00;
  2302  020D  01E3               	clrf	_resD
  2303                           
  2304                           ;main.c: 256: resU = 0x00;
  2305  020E  01E2               	clrf	_resU
  2306                           
  2307                           ;main.c: 257: break;
  2308  020F  2AB4               	goto	i1l191
  2309  0210                     i1l2249:	
  2310                           ;main.c: 258: case 'G':
  2311                           
  2312                           
  2313                           ;main.c: 259: tempo = 0;
  2314  0210  1283               	bcf	3,5	;RP0=0, select bank0
  2315  0211  01DA               	clrf	_tempo
  2316  0212  01DB               	clrf	_tempo+1
  2317                           
  2318                           ;main.c: 260: timerReset = 0;
  2319  0213  01D8               	clrf	_timerReset
  2320  0214  01D9               	clrf	_timerReset+1
  2321                           
  2322                           ;main.c: 261: garron = (datos[2] - 48) * 100 + (datos[3] - 48) * 10 + (datos[4] - 48);
  2323  0215  1683               	bsf	3,5	;RP0=1, select bank1
  2324  0216  1303               	bcf	3,6	;RP1=0, select bank1
  2325  0217  0822               	movf	(_datos^(0+128)+2),w
  2326  0218  3ED0               	addlw	208
  2327  0219  00F0               	movwf	___wmul@multiplier
  2328  021A  30FF               	movlw	255
  2329  021B  1803               	skipnc
  2330  021C  3000               	movlw	0
  2331  021D  00F1               	movwf	___wmul@multiplier+1
  2332  021E  3064               	movlw	100
  2333  021F  00F2               	movwf	___wmul@multiplicand
  2334  0220  3000               	movlw	0
  2335  0221  00F3               	movwf	___wmul@multiplicand+1
  2336  0222  120A  158A  22FD  120A  118A  	fcall	___wmul
  2337  0227  1683               	bsf	3,5	;RP0=1, select bank1
  2338  0228  1303               	bcf	3,6	;RP1=0, select bank1
  2339  0229  0824               	movf	(_datos^(0+128)+4),w
  2340  022A  0770               	addwf	?___wmul,w
  2341  022B  1283               	bcf	3,5	;RP0=0, select bank0
  2342  022C  1303               	bcf	3,6	;RP1=0, select bank0
  2343  022D  00B4               	movwf	??_ints_isr
  2344  022E  0871               	movf	?___wmul+1,w
  2345  022F  1803               	skipnc
  2346  0230  0A71               	incf	?___wmul+1,w
  2347  0231  00B5               	movwf	??_ints_isr+1
  2348  0232  1683               	bsf	3,5	;RP0=1, select bank1
  2349  0233  1303               	bcf	3,6	;RP1=0, select bank1
  2350  0234  0823               	movf	(_datos^(0+128)+3),w
  2351  0235  3ED0               	addlw	208
  2352  0236  00F0               	movwf	___wmul@multiplier
  2353  0237  30FF               	movlw	255
  2354  0238  1803               	skipnc
  2355  0239  3000               	movlw	0
  2356  023A  00F1               	movwf	___wmul@multiplier+1
  2357  023B  300A               	movlw	10
  2358  023C  00F2               	movwf	___wmul@multiplicand
  2359  023D  3000               	movlw	0
  2360  023E  00F3               	movwf	___wmul@multiplicand+1
  2361  023F  120A  158A  22FD  120A  118A  	fcall	___wmul
  2362  0244  0870               	movf	?___wmul,w
  2363  0245  1283               	bcf	3,5	;RP0=0, select bank0
  2364  0246  1303               	bcf	3,6	;RP1=0, select bank0
  2365  0247  0734               	addwf	??_ints_isr,w
  2366  0248  00B6               	movwf	??_ints_isr+2
  2367  0249  0871               	movf	?___wmul+1,w
  2368  024A  1803               	skipnc
  2369  024B  0A71               	incf	?___wmul+1,w
  2370  024C  0735               	addwf	??_ints_isr+1,w
  2371  024D  00B7               	movwf	??_ints_isr+3
  2372  024E  0836               	movf	??_ints_isr+2,w
  2373  024F  3ED0               	addlw	208
  2374  0250  00EB               	movwf	_garron
  2375  0251  0837               	movf	??_ints_isr+3,w
  2376  0252  1803               	skipnc
  2377  0253  3E01               	addlw	1
  2378  0254  3EFF               	addlw	255
  2379  0255  00EC               	movwf	_garron+1
  2380                           
  2381                           ;main.c: 262: garron = garron << 1;
  2382  0256  1003               	clrc
  2383  0257  0D6B               	rlf	_garron,w
  2384  0258  00EB               	movwf	_garron
  2385  0259  0D6C               	rlf	_garron+1,w
  2386  025A  00EC               	movwf	_garron+1
  2387                           
  2388                           ;main.c: 263: res = 1;
  2389  025B  01ED               	clrf	_res
  2390  025C  0AED               	incf	_res,f
  2391  025D                     i1l2257:	
  2392                           ;main.c: 264: do {
  2393                           
  2394                           
  2395                           ;main.c: 265: aux = cattle_nr(1, garron);
  2396  025D  086C               	movf	_garron+1,w
  2397  025E  00F4               	movwf	i1cattle_nr@cattle+1
  2398  025F  086B               	movf	_garron,w
  2399  0260  00F3               	movwf	i1cattle_nr@cattle
  2400  0261  3001               	movlw	1
  2401  0262  120A  158A  240C  120A  118A  	fcall	i1_cattle_nr
  2402  0267  0873               	movf	?i1_cattle_nr,w
  2403  0268  1283               	bcf	3,5	;RP0=0, select bank0
  2404  0269  1303               	bcf	3,6	;RP1=0, select bank0
  2405  026A  00B4               	movwf	??_ints_isr
  2406  026B  0834               	movf	??_ints_isr,w
  2407  026C  00CE               	movwf	ints_isr@aux
  2408                           
  2409                           ;main.c: 266: } while (aux != 0x10);
  2410  026D  3010               	movlw	16
  2411  026E  064E               	xorwf	ints_isr@aux,w
  2412  026F  1D03               	btfss	3,2
  2413  0270  2A5D               	goto	i1l2257
  2414                           
  2415                           ;main.c: 267: lower = garron >> 1;
  2416  0271  086C               	movf	_garron+1,w
  2417  0272  00B5               	movwf	??_ints_isr+1
  2418  0273  086B               	movf	_garron,w
  2419  0274  00B4               	movwf	??_ints_isr
  2420  0275  1003               	clrc
  2421  0276  0CB5               	rrf	??_ints_isr+1,f
  2422  0277  0CB4               	rrf	??_ints_isr,f
  2423  0278  0834               	movf	??_ints_isr,w
  2424  0279  00D6               	movwf	ints_isr@lower
  2425  027A  0835               	movf	??_ints_isr+1,w
  2426  027B  00D7               	movwf	ints_isr@lower+1
  2427                           
  2428                           ;main.c: 268: outC = 0;
  2429  027C  01E7               	clrf	_outC
  2430                           
  2431                           ;main.c: 269: outD = 0;
  2432  027D  01E6               	clrf	_outD
  2433                           
  2434                           ;main.c: 270: outU = 0;
  2435  027E  01E5               	clrf	_outU
  2436                           
  2437                           ;main.c: 271: resC = 0;
  2438  027F  01E4               	clrf	_resC
  2439                           
  2440                           ;main.c: 272: resD = 0;
  2441  0280  01E3               	clrf	_resD
  2442                           
  2443                           ;main.c: 273: resU = 0;
  2444  0281  01E2               	clrf	_resU
  2445  0282                     i1l2279:	
  2446                           ;main.c: 274: while (lower > 99) {
  2447                           
  2448  0282  3000               	movlw	0
  2449  0283  0257               	subwf	ints_isr@lower+1,w
  2450  0284  3064               	movlw	100
  2451  0285  1903               	skipnz
  2452  0286  0256               	subwf	ints_isr@lower,w
  2453  0287  1C03               	btfss	3,0
  2454  0288  2A9E               	goto	i1l2285
  2455                           
  2456                           ;main.c: 275: resC++;
  2457  0289  3001               	movlw	1
  2458  028A  00B4               	movwf	??_ints_isr
  2459  028B  0834               	movf	??_ints_isr,w
  2460  028C  07E4               	addwf	_resC,f
  2461                           
  2462                           ;main.c: 276: lower -= 100;
  2463  028D  3064               	movlw	100
  2464  028E  02D6               	subwf	ints_isr@lower,f
  2465  028F  3000               	movlw	0
  2466  0290  1C03               	skipc
  2467  0291  03D7               	decf	ints_isr@lower+1,f
  2468  0292  02D7               	subwf	ints_isr@lower+1,f
  2469  0293  2A82               	goto	i1l2279
  2470  0294                     i1l2281:	
  2471                           ;main.c: 277: }
  2472                           ;main.c: 278: while (lower > 9) {
  2473                           
  2474                           
  2475                           ;main.c: 279: resD++;
  2476  0294  3001               	movlw	1
  2477  0295  00B4               	movwf	??_ints_isr
  2478  0296  0834               	movf	??_ints_isr,w
  2479  0297  07E3               	addwf	_resD,f
  2480                           
  2481                           ;main.c: 280: lower -= 10;
  2482  0298  300A               	movlw	10
  2483  0299  02D6               	subwf	ints_isr@lower,f
  2484  029A  3000               	movlw	0
  2485  029B  1C03               	skipc
  2486  029C  03D7               	decf	ints_isr@lower+1,f
  2487  029D  02D7               	subwf	ints_isr@lower+1,f
  2488  029E                     i1l2285:	
  2489  029E  3000               	movlw	0
  2490  029F  0257               	subwf	ints_isr@lower+1,w
  2491  02A0  300A               	movlw	10
  2492  02A1  1903               	skipnz
  2493  02A2  0256               	subwf	ints_isr@lower,w
  2494  02A3  1803               	skipnc
  2495  02A4  2A94               	goto	i1l2281
  2496                           
  2497                           ;main.c: 281: }
  2498                           ;main.c: 282: resU = lower;
  2499  02A5  0856               	movf	ints_isr@lower,w
  2500  02A6  00B4               	movwf	??_ints_isr
  2501  02A7  0834               	movf	??_ints_isr,w
  2502  02A8  00E2               	movwf	_resU
  2503                           
  2504                           ;main.c: 284: }
  2505                           
  2506                           ;main.c: 283: break;
  2507  02A9  2AB4               	goto	i1l191
  2508  02AA                     i1l2291:	
  2509  02AA  1683               	bsf	3,5	;RP0=1, select bank1
  2510  02AB  1303               	bcf	3,6	;RP1=0, select bank1
  2511  02AC  0821               	movf	(_datos^(0+128)+1),w
  2512                           
  2513                           ; Switch size 1, requested type "space"
  2514                           ; Number of cases is 2, Range of values is 71 to 82
  2515                           ; switch strategies available:
  2516                           ; Name         Instructions Cycles
  2517                           ; simple_byte            7     4 (average)
  2518                           ; direct_byte           47    11 (fixed)
  2519                           ; jumptable            263     9 (fixed)
  2520                           ;	Chosen strategy is simple_byte
  2521  02AD  3A47               	xorlw	71	; case 71
  2522  02AE  1903               	skipnz
  2523  02AF  2A10               	goto	i1l2249
  2524  02B0  3A15               	xorlw	21	; case 82
  2525  02B1  1903               	skipnz
  2526  02B2  29E4               	goto	i1l2233
  2527  02B3  2AB4               	goto	i1l191
  2528  02B4                     i1l191:	
  2529                           
  2530                           ;main.c: 299: }
  2531                           ;main.c: 301: if (process) {
  2532  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  2533  02B5  1C6A               	btfss	ints_isr@process/(0+8),ints_isr@process& (0+7)
  2534  02B6  2D48               	goto	i1l2447
  2535                           
  2536                           ;main.c: 303: if (valor > 90 && j < 20) {
  2537  02B7  3000               	movlw	0
  2538  02B8  0255               	subwf	ints_isr@valor+1,w
  2539  02B9  305B               	movlw	91
  2540  02BA  1903               	skipnz
  2541  02BB  0254               	subwf	ints_isr@valor,w
  2542  02BC  1C03               	skipc
  2543  02BD  2ACD               	goto	i1l2301
  2544  02BE  3014               	movlw	20
  2545  02BF  0269               	subwf	_j,w
  2546  02C0  1803               	skipnc
  2547  02C1  2ACD               	goto	i1l2301
  2548                           
  2549                           ;main.c: 304: accuValor += valor;
  2550  02C2  0854               	movf	ints_isr@valor,w
  2551  02C3  07DC               	addwf	_accuValor,f
  2552  02C4  1803               	skipnc
  2553  02C5  0ADD               	incf	_accuValor+1,f
  2554  02C6  0855               	movf	ints_isr@valor+1,w
  2555  02C7  07DD               	addwf	_accuValor+1,f
  2556                           
  2557                           ;main.c: 305: j++;
  2558  02C8  3001               	movlw	1
  2559  02C9  00B4               	movwf	??_ints_isr
  2560  02CA  0834               	movf	??_ints_isr,w
  2561  02CB  07E9               	addwf	_j,f
  2562                           
  2563                           ;main.c: 306: }
  2564  02CC  2D48               	goto	i1l2447
  2565  02CD                     i1l2301:	
  2566                           
  2567                           ;main.c: 307: else if (accuValor > 0 && valor < 90) {
  2568  02CD  085C               	movf	_accuValor,w
  2569  02CE  045D               	iorwf	_accuValor+1,w
  2570  02CF  1903               	btfsc	3,2
  2571  02D0  2D48               	goto	i1l2447
  2572  02D1  3000               	movlw	0
  2573  02D2  0255               	subwf	ints_isr@valor+1,w
  2574  02D3  305A               	movlw	90
  2575  02D4  1903               	skipnz
  2576  02D5  0254               	subwf	ints_isr@valor,w
  2577  02D6  1803               	skipnc
  2578  02D7  2D48               	goto	i1l2447
  2579                           
  2580                           ;main.c: 309: valor = accuValor / (j * 10);
  2581  02D8  0869               	movf	_j,w
  2582  02D9  00B4               	movwf	??_ints_isr
  2583  02DA  01B5               	clrf	??_ints_isr+1
  2584  02DB  0834               	movf	??_ints_isr,w
  2585  02DC  00F0               	movwf	___wmul@multiplier
  2586  02DD  0835               	movf	??_ints_isr+1,w
  2587  02DE  00F1               	movwf	___wmul@multiplier+1
  2588  02DF  300A               	movlw	10
  2589  02E0  00F2               	movwf	___wmul@multiplicand
  2590  02E1  3000               	movlw	0
  2591  02E2  00F3               	movwf	___wmul@multiplicand+1
  2592  02E3  120A  158A  22FD  120A  118A  	fcall	___wmul
  2593  02E8  0871               	movf	?___wmul+1,w
  2594  02E9  00F7               	movwf	___lwdiv@divisor+1
  2595  02EA  0870               	movf	?___wmul,w
  2596  02EB  00F6               	movwf	___lwdiv@divisor
  2597  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  2598  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  2599  02EE  085D               	movf	_accuValor+1,w
  2600  02EF  00F9               	movwf	___lwdiv@dividend+1
  2601  02F0  085C               	movf	_accuValor,w
  2602  02F1  00F8               	movwf	___lwdiv@dividend
  2603  02F2  120A  158A  23D0  120A  118A  	fcall	___lwdiv
  2604  02F7  0877               	movf	?___lwdiv+1,w
  2605  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  2606  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  2607  02FA  00D5               	movwf	ints_isr@valor+1
  2608  02FB  0876               	movf	?___lwdiv,w
  2609  02FC  00D4               	movwf	ints_isr@valor
  2610                           
  2611                           ;main.c: 310: upper = (valor + 1) * j * 10;
  2612  02FD  0854               	movf	ints_isr@valor,w
  2613  02FE  3E01               	addlw	1
  2614  02FF  00F0               	movwf	___wmul@multiplier
  2615  0300  0855               	movf	ints_isr@valor+1,w
  2616  0301  1803               	skipnc
  2617  0302  3E01               	addlw	1
  2618  0303  3E00               	addlw	0
  2619  0304  00F1               	movwf	___wmul@multiplier+1
  2620  0305  0869               	movf	_j,w
  2621  0306  00B4               	movwf	??_ints_isr
  2622  0307  01B5               	clrf	??_ints_isr+1
  2623  0308  0834               	movf	??_ints_isr,w
  2624  0309  00F2               	movwf	___wmul@multiplicand
  2625  030A  0835               	movf	??_ints_isr+1,w
  2626  030B  00F3               	movwf	___wmul@multiplicand+1
  2627  030C  120A  158A  22FD  120A  118A  	fcall	___wmul
  2628  0311  0871               	movf	?___wmul+1,w
  2629  0312  1283               	bcf	3,5	;RP0=0, select bank0
  2630  0313  1303               	bcf	3,6	;RP1=0, select bank0
  2631  0314  00CB               	movwf	_ints_isr$845+1
  2632  0315  0870               	movf	?___wmul,w
  2633  0316  00CA               	movwf	_ints_isr$845
  2634                           
  2635                           ;main.c: 310: upper = (valor + 1) * j * 10;
  2636  0317  084B               	movf	_ints_isr$845+1,w
  2637  0318  00F1               	movwf	___wmul@multiplier+1
  2638  0319  084A               	movf	_ints_isr$845,w
  2639  031A  00F0               	movwf	___wmul@multiplier
  2640  031B  300A               	movlw	10
  2641  031C  00F2               	movwf	___wmul@multiplicand
  2642  031D  3000               	movlw	0
  2643  031E  00F3               	movwf	___wmul@multiplicand+1
  2644  031F  120A  158A  22FD  120A  118A  	fcall	___wmul
  2645  0324  0871               	movf	?___wmul+1,w
  2646  0325  1283               	bcf	3,5	;RP0=0, select bank0
  2647  0326  1303               	bcf	3,6	;RP1=0, select bank0
  2648  0327  00C2               	movwf	ints_isr@upper+1
  2649  0328  0870               	movf	?___wmul,w
  2650  0329  00C1               	movwf	ints_isr@upper
  2651                           
  2652                           ;main.c: 311: lower = valor * j * 10;
  2653  032A  0869               	movf	_j,w
  2654  032B  00B4               	movwf	??_ints_isr
  2655  032C  01B5               	clrf	??_ints_isr+1
  2656  032D  0834               	movf	??_ints_isr,w
  2657  032E  00F0               	movwf	___wmul@multiplier
  2658  032F  0835               	movf	??_ints_isr+1,w
  2659  0330  00F1               	movwf	___wmul@multiplier+1
  2660  0331  0855               	movf	ints_isr@valor+1,w
  2661  0332  00F3               	movwf	___wmul@multiplicand+1
  2662  0333  0854               	movf	ints_isr@valor,w
  2663  0334  00F2               	movwf	___wmul@multiplicand
  2664  0335  120A  158A  22FD  120A  118A  	fcall	___wmul
  2665  033A  0871               	movf	?___wmul+1,w
  2666  033B  1283               	bcf	3,5	;RP0=0, select bank0
  2667  033C  1303               	bcf	3,6	;RP1=0, select bank0
  2668  033D  00CB               	movwf	_ints_isr$845+1
  2669  033E  0870               	movf	?___wmul,w
  2670  033F  00CA               	movwf	_ints_isr$845
  2671                           
  2672                           ;main.c: 311: lower = valor * j * 10;
  2673  0340  084B               	movf	_ints_isr$845+1,w
  2674  0341  00F1               	movwf	___wmul@multiplier+1
  2675  0342  084A               	movf	_ints_isr$845,w
  2676  0343  00F0               	movwf	___wmul@multiplier
  2677  0344  300A               	movlw	10
  2678  0345  00F2               	movwf	___wmul@multiplicand
  2679  0346  3000               	movlw	0
  2680  0347  00F3               	movwf	___wmul@multiplicand+1
  2681  0348  120A  158A  22FD  120A  118A  	fcall	___wmul
  2682  034D  0871               	movf	?___wmul+1,w
  2683  034E  1283               	bcf	3,5	;RP0=0, select bank0
  2684  034F  1303               	bcf	3,6	;RP1=0, select bank0
  2685  0350  00D7               	movwf	ints_isr@lower+1
  2686  0351  0870               	movf	?___wmul,w
  2687  0352  00D6               	movwf	ints_isr@lower
  2688                           
  2689                           ;main.c: 315: if ((upper - accuValor) < (accuValor - lower)) {
  2690  0353  0956               	comf	ints_isr@lower,w
  2691  0354  00B4               	movwf	??_ints_isr
  2692  0355  0957               	comf	ints_isr@lower+1,w
  2693  0356  00B5               	movwf	??_ints_isr+1
  2694  0357  0AB4               	incf	??_ints_isr,f
  2695  0358  1903               	skipnz
  2696  0359  0AB5               	incf	??_ints_isr+1,f
  2697  035A  085C               	movf	_accuValor,w
  2698  035B  0734               	addwf	??_ints_isr,w
  2699  035C  00B6               	movwf	??_ints_isr+2
  2700  035D  085D               	movf	_accuValor+1,w
  2701  035E  1803               	skipnc
  2702  035F  0A5D               	incf	_accuValor+1,w
  2703  0360  0735               	addwf	??_ints_isr+1,w
  2704  0361  00B7               	movwf	??_ints_isr+3
  2705  0362  095C               	comf	_accuValor,w
  2706  0363  00B8               	movwf	??_ints_isr+4
  2707  0364  095D               	comf	_accuValor+1,w
  2708  0365  00B9               	movwf	??_ints_isr+5
  2709  0366  0AB8               	incf	??_ints_isr+4,f
  2710  0367  1903               	skipnz
  2711  0368  0AB9               	incf	??_ints_isr+5,f
  2712  0369  0841               	movf	ints_isr@upper,w
  2713  036A  0738               	addwf	??_ints_isr+4,w
  2714  036B  00BA               	movwf	??_ints_isr+6
  2715  036C  0842               	movf	ints_isr@upper+1,w
  2716  036D  1803               	skipnc
  2717  036E  0A42               	incf	ints_isr@upper+1,w
  2718  036F  0739               	addwf	??_ints_isr+5,w
  2719  0370  00BB               	movwf	??_ints_isr+7
  2720  0371  0837               	movf	??_ints_isr+3,w
  2721  0372  023B               	subwf	??_ints_isr+7,w
  2722  0373  1D03               	skipz
  2723  0374  2B77               	goto	u234_25
  2724  0375  0836               	movf	??_ints_isr+2,w
  2725  0376  023A               	subwf	??_ints_isr+6,w
  2726  0377                     u234_25:	
  2727  0377  1803               	skipnc
  2728  0378  2B7F               	goto	i1l2311
  2729                           
  2730                           ;main.c: 316: valor++;
  2731  0379  3001               	movlw	1
  2732  037A  07D4               	addwf	ints_isr@valor,f
  2733  037B  1803               	skipnc
  2734  037C  0AD5               	incf	ints_isr@valor+1,f
  2735  037D  3000               	movlw	0
  2736  037E  07D5               	addwf	ints_isr@valor+1,f
  2737  037F                     i1l2311:	
  2738                           
  2739                           ;main.c: 317: }
  2740                           ;main.c: 319: printf("%03d\n", valor);
  2741  037F  0855               	movf	ints_isr@valor+1,w
  2742  0380  00A7               	movwf	?_printf+1
  2743  0381  0854               	movf	ints_isr@valor,w
  2744  0382  00A6               	movwf	?_printf
  2745  0383  300D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2746  0384  120A  158A  266A  120A  118A  	fcall	_printf
  2747                           
  2748                           ;main.c: 322: resC = 0;
  2749  0389  1283               	bcf	3,5	;RP0=0, select bank0
  2750  038A  1303               	bcf	3,6	;RP1=0, select bank0
  2751  038B  01E4               	clrf	_resC
  2752                           
  2753                           ;main.c: 323: resD = 0;
  2754  038C  01E3               	clrf	_resD
  2755                           
  2756                           ;main.c: 324: resU = 0;
  2757  038D  01E2               	clrf	_resU
  2758                           
  2759                           ;main.c: 325: timerReset = 0;
  2760  038E  01D8               	clrf	_timerReset
  2761  038F  01D9               	clrf	_timerReset+1
  2762                           
  2763                           ;main.c: 327: if (res) {
  2764  0390  086D               	movf	_res,w
  2765  0391  1903               	btfsc	3,2
  2766  0392  2C43               	goto	i1l211
  2767                           
  2768                           ;main.c: 328: res = 0;
  2769  0393  01ED               	clrf	_res
  2770                           
  2771                           ;main.c: 329: garron++;
  2772  0394  3001               	movlw	1
  2773  0395  07EB               	addwf	_garron,f
  2774  0396  1803               	skipnc
  2775  0397  0AEC               	incf	_garron+1,f
  2776  0398  3000               	movlw	0
  2777  0399  07EC               	addwf	_garron+1,f
  2778                           
  2779                           ;main.c: 330: if (valor >= swBot & valor <= swTop) {
  2780  039A  300C               	movlw	low (_swBot-__stringbase)
  2781  039B  0084               	movwf	4
  2782  039C  120A  158A  2000  120A  118A  	fcall	stringdir
  2783  03A1  00B4               	movwf	??_ints_isr
  2784  03A2  01B5               	clrf	??_ints_isr+1
  2785  03A3  0835               	movf	??_ints_isr+1,w
  2786  03A4  0255               	subwf	ints_isr@valor+1,w
  2787  03A5  1D03               	skipz
  2788  03A6  2BA9               	goto	u236_25
  2789  03A7  0834               	movf	??_ints_isr,w
  2790  03A8  0254               	subwf	ints_isr@valor,w
  2791  03A9                     u236_25:	
  2792  03A9  1C03               	skipc
  2793  03AA  2BC0               	goto	i1l212
  2794  03AB  300B               	movlw	low (_swTop-__stringbase)
  2795  03AC  0084               	movwf	4
  2796  03AD  120A  158A  2000  120A  118A  	fcall	stringdir
  2797  03B2  00B4               	movwf	??_ints_isr
  2798  03B3  01B5               	clrf	??_ints_isr+1
  2799  03B4  0855               	movf	ints_isr@valor+1,w
  2800  03B5  0235               	subwf	??_ints_isr+1,w
  2801  03B6  1D03               	skipz
  2802  03B7  2BBA               	goto	u237_25
  2803  03B8  0854               	movf	ints_isr@valor,w
  2804  03B9  0234               	subwf	??_ints_isr,w
  2805  03BA                     u237_25:	
  2806  03BA  1C03               	skipc
  2807  03BB  2BC0               	goto	i1l212
  2808                           
  2809                           ;main.c: 331: PORTCbits.RC0 = 0;
  2810  03BC  1007               	bcf	7,0	;volatile
  2811                           
  2812                           ;main.c: 332: PORTCbits.RC1 = 1;
  2813  03BD  1487               	bsf	7,1	;volatile
  2814                           
  2815                           ;main.c: 333: PORTCbits.RC2 = 0;
  2816  03BE  1107               	bcf	7,2	;volatile
  2817                           
  2818                           ;main.c: 334: } else {
  2819  03BF  2BC3               	goto	i1l2333
  2820  03C0                     i1l212:	
  2821                           
  2822                           ;main.c: 335: PORTCbits.RC0 = 0;
  2823  03C0  1007               	bcf	7,0	;volatile
  2824                           
  2825                           ;main.c: 336: PORTCbits.RC1 = 0;
  2826  03C1  1087               	bcf	7,1	;volatile
  2827                           
  2828                           ;main.c: 337: PORTCbits.RC2 = 1;
  2829  03C2  1507               	bsf	7,2	;volatile
  2830  03C3                     i1l2333:	
  2831                           
  2832                           ;main.c: 338: }
  2833                           ;main.c: 340: lower = valor;
  2834  03C3  0855               	movf	ints_isr@valor+1,w
  2835  03C4  00D7               	movwf	ints_isr@lower+1
  2836  03C5  0854               	movf	ints_isr@valor,w
  2837  03C6  00D6               	movwf	ints_isr@lower
  2838  03C7                     i1l2339:	
  2839                           ;main.c: 341: while (lower > 99) {
  2840                           
  2841  03C7  3000               	movlw	0
  2842  03C8  0257               	subwf	ints_isr@lower+1,w
  2843  03C9  3064               	movlw	100
  2844  03CA  1903               	skipnz
  2845  03CB  0256               	subwf	ints_isr@lower,w
  2846  03CC  1C03               	btfss	3,0
  2847  03CD  2BE3               	goto	i1l2345
  2848                           
  2849                           ;main.c: 342: garron_1c++;
  2850  03CE  3001               	movlw	1
  2851  03CF  00B4               	movwf	??_ints_isr
  2852  03D0  0834               	movf	??_ints_isr,w
  2853  03D1  07C4               	addwf	ints_isr@garron_1c,f
  2854                           
  2855                           ;main.c: 343: lower -= 100;
  2856  03D2  3064               	movlw	100
  2857  03D3  02D6               	subwf	ints_isr@lower,f
  2858  03D4  3000               	movlw	0
  2859  03D5  1C03               	skipc
  2860  03D6  03D7               	decf	ints_isr@lower+1,f
  2861  03D7  02D7               	subwf	ints_isr@lower+1,f
  2862  03D8  2BC7               	goto	i1l2339
  2863  03D9                     i1l2341:	
  2864                           ;main.c: 344: }
  2865                           ;main.c: 345: while (lower > 9) {
  2866                           
  2867                           
  2868                           ;main.c: 346: garron_1d++;
  2869  03D9  3001               	movlw	1
  2870  03DA  00B4               	movwf	??_ints_isr
  2871  03DB  0834               	movf	??_ints_isr,w
  2872  03DC  07C5               	addwf	ints_isr@garron_1d,f
  2873                           
  2874                           ;main.c: 347: lower -= 10;
  2875  03DD  300A               	movlw	10
  2876  03DE  02D6               	subwf	ints_isr@lower,f
  2877  03DF  3000               	movlw	0
  2878  03E0  1C03               	skipc
  2879  03E1  03D7               	decf	ints_isr@lower+1,f
  2880  03E2  02D7               	subwf	ints_isr@lower+1,f
  2881  03E3                     i1l2345:	
  2882  03E3  3000               	movlw	0
  2883  03E4  0257               	subwf	ints_isr@lower+1,w
  2884  03E5  300A               	movlw	10
  2885  03E6  1903               	skipnz
  2886  03E7  0256               	subwf	ints_isr@lower,w
  2887  03E8  1803               	skipnc
  2888  03E9  2BD9               	goto	i1l2341
  2889                           
  2890                           ;main.c: 348: }
  2891                           ;main.c: 349: garron_1u = lower;
  2892  03EA  0856               	movf	ints_isr@lower,w
  2893  03EB  00B4               	movwf	??_ints_isr
  2894  03EC  0834               	movf	??_ints_isr,w
  2895  03ED  00C6               	movwf	ints_isr@garron_1u
  2896                           
  2897                           ;main.c: 351: lower = (garron + 1) >> 1;
  2898  03EE  086B               	movf	_garron,w
  2899  03EF  3E01               	addlw	1
  2900  03F0  00B4               	movwf	??_ints_isr
  2901  03F1  086C               	movf	_garron+1,w
  2902  03F2  1803               	skipnc
  2903  03F3  3E01               	addlw	1
  2904  03F4  3E00               	addlw	0
  2905  03F5  00B5               	movwf	??_ints_isr+1
  2906  03F6  1003               	clrc
  2907  03F7  0CB5               	rrf	??_ints_isr+1,f
  2908  03F8  0CB4               	rrf	??_ints_isr,f
  2909  03F9  0834               	movf	??_ints_isr,w
  2910  03FA  00D6               	movwf	ints_isr@lower
  2911  03FB  0835               	movf	??_ints_isr+1,w
  2912  03FC  00D7               	movwf	ints_isr@lower+1
  2913  03FD                     i1l220:	
  2914                           ;main.c: 352: while (lower > 999) {
  2915                           
  2916  03FD  3003               	movlw	3
  2917  03FE  0257               	subwf	ints_isr@lower+1,w
  2918  03FF  30E8               	movlw	232
  2919  0400  1903               	skipnz
  2920  0401  0256               	subwf	ints_isr@lower,w
  2921  0402  1C03               	btfss	3,0
  2922  0403  2C15               	goto	i1l2357
  2923                           
  2924                           ;main.c: 353: lower -= 1000;
  2925  0404  30E8               	movlw	232
  2926  0405  02D6               	subwf	ints_isr@lower,f
  2927  0406  3003               	movlw	3
  2928  0407  1C03               	skipc
  2929  0408  03D7               	decf	ints_isr@lower+1,f
  2930  0409  02D7               	subwf	ints_isr@lower+1,f
  2931  040A  2BFD               	goto	i1l220
  2932  040B                     i1l2353:	
  2933                           ;main.c: 354: }
  2934                           ;main.c: 355: while (lower > 99) {
  2935                           
  2936                           
  2937                           ;main.c: 356: resC++;
  2938  040B  3001               	movlw	1
  2939  040C  00B4               	movwf	??_ints_isr
  2940  040D  0834               	movf	??_ints_isr,w
  2941  040E  07E4               	addwf	_resC,f
  2942                           
  2943                           ;main.c: 357: lower -= 100;
  2944  040F  3064               	movlw	100
  2945  0410  02D6               	subwf	ints_isr@lower,f
  2946  0411  3000               	movlw	0
  2947  0412  1C03               	skipc
  2948  0413  03D7               	decf	ints_isr@lower+1,f
  2949  0414  02D7               	subwf	ints_isr@lower+1,f
  2950  0415                     i1l2357:	
  2951  0415  3000               	movlw	0
  2952  0416  0257               	subwf	ints_isr@lower+1,w
  2953  0417  3064               	movlw	100
  2954  0418  1903               	skipnz
  2955  0419  0256               	subwf	ints_isr@lower,w
  2956  041A  1C03               	btfss	3,0
  2957  041B  2C27               	goto	i1l2363
  2958  041C  2C0B               	goto	i1l2353
  2959  041D                     i1l2359:	
  2960                           ;main.c: 358: }
  2961                           ;main.c: 359: while (lower > 9) {
  2962                           
  2963                           
  2964                           ;main.c: 360: resD++;
  2965  041D  3001               	movlw	1
  2966  041E  00B4               	movwf	??_ints_isr
  2967  041F  0834               	movf	??_ints_isr,w
  2968  0420  07E3               	addwf	_resD,f
  2969                           
  2970                           ;main.c: 361: lower -= 10;
  2971  0421  300A               	movlw	10
  2972  0422  02D6               	subwf	ints_isr@lower,f
  2973  0423  3000               	movlw	0
  2974  0424  1C03               	skipc
  2975  0425  03D7               	decf	ints_isr@lower+1,f
  2976  0426  02D7               	subwf	ints_isr@lower+1,f
  2977  0427                     i1l2363:	
  2978  0427  3000               	movlw	0
  2979  0428  0257               	subwf	ints_isr@lower+1,w
  2980  0429  300A               	movlw	10
  2981  042A  1903               	skipnz
  2982  042B  0256               	subwf	ints_isr@lower,w
  2983  042C  1803               	skipnc
  2984  042D  2C1D               	goto	i1l2359
  2985                           
  2986                           ;main.c: 362: }
  2987                           ;main.c: 363: resU = lower;
  2988  042E  0856               	movf	ints_isr@lower,w
  2989  042F  00B4               	movwf	??_ints_isr
  2990  0430  0834               	movf	??_ints_isr,w
  2991  0431  00E2               	movwf	_resU
  2992                           
  2993                           ;main.c: 365: outC = garron_1c & 0x0F;
  2994  0432  0844               	movf	ints_isr@garron_1c,w
  2995  0433  390F               	andlw	15
  2996  0434  00B4               	movwf	??_ints_isr
  2997  0435  0834               	movf	??_ints_isr,w
  2998  0436  00E7               	movwf	_outC
  2999                           
  3000                           ;main.c: 366: outD = garron_1d & 0x0F;
  3001  0437  0845               	movf	ints_isr@garron_1d,w
  3002  0438  390F               	andlw	15
  3003  0439  00B4               	movwf	??_ints_isr
  3004  043A  0834               	movf	??_ints_isr,w
  3005  043B  00E6               	movwf	_outD
  3006                           
  3007                           ;main.c: 367: outU = garron_1u & 0x0F;
  3008  043C  0846               	movf	ints_isr@garron_1u,w
  3009  043D  390F               	andlw	15
  3010  043E  00B4               	movwf	??_ints_isr
  3011  043F  0834               	movf	??_ints_isr,w
  3012  0440  00E5               	movwf	_outU
  3013                           
  3014                           ;main.c: 368: PORTAbits.RA6 = 0;
  3015  0441  1305               	bcf	5,6	;volatile
  3016                           
  3017                           ;main.c: 369: } else {
  3018  0442  2D1D               	goto	i1l2435
  3019  0443                     i1l211:	
  3020                           
  3021                           ;main.c: 370: res = 1;
  3022  0443  01ED               	clrf	_res
  3023  0444  0AED               	incf	_res,f
  3024                           
  3025                           ;main.c: 371: tempo = 0;
  3026  0445  01DA               	clrf	_tempo
  3027  0446  01DB               	clrf	_tempo+1
  3028                           
  3029                           ;main.c: 372: garron++;
  3030  0447  3001               	movlw	1
  3031  0448  07EB               	addwf	_garron,f
  3032  0449  1803               	skipnc
  3033  044A  0AEC               	incf	_garron+1,f
  3034  044B  3000               	movlw	0
  3035  044C  07EC               	addwf	_garron+1,f
  3036                           
  3037                           ;main.c: 373: if (PORTCbits.RC1) {
  3038  044D  1C87               	btfss	7,1	;volatile
  3039  044E  2C78               	goto	i1l2387
  3040                           
  3041                           ;main.c: 374: if (valor >= swBot & valor <= swTop) {
  3042  044F  300C               	movlw	low (_swBot-__stringbase)
  3043  0450  0084               	movwf	4
  3044  0451  120A  158A  2000  120A  118A  	fcall	stringdir
  3045  0456  00B4               	movwf	??_ints_isr
  3046  0457  01B5               	clrf	??_ints_isr+1
  3047  0458  0835               	movf	??_ints_isr+1,w
  3048  0459  0255               	subwf	ints_isr@valor+1,w
  3049  045A  1D03               	skipz
  3050  045B  2C5E               	goto	u244_25
  3051  045C  0834               	movf	??_ints_isr,w
  3052  045D  0254               	subwf	ints_isr@valor,w
  3053  045E                     u244_25:	
  3054  045E  1C03               	skipc
  3055  045F  2C75               	goto	i1l231
  3056  0460  300B               	movlw	low (_swTop-__stringbase)
  3057  0461  0084               	movwf	4
  3058  0462  120A  158A  2000  120A  118A  	fcall	stringdir
  3059  0467  00B4               	movwf	??_ints_isr
  3060  0468  01B5               	clrf	??_ints_isr+1
  3061  0469  0855               	movf	ints_isr@valor+1,w
  3062  046A  0235               	subwf	??_ints_isr+1,w
  3063  046B  1D03               	skipz
  3064  046C  2C6F               	goto	u245_25
  3065  046D  0854               	movf	ints_isr@valor,w
  3066  046E  0234               	subwf	??_ints_isr,w
  3067  046F                     u245_25:	
  3068  046F  1C03               	skipc
  3069  0470  2C75               	goto	i1l231
  3070                           
  3071                           ;main.c: 375: PORTCbits.RC0 = 1;
  3072  0471  1407               	bsf	7,0	;volatile
  3073                           
  3074                           ;main.c: 376: PORTCbits.RC1 = 0;
  3075  0472  1087               	bcf	7,1	;volatile
  3076                           
  3077                           ;main.c: 377: PORTCbits.RC2 = 0;
  3078  0473  1107               	bcf	7,2	;volatile
  3079                           
  3080                           ;main.c: 378: } else {
  3081  0474  2C78               	goto	i1l2387
  3082  0475                     i1l231:	
  3083                           
  3084                           ;main.c: 379: PORTCbits.RC0 = 0;
  3085  0475  1007               	bcf	7,0	;volatile
  3086                           
  3087                           ;main.c: 380: PORTCbits.RC1 = 0;
  3088  0476  1087               	bcf	7,1	;volatile
  3089                           
  3090                           ;main.c: 381: PORTCbits.RC2 = 1;
  3091  0477  1507               	bsf	7,2	;volatile
  3092  0478                     i1l2387:	
  3093                           
  3094                           ;main.c: 382: }
  3095                           ;main.c: 383: }
  3096                           ;main.c: 384: lower = valor;
  3097  0478  0855               	movf	ints_isr@valor+1,w
  3098  0479  00D7               	movwf	ints_isr@lower+1
  3099  047A  0854               	movf	ints_isr@valor,w
  3100  047B  00D6               	movwf	ints_isr@lower
  3101  047C                     i1l2393:	
  3102                           ;main.c: 385: while (lower > 99) {
  3103                           
  3104  047C  3000               	movlw	0
  3105  047D  0257               	subwf	ints_isr@lower+1,w
  3106  047E  3064               	movlw	100
  3107  047F  1903               	skipnz
  3108  0480  0256               	subwf	ints_isr@lower,w
  3109  0481  1C03               	btfss	3,0
  3110  0482  2C98               	goto	i1l2399
  3111                           
  3112                           ;main.c: 386: garron_2c++;
  3113  0483  3001               	movlw	1
  3114  0484  00B4               	movwf	??_ints_isr
  3115  0485  0834               	movf	??_ints_isr,w
  3116  0486  07C7               	addwf	ints_isr@garron_2c,f
  3117                           
  3118                           ;main.c: 387: lower -= 100;
  3119  0487  3064               	movlw	100
  3120  0488  02D6               	subwf	ints_isr@lower,f
  3121  0489  3000               	movlw	0
  3122  048A  1C03               	skipc
  3123  048B  03D7               	decf	ints_isr@lower+1,f
  3124  048C  02D7               	subwf	ints_isr@lower+1,f
  3125  048D  2C7C               	goto	i1l2393
  3126  048E                     i1l2395:	
  3127                           ;main.c: 388: }
  3128                           ;main.c: 389: while (lower > 9) {
  3129                           
  3130                           
  3131                           ;main.c: 390: garron_2d++;
  3132  048E  3001               	movlw	1
  3133  048F  00B4               	movwf	??_ints_isr
  3134  0490  0834               	movf	??_ints_isr,w
  3135  0491  07C8               	addwf	ints_isr@garron_2d,f
  3136                           
  3137                           ;main.c: 391: lower -= 10;
  3138  0492  300A               	movlw	10
  3139  0493  02D6               	subwf	ints_isr@lower,f
  3140  0494  3000               	movlw	0
  3141  0495  1C03               	skipc
  3142  0496  03D7               	decf	ints_isr@lower+1,f
  3143  0497  02D7               	subwf	ints_isr@lower+1,f
  3144  0498                     i1l2399:	
  3145  0498  3000               	movlw	0
  3146  0499  0257               	subwf	ints_isr@lower+1,w
  3147  049A  300A               	movlw	10
  3148  049B  1903               	skipnz
  3149  049C  0256               	subwf	ints_isr@lower,w
  3150  049D  1803               	skipnc
  3151  049E  2C8E               	goto	i1l2395
  3152                           
  3153                           ;main.c: 392: }
  3154                           ;main.c: 393: garron_2u = lower;
  3155  049F  0856               	movf	ints_isr@lower,w
  3156  04A0  00B4               	movwf	??_ints_isr
  3157  04A1  0834               	movf	??_ints_isr,w
  3158  04A2  00C9               	movwf	ints_isr@garron_2u
  3159                           
  3160                           ;main.c: 395: outC = outC & 0x0F;
  3161  04A3  0867               	movf	_outC,w
  3162  04A4  390F               	andlw	15
  3163  04A5  00B4               	movwf	??_ints_isr
  3164  04A6  0834               	movf	??_ints_isr,w
  3165  04A7  00E7               	movwf	_outC
  3166                           
  3167                           ;main.c: 396: outD = outD & 0x0F;
  3168  04A8  0866               	movf	_outD,w
  3169  04A9  390F               	andlw	15
  3170  04AA  00B4               	movwf	??_ints_isr
  3171  04AB  0834               	movf	??_ints_isr,w
  3172  04AC  00E6               	movwf	_outD
  3173                           
  3174                           ;main.c: 397: outU = outU & 0x0F;
  3175  04AD  0865               	movf	_outU,w
  3176  04AE  390F               	andlw	15
  3177  04AF  00B4               	movwf	??_ints_isr
  3178  04B0  0834               	movf	??_ints_isr,w
  3179  04B1  00E5               	movwf	_outU
  3180                           
  3181                           ;main.c: 399: outC += (garron_2c << 4) & 0xF0;
  3182  04B2  0847               	movf	ints_isr@garron_2c,w
  3183  04B3  00B4               	movwf	??_ints_isr
  3184  04B4  3003               	movlw	3
  3185  04B5                     u248_25:	
  3186  04B5  1003               	clrc
  3187  04B6  0DB4               	rlf	??_ints_isr,f
  3188  04B7  3EFF               	addlw	-1
  3189  04B8  1D03               	skipz
  3190  04B9  2CB5               	goto	u248_25
  3191  04BA  1003               	clrc
  3192  04BB  0D34               	rlf	??_ints_isr,w
  3193  04BC  39F0               	andlw	240
  3194  04BD  00B5               	movwf	??_ints_isr+1
  3195  04BE  0835               	movf	??_ints_isr+1,w
  3196  04BF  07E7               	addwf	_outC,f
  3197                           
  3198                           ;main.c: 400: outD += (garron_2d << 4) & 0xF0;
  3199  04C0  0848               	movf	ints_isr@garron_2d,w
  3200  04C1  00B4               	movwf	??_ints_isr
  3201  04C2  3003               	movlw	3
  3202  04C3                     u249_25:	
  3203  04C3  1003               	clrc
  3204  04C4  0DB4               	rlf	??_ints_isr,f
  3205  04C5  3EFF               	addlw	-1
  3206  04C6  1D03               	skipz
  3207  04C7  2CC3               	goto	u249_25
  3208  04C8  1003               	clrc
  3209  04C9  0D34               	rlf	??_ints_isr,w
  3210  04CA  39F0               	andlw	240
  3211  04CB  00B5               	movwf	??_ints_isr+1
  3212  04CC  0835               	movf	??_ints_isr+1,w
  3213  04CD  07E6               	addwf	_outD,f
  3214                           
  3215                           ;main.c: 401: outU += (garron_2u << 4) & 0xF0;
  3216  04CE  0849               	movf	ints_isr@garron_2u,w
  3217  04CF  00B4               	movwf	??_ints_isr
  3218  04D0  3003               	movlw	3
  3219  04D1                     u250_25:	
  3220  04D1  1003               	clrc
  3221  04D2  0DB4               	rlf	??_ints_isr,f
  3222  04D3  3EFF               	addlw	-1
  3223  04D4  1D03               	skipz
  3224  04D5  2CD1               	goto	u250_25
  3225  04D6  1003               	clrc
  3226  04D7  0D34               	rlf	??_ints_isr,w
  3227  04D8  39F0               	andlw	240
  3228  04D9  00B5               	movwf	??_ints_isr+1
  3229  04DA  0835               	movf	??_ints_isr+1,w
  3230  04DB  07E5               	addwf	_outU,f
  3231                           
  3232                           ;main.c: 403: lower = garron >> 1;
  3233  04DC  086C               	movf	_garron+1,w
  3234  04DD  00B5               	movwf	??_ints_isr+1
  3235  04DE  086B               	movf	_garron,w
  3236  04DF  00B4               	movwf	??_ints_isr
  3237  04E0  1003               	clrc
  3238  04E1  0CB5               	rrf	??_ints_isr+1,f
  3239  04E2  0CB4               	rrf	??_ints_isr,f
  3240  04E3  0834               	movf	??_ints_isr,w
  3241  04E4  00D6               	movwf	ints_isr@lower
  3242  04E5  0835               	movf	??_ints_isr+1,w
  3243  04E6  00D7               	movwf	ints_isr@lower+1
  3244  04E7                     i1l239:	
  3245                           ;main.c: 404: while (lower > 999) {
  3246                           
  3247  04E7  3003               	movlw	3
  3248  04E8  0257               	subwf	ints_isr@lower+1,w
  3249  04E9  30E8               	movlw	232
  3250  04EA  1903               	skipnz
  3251  04EB  0256               	subwf	ints_isr@lower,w
  3252  04EC  1C03               	btfss	3,0
  3253  04ED  2CFF               	goto	i1l2423
  3254                           
  3255                           ;main.c: 405: lower -= 1000;
  3256  04EE  30E8               	movlw	232
  3257  04EF  02D6               	subwf	ints_isr@lower,f
  3258  04F0  3003               	movlw	3
  3259  04F1  1C03               	skipc
  3260  04F2  03D7               	decf	ints_isr@lower+1,f
  3261  04F3  02D7               	subwf	ints_isr@lower+1,f
  3262  04F4  2CE7               	goto	i1l239
  3263  04F5                     i1l2419:	
  3264                           ;main.c: 406: }
  3265                           ;main.c: 407: while (lower > 99) {
  3266                           
  3267                           
  3268                           ;main.c: 408: resC++;
  3269  04F5  3001               	movlw	1
  3270  04F6  00B4               	movwf	??_ints_isr
  3271  04F7  0834               	movf	??_ints_isr,w
  3272  04F8  07E4               	addwf	_resC,f
  3273                           
  3274                           ;main.c: 409: lower -= 100;
  3275  04F9  3064               	movlw	100
  3276  04FA  02D6               	subwf	ints_isr@lower,f
  3277  04FB  3000               	movlw	0
  3278  04FC  1C03               	skipc
  3279  04FD  03D7               	decf	ints_isr@lower+1,f
  3280  04FE  02D7               	subwf	ints_isr@lower+1,f
  3281  04FF                     i1l2423:	
  3282  04FF  3000               	movlw	0
  3283  0500  0257               	subwf	ints_isr@lower+1,w
  3284  0501  3064               	movlw	100
  3285  0502  1903               	skipnz
  3286  0503  0256               	subwf	ints_isr@lower,w
  3287  0504  1C03               	btfss	3,0
  3288  0505  2D11               	goto	i1l2429
  3289  0506  2CF5               	goto	i1l2419
  3290  0507                     i1l2425:	
  3291                           ;main.c: 410: }
  3292                           ;main.c: 411: while (lower > 9) {
  3293                           
  3294                           
  3295                           ;main.c: 412: resD++;
  3296  0507  3001               	movlw	1
  3297  0508  00B4               	movwf	??_ints_isr
  3298  0509  0834               	movf	??_ints_isr,w
  3299  050A  07E3               	addwf	_resD,f
  3300                           
  3301                           ;main.c: 413: lower -= 10;
  3302  050B  300A               	movlw	10
  3303  050C  02D6               	subwf	ints_isr@lower,f
  3304  050D  3000               	movlw	0
  3305  050E  1C03               	skipc
  3306  050F  03D7               	decf	ints_isr@lower+1,f
  3307  0510  02D7               	subwf	ints_isr@lower+1,f
  3308  0511                     i1l2429:	
  3309  0511  3000               	movlw	0
  3310  0512  0257               	subwf	ints_isr@lower+1,w
  3311  0513  300A               	movlw	10
  3312  0514  1903               	skipnz
  3313  0515  0256               	subwf	ints_isr@lower,w
  3314  0516  1803               	skipnc
  3315  0517  2D07               	goto	i1l2425
  3316                           
  3317                           ;main.c: 414: }
  3318                           ;main.c: 415: resU = lower;
  3319  0518  0856               	movf	ints_isr@lower,w
  3320  0519  00B4               	movwf	??_ints_isr
  3321  051A  0834               	movf	??_ints_isr,w
  3322  051B  00E2               	movwf	_resU
  3323                           
  3324                           ;main.c: 417: PORTAbits.RA6 = 1;
  3325  051C  1705               	bsf	5,6	;volatile
  3326  051D                     i1l2435:	
  3327                           ;main.c: 418: }
  3328                           ;main.c: 420: do {
  3329                           
  3330                           
  3331                           ;main.c: 421: aux = cattle_nr(1, garron);
  3332  051D  086C               	movf	_garron+1,w
  3333  051E  00F4               	movwf	i1cattle_nr@cattle+1
  3334  051F  086B               	movf	_garron,w
  3335  0520  00F3               	movwf	i1cattle_nr@cattle
  3336  0521  3001               	movlw	1
  3337  0522  120A  158A  240C  120A  118A  	fcall	i1_cattle_nr
  3338  0527  0873               	movf	?i1_cattle_nr,w
  3339  0528  1283               	bcf	3,5	;RP0=0, select bank0
  3340  0529  1303               	bcf	3,6	;RP1=0, select bank0
  3341  052A  00B4               	movwf	??_ints_isr
  3342  052B  0834               	movf	??_ints_isr,w
  3343  052C  00CE               	movwf	ints_isr@aux
  3344                           
  3345                           ;main.c: 422: } while (aux != 0x10);
  3346  052D  3010               	movlw	16
  3347  052E  064E               	xorwf	ints_isr@aux,w
  3348  052F  1D03               	btfss	3,2
  3349  0530  2D1D               	goto	i1l2435
  3350                           
  3351                           ;main.c: 424: accuValor = 0;
  3352  0531  01DC               	clrf	_accuValor
  3353  0532  01DD               	clrf	_accuValor+1
  3354                           
  3355                           ;main.c: 425: j = 0;
  3356  0533  01E9               	clrf	_j
  3357                           
  3358                           ;main.c: 426: }
  3359                           ;main.c: 427: }
  3360                           ;main.c: 428: }
  3361                           ;main.c: 429: } else {
  3362  0534  2D48               	goto	i1l2447
  3363  0535                     i1l2441:	
  3364                           
  3365                           ;main.c: 430: drop = RCREG;
  3366  0535  081A               	movf	26,w	;volatile
  3367  0536  00B4               	movwf	??_ints_isr
  3368  0537  0834               	movf	??_ints_isr,w
  3369  0538  00C0               	movwf	ints_isr@drop
  3370                           
  3371                           ;main.c: 431: drop = RCREG;
  3372  0539  081A               	movf	26,w	;volatile
  3373  053A  00B4               	movwf	??_ints_isr
  3374  053B  0834               	movf	??_ints_isr,w
  3375  053C  00C0               	movwf	ints_isr@drop
  3376                           
  3377                           ;main.c: 432: RCSTAbits.CREN = 0;
  3378  053D  1218               	bcf	24,4	;volatile
  3379                           
  3380                           ;main.c: 433: _delay((unsigned long)((100)*(8000000/4000000.0)));
  3381  053E  3041               	movlw	65
  3382  053F  1283               	bcf	3,5	;RP0=0, select bank0
  3383  0540  1303               	bcf	3,6	;RP1=0, select bank0
  3384  0541  00B4               	movwf	??_ints_isr
  3385  0542                     u309_27:	
  3386  0542  0BB4               	decfsz	??_ints_isr,f
  3387  0543  2D42               	goto	u309_27
  3388  0544  2D45               	nop2
  3389                           
  3390                           ;main.c: 434: RCSTAbits.CREN = 1;
  3391  0545  1283               	bcf	3,5	;RP0=0, select bank0
  3392  0546  1303               	bcf	3,6	;RP1=0, select bank0
  3393  0547  1618               	bsf	24,4	;volatile
  3394  0548                     i1l2447:	
  3395                           
  3396                           ;main.c: 435: }
  3397                           ;main.c: 436: }
  3398                           ;main.c: 438: if (PIR1bits.TMR2IF) {
  3399  0548  1C8C               	btfss	12,1	;volatile
  3400  0549  2FA9               	goto	i1l305
  3401                           
  3402                           ;main.c: 439: unsigned int lower = 0, aux = 0;
  3403  054A  01D2               	clrf	ints_isr@lower_404
  3404  054B  01D3               	clrf	ints_isr@lower_404+1
  3405  054C  01CF               	clrf	ints_isr@aux_405
  3406  054D  01D0               	clrf	ints_isr@aux_405+1
  3407                           
  3408                           ;main.c: 442: PIR1bits.TMR2IF = 0;
  3409  054E  108C               	bcf	12,1	;volatile
  3410                           
  3411                           ;main.c: 444: digit++;
  3412  054F  3001               	movlw	1
  3413  0550  00B4               	movwf	??_ints_isr
  3414  0551  0834               	movf	??_ints_isr,w
  3415  0552  07E1               	addwf	_digit,f
  3416                           
  3417                           ;main.c: 445: if (digit > 3) {
  3418  0553  3004               	movlw	4
  3419  0554  0261               	subwf	_digit,w
  3420  0555  1C03               	skipc
  3421  0556  2D59               	goto	i1l2459
  3422                           
  3423                           ;main.c: 446: digit = 1;
  3424  0557  01E1               	clrf	_digit
  3425  0558  0AE1               	incf	_digit,f
  3426  0559                     i1l2459:	
  3427                           
  3428                           ;main.c: 447: }
  3429                           ;main.c: 449: tick++;
  3430  0559  3001               	movlw	1
  3431  055A  00B4               	movwf	??_ints_isr
  3432  055B  0834               	movf	??_ints_isr,w
  3433  055C  07DE               	addwf	_tick,f
  3434                           
  3435                           ;main.c: 450: if (tick > 199) {
  3436  055D  30C8               	movlw	200
  3437  055E  025E               	subwf	_tick,w
  3438  055F  1C03               	skipc
  3439  0560  2DA4               	goto	i1l2489
  3440                           
  3441                           ;main.c: 451: tick = 0;
  3442  0561  01DE               	clrf	_tick
  3443                           
  3444                           ;main.c: 452: timerReset++;
  3445  0562  3001               	movlw	1
  3446  0563  07D8               	addwf	_timerReset,f
  3447  0564  1803               	skipnc
  3448  0565  0AD9               	incf	_timerReset+1,f
  3449  0566  3000               	movlw	0
  3450  0567  07D9               	addwf	_timerReset+1,f
  3451                           
  3452                           ;main.c: 453: if (timerReset > 7199 & timerReset < 7300) {
  3453  0568  301C               	movlw	28
  3454  0569  0259               	subwf	_timerReset+1,w
  3455  056A  3020               	movlw	32
  3456  056B  1903               	skipnz
  3457  056C  0258               	subwf	_timerReset,w
  3458  056D  1C03               	skipc
  3459  056E  2DA4               	goto	i1l2489
  3460  056F  301C               	movlw	28
  3461  0570  0259               	subwf	_timerReset+1,w
  3462  0571  3084               	movlw	132
  3463  0572  1903               	skipnz
  3464  0573  0258               	subwf	_timerReset,w
  3465  0574  1803               	skipnc
  3466  0575  2DA4               	goto	i1l2489
  3467                           
  3468                           ;main.c: 454: timerReset = 7301;
  3469  0576  3085               	movlw	133
  3470  0577  00D8               	movwf	_timerReset
  3471  0578  301C               	movlw	28
  3472  0579  00D9               	movwf	_timerReset+1
  3473                           
  3474                           ;main.c: 455: garron = 0;
  3475  057A  01EB               	clrf	_garron
  3476  057B  01EC               	clrf	_garron+1
  3477  057C                     i1l2475:	
  3478                           ;main.c: 456: do {
  3479                           
  3480                           
  3481                           ;main.c: 457: aux = cattle_nr(1, garron);
  3482  057C  086C               	movf	_garron+1,w
  3483  057D  00F4               	movwf	i1cattle_nr@cattle+1
  3484  057E  086B               	movf	_garron,w
  3485  057F  00F3               	movwf	i1cattle_nr@cattle
  3486  0580  3001               	movlw	1
  3487  0581  120A  158A  240C  120A  118A  	fcall	i1_cattle_nr
  3488  0586  0874               	movf	?i1_cattle_nr+1,w
  3489  0587  1283               	bcf	3,5	;RP0=0, select bank0
  3490  0588  1303               	bcf	3,6	;RP1=0, select bank0
  3491  0589  00D0               	movwf	ints_isr@aux_405+1
  3492  058A  0873               	movf	?i1_cattle_nr,w
  3493  058B  00CF               	movwf	ints_isr@aux_405
  3494                           
  3495                           ;main.c: 458: } while (aux != 0x10);
  3496  058C  3010               	movlw	16
  3497  058D  064F               	xorwf	ints_isr@aux_405,w
  3498  058E  0450               	iorwf	ints_isr@aux_405+1,w
  3499  058F  1D03               	btfss	3,2
  3500  0590  2D7C               	goto	i1l2475
  3501                           
  3502                           ;main.c: 459: res = 1;
  3503  0591  01ED               	clrf	_res
  3504  0592  0AED               	incf	_res,f
  3505                           
  3506                           ;main.c: 460: resC = 0;
  3507  0593  01E4               	clrf	_resC
  3508                           
  3509                           ;main.c: 461: resD = 0;
  3510  0594  01E3               	clrf	_resD
  3511                           
  3512                           ;main.c: 462: resU = 0;
  3513  0595  01E2               	clrf	_resU
  3514                           
  3515                           ;main.c: 463: outC = 0xF0;
  3516  0596  30F0               	movlw	240
  3517  0597  00B4               	movwf	??_ints_isr
  3518  0598  0834               	movf	??_ints_isr,w
  3519  0599  00E7               	movwf	_outC
  3520                           
  3521                           ;main.c: 464: outD = 0xF0;
  3522  059A  30F0               	movlw	240
  3523  059B  00B4               	movwf	??_ints_isr
  3524  059C  0834               	movf	??_ints_isr,w
  3525  059D  00E6               	movwf	_outD
  3526                           
  3527                           ;main.c: 465: outU = 0xF0;
  3528  059E  30F0               	movlw	240
  3529  059F  00B4               	movwf	??_ints_isr
  3530  05A0  0834               	movf	??_ints_isr,w
  3531  05A1  00E5               	movwf	_outU
  3532                           
  3533                           ;main.c: 466: tempo = 0;
  3534  05A2  01DA               	clrf	_tempo
  3535  05A3  01DB               	clrf	_tempo+1
  3536  05A4                     i1l2489:	
  3537                           
  3538                           ;main.c: 467: }
  3539                           ;main.c: 468: }
  3540                           ;main.c: 470: if (res & tempo < 1200) {
  3541  05A4  3004               	movlw	4
  3542  05A5  025B               	subwf	_tempo+1,w
  3543  05A6  30B0               	movlw	176
  3544  05A7  1903               	skipnz
  3545  05A8  025A               	subwf	_tempo,w
  3546  05A9  1803               	btfsc	3,0
  3547  05AA  2DAD               	goto	u261_20
  3548  05AB  3001               	movlw	1
  3549  05AC  2DAE               	goto	u262_20
  3550  05AD                     u261_20:	
  3551  05AD  3000               	movlw	0
  3552  05AE                     u262_20:	
  3553  05AE  056D               	andwf	_res,w
  3554  05AF  1903               	btfsc	3,2
  3555  05B0  2DB7               	goto	i1l257
  3556                           
  3557                           ;main.c: 471: tempo++;
  3558  05B1  3001               	movlw	1
  3559  05B2  07DA               	addwf	_tempo,f
  3560  05B3  1803               	skipnc
  3561  05B4  0ADB               	incf	_tempo+1,f
  3562  05B5  3000               	movlw	0
  3563  05B6  07DB               	addwf	_tempo+1,f
  3564  05B7                     i1l257:	
  3565                           
  3566                           ;main.c: 472: }
  3567                           ;main.c: 473: if (tempo > 1199) {
  3568  05B7  3004               	movlw	4
  3569  05B8  025B               	subwf	_tempo+1,w
  3570  05B9  30B0               	movlw	176
  3571  05BA  1903               	skipnz
  3572  05BB  025A               	subwf	_tempo,w
  3573  05BC  1C03               	skipc
  3574  05BD  2DCF               	goto	i1l2507
  3575                           
  3576                           ;main.c: 474: tempo = 0;
  3577  05BE  01DA               	clrf	_tempo
  3578  05BF  01DB               	clrf	_tempo+1
  3579                           
  3580                           ;main.c: 475: outC = 0xFF;
  3581  05C0  30FF               	movlw	255
  3582  05C1  00B4               	movwf	??_ints_isr
  3583  05C2  0834               	movf	??_ints_isr,w
  3584  05C3  00E7               	movwf	_outC
  3585                           
  3586                           ;main.c: 476: outD = 0xFF;
  3587  05C4  30FF               	movlw	255
  3588  05C5  00B4               	movwf	??_ints_isr
  3589  05C6  0834               	movf	??_ints_isr,w
  3590  05C7  00E6               	movwf	_outD
  3591                           
  3592                           ;main.c: 477: outU = 0xFF;
  3593  05C8  30FF               	movlw	255
  3594  05C9  00B4               	movwf	??_ints_isr
  3595  05CA  0834               	movf	??_ints_isr,w
  3596  05CB  00E5               	movwf	_outU
  3597                           
  3598                           ;main.c: 478: PORTCbits.RC0 = 0;
  3599  05CC  1007               	bcf	7,0	;volatile
  3600                           
  3601                           ;main.c: 479: PORTCbits.RC1 = 0;
  3602  05CD  1087               	bcf	7,1	;volatile
  3603                           
  3604                           ;main.c: 480: PORTCbits.RC2 = 0;
  3605  05CE  1107               	bcf	7,2	;volatile
  3606  05CF                     i1l2507:	
  3607                           
  3608                           ;main.c: 481: }
  3609                           ;main.c: 482: display();
  3610  05CF  120A  118A  27B4  120A  118A  	fcall	_display
  3611                           
  3612                           ;main.c: 483: if (!PORTAbits.RA4) {
  3613  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  3614  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  3615  05D6  1A05               	btfsc	5,4	;volatile
  3616  05D7  2DE5               	goto	i1l259
  3617                           
  3618                           ;main.c: 484: if (btnUpT < 255) {
  3619  05D8  0A60               	incf	_btnUpT,w
  3620  05D9  1903               	btfsc	3,2
  3621  05DA  2DDF               	goto	i1l2515
  3622                           
  3623                           ;main.c: 485: btnUpT++;
  3624  05DB  3001               	movlw	1
  3625  05DC  00B4               	movwf	??_ints_isr
  3626  05DD  0834               	movf	??_ints_isr,w
  3627  05DE  07E0               	addwf	_btnUpT,f
  3628  05DF                     i1l2515:	
  3629                           
  3630                           ;main.c: 486: }
  3631                           ;main.c: 487: if (btnUpT > 25) {
  3632  05DF  301A               	movlw	26
  3633  05E0  0260               	subwf	_btnUpT,w
  3634  05E1  1C03               	skipc
  3635  05E2  2ECC               	goto	i1l2583
  3636                           
  3637                           ;main.c: 488: btnUp = 1;
  3638  05E3  15EA               	bsf	_btnUp/(0+8),_btnUp& (0+7)
  3639                           
  3640                           ;main.c: 489: }
  3641                           ;main.c: 490: } else if (btnUp && !PIR1bits.RCIF) {
  3642  05E4  2ECC               	goto	i1l2583
  3643  05E5                     i1l259:	
  3644  05E5  19EA               	btfsc	_btnUp/(0+8),_btnUp& (0+7)
  3645  05E6  1A8C               	btfsc	12,5	;volatile
  3646  05E7  2ECB               	goto	i1l2581
  3647                           
  3648                           ;main.c: 491: tempo = 0;
  3649  05E8  01DA               	clrf	_tempo
  3650  05E9  01DB               	clrf	_tempo+1
  3651                           
  3652                           ;main.c: 492: btnUpT = 0;
  3653  05EA  01E0               	clrf	_btnUpT
  3654                           
  3655                           ;main.c: 493: if (res) {
  3656  05EB  086D               	movf	_res,w
  3657  05EC  1903               	btfsc	3,2
  3658  05ED  2E14               	goto	i1l264
  3659                           
  3660                           ;main.c: 494: res = 0;
  3661  05EE  01ED               	clrf	_res
  3662                           
  3663                           ;main.c: 495: outC = (outC >> 4) & 0x0F;
  3664  05EF  0867               	movf	_outC,w
  3665  05F0  00B4               	movwf	??_ints_isr
  3666  05F1  3004               	movlw	4
  3667  05F2                     u271_25:	
  3668  05F2  1003               	clrc
  3669  05F3  0CB4               	rrf	??_ints_isr,f
  3670  05F4  3EFF               	addlw	-1
  3671  05F5  1D03               	skipz
  3672  05F6  2DF2               	goto	u271_25
  3673  05F7  0834               	movf	??_ints_isr,w
  3674  05F8  390F               	andlw	15
  3675  05F9  00B5               	movwf	??_ints_isr+1
  3676  05FA  0835               	movf	??_ints_isr+1,w
  3677  05FB  00E7               	movwf	_outC
  3678                           
  3679                           ;main.c: 496: outD = (outD >> 4) & 0x0F;
  3680  05FC  0866               	movf	_outD,w
  3681  05FD  00B4               	movwf	??_ints_isr
  3682  05FE  3004               	movlw	4
  3683  05FF                     u272_25:	
  3684  05FF  1003               	clrc
  3685  0600  0CB4               	rrf	??_ints_isr,f
  3686  0601  3EFF               	addlw	-1
  3687  0602  1D03               	skipz
  3688  0603  2DFF               	goto	u272_25
  3689  0604  0834               	movf	??_ints_isr,w
  3690  0605  390F               	andlw	15
  3691  0606  00B5               	movwf	??_ints_isr+1
  3692  0607  0835               	movf	??_ints_isr+1,w
  3693  0608  00E6               	movwf	_outD
  3694                           
  3695                           ;main.c: 497: outU = (outU >> 4) & 0x0F;
  3696  0609  0865               	movf	_outU,w
  3697  060A  00B4               	movwf	??_ints_isr
  3698  060B  3004               	movlw	4
  3699  060C                     u273_25:	
  3700  060C  1003               	clrc
  3701  060D  0CB4               	rrf	??_ints_isr,f
  3702  060E  3EFF               	addlw	-1
  3703  060F  1D03               	skipz
  3704  0610  2E0C               	goto	u273_25
  3705  0611  0834               	movf	??_ints_isr,w
  3706  0612  390F               	andlw	15
  3707  0613  2E3E               	goto	L2
  3708  0614                     i1l264:	
  3709                           ;main.c: 498: } else {
  3710                           
  3711                           
  3712                           ;main.c: 499: res = 1;
  3713  0614  01ED               	clrf	_res
  3714  0615  0AED               	incf	_res,f
  3715                           
  3716                           ;main.c: 500: PORTAbits.RA6 = 1;
  3717  0616  1705               	bsf	5,6	;volatile
  3718                           
  3719                           ;main.c: 501: outC = (outC << 4) & 0xF0;
  3720  0617  0867               	movf	_outC,w
  3721  0618  00B4               	movwf	??_ints_isr
  3722  0619  3003               	movlw	3
  3723  061A                     u274_25:	
  3724  061A  1003               	clrc
  3725  061B  0DB4               	rlf	??_ints_isr,f
  3726  061C  3EFF               	addlw	-1
  3727  061D  1D03               	skipz
  3728  061E  2E1A               	goto	u274_25
  3729  061F  1003               	clrc
  3730  0620  0D34               	rlf	??_ints_isr,w
  3731  0621  39F0               	andlw	240
  3732  0622  00B5               	movwf	??_ints_isr+1
  3733  0623  0835               	movf	??_ints_isr+1,w
  3734  0624  00E7               	movwf	_outC
  3735                           
  3736                           ;main.c: 502: outD = (outD << 4) & 0xF0;
  3737  0625  0866               	movf	_outD,w
  3738  0626  00B4               	movwf	??_ints_isr
  3739  0627  3003               	movlw	3
  3740  0628                     u275_25:	
  3741  0628  1003               	clrc
  3742  0629  0DB4               	rlf	??_ints_isr,f
  3743  062A  3EFF               	addlw	-1
  3744  062B  1D03               	skipz
  3745  062C  2E28               	goto	u275_25
  3746  062D  1003               	clrc
  3747  062E  0D34               	rlf	??_ints_isr,w
  3748  062F  39F0               	andlw	240
  3749  0630  00B5               	movwf	??_ints_isr+1
  3750  0631  0835               	movf	??_ints_isr+1,w
  3751  0632  00E6               	movwf	_outD
  3752                           
  3753                           ;main.c: 503: outU = (outU << 4) & 0xF0;
  3754  0633  0865               	movf	_outU,w
  3755  0634  00B4               	movwf	??_ints_isr
  3756  0635  3003               	movlw	3
  3757  0636                     u276_25:	
  3758  0636  1003               	clrc
  3759  0637  0DB4               	rlf	??_ints_isr,f
  3760  0638  3EFF               	addlw	-1
  3761  0639  1D03               	skipz
  3762  063A  2E36               	goto	u276_25
  3763  063B  1003               	clrc
  3764  063C  0D34               	rlf	??_ints_isr,w
  3765  063D  39F0               	andlw	240
  3766  063E                     L2:	
  3767  063E  00B5               	movwf	??_ints_isr+1
  3768  063F  0835               	movf	??_ints_isr+1,w
  3769  0640  00E5               	movwf	_outU
  3770                           
  3771                           ;main.c: 504: }
  3772                           ;main.c: 506: btnUp = 0;
  3773  0641  11EA               	bcf	_btnUp/(0+8),_btnUp& (0+7)
  3774                           
  3775                           ;main.c: 507: garron++;
  3776  0642  3001               	movlw	1
  3777  0643  07EB               	addwf	_garron,f
  3778  0644  1803               	skipnc
  3779  0645  0AEC               	incf	_garron+1,f
  3780  0646  3000               	movlw	0
  3781  0647  07EC               	addwf	_garron+1,f
  3782  0648                     i1l2539:	
  3783                           ;main.c: 508: do {
  3784                           
  3785                           
  3786                           ;main.c: 509: aux = cattle_nr(1, garron);
  3787  0648  086C               	movf	_garron+1,w
  3788  0649  00F4               	movwf	i1cattle_nr@cattle+1
  3789  064A  086B               	movf	_garron,w
  3790  064B  00F3               	movwf	i1cattle_nr@cattle
  3791  064C  3001               	movlw	1
  3792  064D  120A  158A  240C  120A  118A  	fcall	i1_cattle_nr
  3793  0652  0874               	movf	?i1_cattle_nr+1,w
  3794  0653  1283               	bcf	3,5	;RP0=0, select bank0
  3795  0654  1303               	bcf	3,6	;RP1=0, select bank0
  3796  0655  00D0               	movwf	ints_isr@aux_405+1
  3797  0656  0873               	movf	?i1_cattle_nr,w
  3798  0657  00CF               	movwf	ints_isr@aux_405
  3799                           
  3800                           ;main.c: 510: } while (aux != 0x10);
  3801  0658  3010               	movlw	16
  3802  0659  064F               	xorwf	ints_isr@aux_405,w
  3803  065A  0450               	iorwf	ints_isr@aux_405+1,w
  3804  065B  1D03               	btfss	3,2
  3805  065C  2E48               	goto	i1l2539
  3806                           
  3807                           ;main.c: 511: if (!PORTAbits.RA5) {
  3808  065D  1A85               	btfsc	5,5	;volatile
  3809  065E  2E7B               	goto	i1l2553
  3810                           
  3811                           ;main.c: 512: garron = 0;
  3812  065F  01EB               	clrf	_garron
  3813  0660  01EC               	clrf	_garron+1
  3814  0661                     i1l2545:	
  3815                           ;main.c: 513: do {
  3816                           
  3817                           
  3818                           ;main.c: 514: aux = cattle_nr(1, garron);
  3819  0661  086C               	movf	_garron+1,w
  3820  0662  00F4               	movwf	i1cattle_nr@cattle+1
  3821  0663  086B               	movf	_garron,w
  3822  0664  00F3               	movwf	i1cattle_nr@cattle
  3823  0665  3001               	movlw	1
  3824  0666  120A  158A  240C  120A  118A  	fcall	i1_cattle_nr
  3825  066B  0874               	movf	?i1_cattle_nr+1,w
  3826  066C  1283               	bcf	3,5	;RP0=0, select bank0
  3827  066D  1303               	bcf	3,6	;RP1=0, select bank0
  3828  066E  00D0               	movwf	ints_isr@aux_405+1
  3829  066F  0873               	movf	?i1_cattle_nr,w
  3830  0670  00CF               	movwf	ints_isr@aux_405
  3831                           
  3832                           ;main.c: 515: } while (aux != 0x10);
  3833  0671  3010               	movlw	16
  3834  0672  064F               	xorwf	ints_isr@aux_405,w
  3835  0673  0450               	iorwf	ints_isr@aux_405+1,w
  3836  0674  1D03               	btfss	3,2
  3837  0675  2E61               	goto	i1l2545
  3838                           
  3839                           ;main.c: 516: garron = 1;
  3840  0676  3001               	movlw	1
  3841  0677  00EB               	movwf	_garron
  3842  0678  3000               	movlw	0
  3843  0679  00EC               	movwf	_garron+1
  3844                           
  3845                           ;main.c: 517: reset = 1;
  3846  067A  14EA               	bsf	_reset/(0+8),_reset& (0+7)
  3847  067B                     i1l2553:	
  3848                           
  3849                           ;main.c: 518: }
  3850                           ;main.c: 519: if (res) {
  3851  067B  086D               	movf	_res,w
  3852  067C  1903               	btfsc	3,2
  3853  067D  2E87               	goto	i1l2557
  3854                           
  3855                           ;main.c: 520: lower = (garron + 1) >> 1;
  3856  067E  086B               	movf	_garron,w
  3857  067F  3E01               	addlw	1
  3858  0680  00B4               	movwf	??_ints_isr
  3859  0681  086C               	movf	_garron+1,w
  3860  0682  1803               	skipnc
  3861  0683  3E01               	addlw	1
  3862  0684  3E00               	addlw	0
  3863  0685  00B5               	movwf	??_ints_isr+1
  3864  0686  2E8B               	goto	L3
  3865  0687                     i1l2557:	
  3866                           ;main.c: 521: } else {
  3867                           
  3868                           
  3869                           ;main.c: 522: lower = garron >> 1;
  3870  0687  086C               	movf	_garron+1,w
  3871  0688  00B5               	movwf	??_ints_isr+1
  3872  0689  086B               	movf	_garron,w
  3873  068A  00B4               	movwf	??_ints_isr
  3874  068B                     L3:	
  3875  068B  1003               	clrc
  3876  068C  0CB5               	rrf	??_ints_isr+1,f
  3877  068D  0CB4               	rrf	??_ints_isr,f
  3878  068E  0834               	movf	??_ints_isr,w
  3879  068F  00D2               	movwf	ints_isr@lower_404
  3880  0690  0835               	movf	??_ints_isr+1,w
  3881  0691  00D3               	movwf	ints_isr@lower_404+1
  3882                           
  3883                           ;main.c: 523: }
  3884                           ;main.c: 524: resC = 0;
  3885  0692  01E4               	clrf	_resC
  3886                           
  3887                           ;main.c: 525: resD = 0;
  3888  0693  01E3               	clrf	_resD
  3889                           
  3890                           ;main.c: 526: resU = 0;
  3891  0694  01E2               	clrf	_resU
  3892  0695                     i1l273:	
  3893                           ;main.c: 527: while (lower > 999) {
  3894                           
  3895  0695  3003               	movlw	3
  3896  0696  0253               	subwf	ints_isr@lower_404+1,w
  3897  0697  30E8               	movlw	232
  3898  0698  1903               	skipnz
  3899  0699  0252               	subwf	ints_isr@lower_404,w
  3900  069A  1C03               	btfss	3,0
  3901  069B  2EAD               	goto	i1l2571
  3902                           
  3903                           ;main.c: 528: lower -= 1000;
  3904  069C  30E8               	movlw	232
  3905  069D  02D2               	subwf	ints_isr@lower_404,f
  3906  069E  3003               	movlw	3
  3907  069F  1C03               	skipc
  3908  06A0  03D3               	decf	ints_isr@lower_404+1,f
  3909  06A1  02D3               	subwf	ints_isr@lower_404+1,f
  3910  06A2  2E95               	goto	i1l273
  3911  06A3                     i1l2567:	
  3912                           ;main.c: 529: }
  3913                           ;main.c: 530: while (lower > 99) {
  3914                           
  3915                           
  3916                           ;main.c: 531: resC++;
  3917  06A3  3001               	movlw	1
  3918  06A4  00B4               	movwf	??_ints_isr
  3919  06A5  0834               	movf	??_ints_isr,w
  3920  06A6  07E4               	addwf	_resC,f
  3921                           
  3922                           ;main.c: 532: lower -= 100;
  3923  06A7  3064               	movlw	100
  3924  06A8  02D2               	subwf	ints_isr@lower_404,f
  3925  06A9  3000               	movlw	0
  3926  06AA  1C03               	skipc
  3927  06AB  03D3               	decf	ints_isr@lower_404+1,f
  3928  06AC  02D3               	subwf	ints_isr@lower_404+1,f
  3929  06AD                     i1l2571:	
  3930  06AD  3000               	movlw	0
  3931  06AE  0253               	subwf	ints_isr@lower_404+1,w
  3932  06AF  3064               	movlw	100
  3933  06B0  1903               	skipnz
  3934  06B1  0252               	subwf	ints_isr@lower_404,w
  3935  06B2  1C03               	btfss	3,0
  3936  06B3  2EBF               	goto	i1l2577
  3937  06B4  2EA3               	goto	i1l2567
  3938  06B5                     i1l2573:	
  3939                           ;main.c: 533: }
  3940                           ;main.c: 534: while (lower > 9) {
  3941                           
  3942                           
  3943                           ;main.c: 535: resD++;
  3944  06B5  3001               	movlw	1
  3945  06B6  00B4               	movwf	??_ints_isr
  3946  06B7  0834               	movf	??_ints_isr,w
  3947  06B8  07E3               	addwf	_resD,f
  3948                           
  3949                           ;main.c: 536: lower -= 10;
  3950  06B9  300A               	movlw	10
  3951  06BA  02D2               	subwf	ints_isr@lower_404,f
  3952  06BB  3000               	movlw	0
  3953  06BC  1C03               	skipc
  3954  06BD  03D3               	decf	ints_isr@lower_404+1,f
  3955  06BE  02D3               	subwf	ints_isr@lower_404+1,f
  3956  06BF                     i1l2577:	
  3957  06BF  3000               	movlw	0
  3958  06C0  0253               	subwf	ints_isr@lower_404+1,w
  3959  06C1  300A               	movlw	10
  3960  06C2  1903               	skipnz
  3961  06C3  0252               	subwf	ints_isr@lower_404,w
  3962  06C4  1803               	skipnc
  3963  06C5  2EB5               	goto	i1l2573
  3964                           
  3965                           ;main.c: 537: }
  3966                           ;main.c: 538: resU = lower;
  3967  06C6  0852               	movf	ints_isr@lower_404,w
  3968  06C7  00B4               	movwf	??_ints_isr
  3969  06C8  0834               	movf	??_ints_isr,w
  3970  06C9  00E2               	movwf	_resU
  3971                           
  3972                           ;main.c: 541: } else {
  3973  06CA  2ECC               	goto	i1l2583
  3974  06CB                     i1l2581:	
  3975                           
  3976                           ;main.c: 542: btnUpT = 0;
  3977  06CB  01E0               	clrf	_btnUpT
  3978  06CC                     i1l2583:	
  3979                           
  3980                           ;main.c: 543: }
  3981                           ;main.c: 544: if (!PORTAbits.RA5) {
  3982  06CC  1A85               	btfsc	5,5	;volatile
  3983  06CD  2EDB               	goto	i1l283
  3984                           
  3985                           ;main.c: 545: if (btnDownT < 255) {
  3986  06CE  0A5F               	incf	_btnDownT,w
  3987  06CF  1903               	btfsc	3,2
  3988  06D0  2ED5               	goto	i1l2589
  3989                           
  3990                           ;main.c: 546: btnDownT++;
  3991  06D1  3001               	movlw	1
  3992  06D2  00B4               	movwf	??_ints_isr
  3993  06D3  0834               	movf	??_ints_isr,w
  3994  06D4  07DF               	addwf	_btnDownT,f
  3995  06D5                     i1l2589:	
  3996                           
  3997                           ;main.c: 547: }
  3998                           ;main.c: 548: if (btnDownT > 25) {
  3999  06D5  301A               	movlw	26
  4000  06D6  025F               	subwf	_btnDownT,w
  4001  06D7  1C03               	skipc
  4002  06D8  2FA9               	goto	i1l305
  4003                           
  4004                           ;main.c: 549: btnDown = 1;
  4005  06D9  156A               	bsf	_btnDown/(0+8),_btnDown& (0+7)
  4006                           
  4007                           ;main.c: 550: }
  4008                           ;main.c: 551: } else if (btnDown && !PIR1bits.RCIF) {
  4009  06DA  2FA9               	goto	i1l305
  4010  06DB                     i1l283:	
  4011  06DB  196A               	btfsc	_btnDown/(0+8),_btnDown& (0+7)
  4012  06DC  1A8C               	btfsc	12,5	;volatile
  4013  06DD  2FA8               	goto	i1l2649
  4014                           
  4015                           ;main.c: 552: tempo = 0;
  4016  06DE  01DA               	clrf	_tempo
  4017  06DF  01DB               	clrf	_tempo+1
  4018                           
  4019                           ;main.c: 553: btnDown = 0;
  4020  06E0  116A               	bcf	_btnDown/(0+8),_btnDown& (0+7)
  4021                           
  4022                           ;main.c: 554: if (res) {
  4023  06E1  086D               	movf	_res,w
  4024  06E2  1903               	btfsc	3,2
  4025  06E3  2F0A               	goto	i1l288
  4026                           
  4027                           ;main.c: 555: res = 0;
  4028  06E4  01ED               	clrf	_res
  4029                           
  4030                           ;main.c: 556: outC = (outC >> 4) & 0x0F;
  4031  06E5  0867               	movf	_outC,w
  4032  06E6  00B4               	movwf	??_ints_isr
  4033  06E7  3004               	movlw	4
  4034  06E8                     u290_25:	
  4035  06E8  1003               	clrc
  4036  06E9  0CB4               	rrf	??_ints_isr,f
  4037  06EA  3EFF               	addlw	-1
  4038  06EB  1D03               	skipz
  4039  06EC  2EE8               	goto	u290_25
  4040  06ED  0834               	movf	??_ints_isr,w
  4041  06EE  390F               	andlw	15
  4042  06EF  00B5               	movwf	??_ints_isr+1
  4043  06F0  0835               	movf	??_ints_isr+1,w
  4044  06F1  00E7               	movwf	_outC
  4045                           
  4046                           ;main.c: 557: outD = (outD >> 4) & 0x0F;
  4047  06F2  0866               	movf	_outD,w
  4048  06F3  00B4               	movwf	??_ints_isr
  4049  06F4  3004               	movlw	4
  4050  06F5                     u291_25:	
  4051  06F5  1003               	clrc
  4052  06F6  0CB4               	rrf	??_ints_isr,f
  4053  06F7  3EFF               	addlw	-1
  4054  06F8  1D03               	skipz
  4055  06F9  2EF5               	goto	u291_25
  4056  06FA  0834               	movf	??_ints_isr,w
  4057  06FB  390F               	andlw	15
  4058  06FC  00B5               	movwf	??_ints_isr+1
  4059  06FD  0835               	movf	??_ints_isr+1,w
  4060  06FE  00E6               	movwf	_outD
  4061                           
  4062                           ;main.c: 558: outU = (outU >> 4) & 0x0F;
  4063  06FF  0865               	movf	_outU,w
  4064  0700  00B4               	movwf	??_ints_isr
  4065  0701  3004               	movlw	4
  4066  0702                     u292_25:	
  4067  0702  1003               	clrc
  4068  0703  0CB4               	rrf	??_ints_isr,f
  4069  0704  3EFF               	addlw	-1
  4070  0705  1D03               	skipz
  4071  0706  2F02               	goto	u292_25
  4072  0707  0834               	movf	??_ints_isr,w
  4073  0708  390F               	andlw	15
  4074  0709  2F34               	goto	L4
  4075  070A                     i1l288:	
  4076                           ;main.c: 559: } else {
  4077                           
  4078                           
  4079                           ;main.c: 560: res = 1;
  4080  070A  01ED               	clrf	_res
  4081  070B  0AED               	incf	_res,f
  4082                           
  4083                           ;main.c: 561: PORTAbits.RA6 = 1;
  4084  070C  1705               	bsf	5,6	;volatile
  4085                           
  4086                           ;main.c: 562: outC = (outC << 4) & 0xF0;
  4087  070D  0867               	movf	_outC,w
  4088  070E  00B4               	movwf	??_ints_isr
  4089  070F  3003               	movlw	3
  4090  0710                     u293_25:	
  4091  0710  1003               	clrc
  4092  0711  0DB4               	rlf	??_ints_isr,f
  4093  0712  3EFF               	addlw	-1
  4094  0713  1D03               	skipz
  4095  0714  2F10               	goto	u293_25
  4096  0715  1003               	clrc
  4097  0716  0D34               	rlf	??_ints_isr,w
  4098  0717  39F0               	andlw	240
  4099  0718  00B5               	movwf	??_ints_isr+1
  4100  0719  0835               	movf	??_ints_isr+1,w
  4101  071A  00E7               	movwf	_outC
  4102                           
  4103                           ;main.c: 563: outD = (outD << 4) & 0xF0;
  4104  071B  0866               	movf	_outD,w
  4105  071C  00B4               	movwf	??_ints_isr
  4106  071D  3003               	movlw	3
  4107  071E                     u294_25:	
  4108  071E  1003               	clrc
  4109  071F  0DB4               	rlf	??_ints_isr,f
  4110  0720  3EFF               	addlw	-1
  4111  0721  1D03               	skipz
  4112  0722  2F1E               	goto	u294_25
  4113  0723  1003               	clrc
  4114  0724  0D34               	rlf	??_ints_isr,w
  4115  0725  39F0               	andlw	240
  4116  0726  00B5               	movwf	??_ints_isr+1
  4117  0727  0835               	movf	??_ints_isr+1,w
  4118  0728  00E6               	movwf	_outD
  4119                           
  4120                           ;main.c: 564: outU = (outU << 4) & 0xF0;
  4121  0729  0865               	movf	_outU,w
  4122  072A  00B4               	movwf	??_ints_isr
  4123  072B  3003               	movlw	3
  4124  072C                     u295_25:	
  4125  072C  1003               	clrc
  4126  072D  0DB4               	rlf	??_ints_isr,f
  4127  072E  3EFF               	addlw	-1
  4128  072F  1D03               	skipz
  4129  0730  2F2C               	goto	u295_25
  4130  0731  1003               	clrc
  4131  0732  0D34               	rlf	??_ints_isr,w
  4132  0733  39F0               	andlw	240
  4133  0734                     L4:	
  4134  0734  00B5               	movwf	??_ints_isr+1
  4135  0735  0835               	movf	??_ints_isr+1,w
  4136  0736  00E5               	movwf	_outU
  4137                           
  4138                           ;main.c: 565: }
  4139                           ;main.c: 566: if (reset) {
  4140  0737  1CEA               	btfss	_reset/(0+8),_reset& (0+7)
  4141  0738  2F3C               	goto	i1l290
  4142                           
  4143                           ;main.c: 567: res = 1;
  4144  0739  01ED               	clrf	_res
  4145  073A  0AED               	incf	_res,f
  4146                           
  4147                           ;main.c: 568: reset = 0;
  4148  073B  10EA               	bcf	_reset/(0+8),_reset& (0+7)
  4149  073C                     i1l290:	
  4150                           
  4151                           ;main.c: 569: }
  4152                           ;main.c: 570: btnDown = 0;
  4153  073C  116A               	bcf	_btnDown/(0+8),_btnDown& (0+7)
  4154                           
  4155                           ;main.c: 571: garron--;
  4156  073D  3001               	movlw	1
  4157  073E  02EB               	subwf	_garron,f
  4158  073F  3000               	movlw	0
  4159  0740  1C03               	skipc
  4160  0741  03EC               	decf	_garron+1,f
  4161  0742  02EC               	subwf	_garron+1,f
  4162  0743                     i1l2617:	
  4163                           ;main.c: 572: do {
  4164                           
  4165                           
  4166                           ;main.c: 573: aux = cattle_nr(1, garron);
  4167  0743  086C               	movf	_garron+1,w
  4168  0744  00F4               	movwf	i1cattle_nr@cattle+1
  4169  0745  086B               	movf	_garron,w
  4170  0746  00F3               	movwf	i1cattle_nr@cattle
  4171  0747  3001               	movlw	1
  4172  0748  120A  158A  240C  120A  118A  	fcall	i1_cattle_nr
  4173  074D  0874               	movf	?i1_cattle_nr+1,w
  4174  074E  1283               	bcf	3,5	;RP0=0, select bank0
  4175  074F  1303               	bcf	3,6	;RP1=0, select bank0
  4176  0750  00D0               	movwf	ints_isr@aux_405+1
  4177  0751  0873               	movf	?i1_cattle_nr,w
  4178  0752  00CF               	movwf	ints_isr@aux_405
  4179                           
  4180                           ;main.c: 574: } while (aux != 0x10);
  4181  0753  3010               	movlw	16
  4182  0754  064F               	xorwf	ints_isr@aux_405,w
  4183  0755  0450               	iorwf	ints_isr@aux_405+1,w
  4184  0756  1D03               	btfss	3,2
  4185  0757  2F43               	goto	i1l2617
  4186                           
  4187                           ;main.c: 575: if (res) {
  4188  0758  086D               	movf	_res,w
  4189  0759  1903               	btfsc	3,2
  4190  075A  2F64               	goto	i1l2625
  4191                           
  4192                           ;main.c: 576: lower = (garron + 1) >> 1;
  4193  075B  086B               	movf	_garron,w
  4194  075C  3E01               	addlw	1
  4195  075D  00B4               	movwf	??_ints_isr
  4196  075E  086C               	movf	_garron+1,w
  4197  075F  1803               	skipnc
  4198  0760  3E01               	addlw	1
  4199  0761  3E00               	addlw	0
  4200  0762  00B5               	movwf	??_ints_isr+1
  4201  0763  2F68               	goto	L5
  4202  0764                     i1l2625:	
  4203                           ;main.c: 577: } else {
  4204                           
  4205                           
  4206                           ;main.c: 578: lower = garron >> 1;
  4207  0764  086C               	movf	_garron+1,w
  4208  0765  00B5               	movwf	??_ints_isr+1
  4209  0766  086B               	movf	_garron,w
  4210  0767  00B4               	movwf	??_ints_isr
  4211  0768                     L5:	
  4212  0768  1003               	clrc
  4213  0769  0CB5               	rrf	??_ints_isr+1,f
  4214  076A  0CB4               	rrf	??_ints_isr,f
  4215  076B  0834               	movf	??_ints_isr,w
  4216  076C  00D2               	movwf	ints_isr@lower_404
  4217  076D  0835               	movf	??_ints_isr+1,w
  4218  076E  00D3               	movwf	ints_isr@lower_404+1
  4219                           
  4220                           ;main.c: 579: }
  4221                           ;main.c: 580: resC = 0;
  4222  076F  01E4               	clrf	_resC
  4223                           
  4224                           ;main.c: 581: resD = 0;
  4225  0770  01E3               	clrf	_resD
  4226                           
  4227                           ;main.c: 582: resU = 0;
  4228  0771  01E2               	clrf	_resU
  4229  0772                     i1l295:	
  4230                           ;main.c: 583: while (lower > 999) {
  4231                           
  4232  0772  3003               	movlw	3
  4233  0773  0253               	subwf	ints_isr@lower_404+1,w
  4234  0774  30E8               	movlw	232
  4235  0775  1903               	skipnz
  4236  0776  0252               	subwf	ints_isr@lower_404,w
  4237  0777  1C03               	btfss	3,0
  4238  0778  2F8A               	goto	i1l2639
  4239                           
  4240                           ;main.c: 584: lower -= 1000;
  4241  0779  30E8               	movlw	232
  4242  077A  02D2               	subwf	ints_isr@lower_404,f
  4243  077B  3003               	movlw	3
  4244  077C  1C03               	skipc
  4245  077D  03D3               	decf	ints_isr@lower_404+1,f
  4246  077E  02D3               	subwf	ints_isr@lower_404+1,f
  4247  077F  2F72               	goto	i1l295
  4248  0780                     i1l2635:	
  4249                           ;main.c: 585: }
  4250                           ;main.c: 586: while (lower > 99) {
  4251                           
  4252                           
  4253                           ;main.c: 587: resC++;
  4254  0780  3001               	movlw	1
  4255  0781  00B4               	movwf	??_ints_isr
  4256  0782  0834               	movf	??_ints_isr,w
  4257  0783  07E4               	addwf	_resC,f
  4258                           
  4259                           ;main.c: 588: lower -= 100;
  4260  0784  3064               	movlw	100
  4261  0785  02D2               	subwf	ints_isr@lower_404,f
  4262  0786  3000               	movlw	0
  4263  0787  1C03               	skipc
  4264  0788  03D3               	decf	ints_isr@lower_404+1,f
  4265  0789  02D3               	subwf	ints_isr@lower_404+1,f
  4266  078A                     i1l2639:	
  4267  078A  3000               	movlw	0
  4268  078B  0253               	subwf	ints_isr@lower_404+1,w
  4269  078C  3064               	movlw	100
  4270  078D  1903               	skipnz
  4271  078E  0252               	subwf	ints_isr@lower_404,w
  4272  078F  1C03               	btfss	3,0
  4273  0790  2F9C               	goto	i1l2645
  4274  0791  2F80               	goto	i1l2635
  4275  0792                     i1l2641:	
  4276                           ;main.c: 589: }
  4277                           ;main.c: 590: while (lower > 9) {
  4278                           
  4279                           
  4280                           ;main.c: 591: resD++;
  4281  0792  3001               	movlw	1
  4282  0793  00B4               	movwf	??_ints_isr
  4283  0794  0834               	movf	??_ints_isr,w
  4284  0795  07E3               	addwf	_resD,f
  4285                           
  4286                           ;main.c: 592: lower -= 10;
  4287  0796  300A               	movlw	10
  4288  0797  02D2               	subwf	ints_isr@lower_404,f
  4289  0798  3000               	movlw	0
  4290  0799  1C03               	skipc
  4291  079A  03D3               	decf	ints_isr@lower_404+1,f
  4292  079B  02D3               	subwf	ints_isr@lower_404+1,f
  4293  079C                     i1l2645:	
  4294  079C  3000               	movlw	0
  4295  079D  0253               	subwf	ints_isr@lower_404+1,w
  4296  079E  300A               	movlw	10
  4297  079F  1903               	skipnz
  4298  07A0  0252               	subwf	ints_isr@lower_404,w
  4299  07A1  1803               	skipnc
  4300  07A2  2F92               	goto	i1l2641
  4301                           
  4302                           ;main.c: 593: }
  4303                           ;main.c: 594: resU = lower;
  4304  07A3  0852               	movf	ints_isr@lower_404,w
  4305  07A4  00B4               	movwf	??_ints_isr
  4306  07A5  0834               	movf	??_ints_isr,w
  4307  07A6  00E2               	movwf	_resU
  4308                           
  4309                           ;main.c: 598: } else {
  4310  07A7  2FA9               	goto	i1l305
  4311  07A8                     i1l2649:	
  4312                           
  4313                           ;main.c: 599: btnDownT = 0;
  4314  07A8  01DF               	clrf	_btnDownT
  4315  07A9                     i1l305:	
  4316  07A9  083F               	movf	??_ints_isr+11,w
  4317  07AA  00FF               	movwf	127
  4318  07AB  083E               	movf	??_ints_isr+10,w
  4319  07AC  008A               	movwf	10
  4320  07AD  083D               	movf	??_ints_isr+9,w
  4321  07AE  0084               	movwf	4
  4322  07AF  0E3C               	swapf	(??_ints_isr+8)^0,w
  4323  07B0  0083               	movwf	3
  4324  07B1  0EFE               	swapf	126,f
  4325  07B2  0E7E               	swapf	126,w
  4326  07B3  0009               	retfie
  4327  07B4                     __end_of_ints_isr:	
  4328                           
  4329                           	psect	intentry
  4330  0004                     __pintentry:	
  4331                           ;incstack = 0
  4332                           ; Regs used in _ints_isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4333                           
  4334  0004                     interrupt_function:	
  4335  007E                     saved_w	set	btemp
  4336  0004  00FE               	movwf	btemp
  4337  0005  0E03               	swapf	3,w
  4338  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4339  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4340  0008  00BC               	movwf	??_ints_isr+8
  4341  0009  0804               	movf	4,w
  4342  000A  00BD               	movwf	??_ints_isr+9
  4343  000B  080A               	movf	10,w
  4344  000C  00BE               	movwf	??_ints_isr+10
  4345  000D  087F               	movf	btemp+1,w
  4346  000E  00BF               	movwf	??_ints_isr+11
  4347  000F  120A  118A  282F   	ljmp	_ints_isr
  4348                           
  4349                           	psect	text6
  4350  0C0C                     __ptext6:	
  4351 ;; *************** function i1_cattle_nr *****************
  4352 ;; Defined at:
  4353 ;;		line 136 in file "main.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  opt             1    wreg     unsigned char 
  4356 ;;  cattle          2    3[COMMON] unsigned int 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  opt             1    7[COMMON] unsigned char 
  4359 ;;  cattle_nr       2    8[COMMON] unsigned int 
  4360 ;;  cattle_nr       1   10[COMMON] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  2    3[COMMON] unsigned int 
  4363 ;; Registers used:
  4364 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4370 ;;      Params:         2       0       0       0       0
  4371 ;;      Locals:         4       0       0       0       0
  4372 ;;      Temps:          2       0       0       0       0
  4373 ;;      Totals:         8       0       0       0       0
  4374 ;;Total ram usage:        8 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    1
  4377 ;; This function calls:
  4378 ;;		i1_rw_eeprom
  4379 ;; This function is called by:
  4380 ;;		_ints_isr
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           
  4385                           ;psect for function i1_cattle_nr
  4386  0C0C                     i1_cattle_nr:	
  4387                           
  4388                           ;incstack = 0
  4389                           ; Regs used in i1_cattle_nr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4390                           ;i1cattle_nr@opt stored from wreg
  4391  0C0C  00F7               	movwf	i1cattle_nr@opt
  4392                           
  4393                           ;main.c: 137: unsigned int rta = 0;
  4394  0C0D  01F8               	clrf	i1cattle_nr@rta
  4395  0C0E  01F9               	clrf	i1cattle_nr@rta+1
  4396                           
  4397                           ;main.c: 138: unsigned char dato = 0;
  4398  0C0F  01FA               	clrf	i1cattle_nr@dato
  4399                           
  4400                           ;main.c: 139: switch (opt) {
  4401  0C10  2C9F               	goto	i1l2155
  4402  0C11                     i1l2125:	
  4403                           ;main.c: 140: case 0:
  4404                           
  4405                           
  4406                           ;main.c: 141: dato = rw_eeprom(0x00, 0, 0);
  4407  0C11  01F0               	clrf	i1rw_eeprom@data
  4408  0C12  01F1               	clrf	i1rw_eeprom@rw
  4409  0C13  3000               	movlw	0
  4410  0C14  120A  158A  231E  120A  158A  	fcall	i1_rw_eeprom
  4411  0C19  00F5               	movwf	??i1_cattle_nr
  4412  0C1A  0875               	movf	??i1_cattle_nr,w
  4413  0C1B  00FA               	movwf	i1cattle_nr@dato
  4414                           
  4415                           ;main.c: 142: if (dato == 0x10) {
  4416  0C1C  3010               	movlw	16
  4417  0C1D  067A               	xorwf	i1cattle_nr@dato,w
  4418  0C1E  1D03               	btfss	3,2
  4419  0C1F  2C4E               	goto	i1l2137
  4420                           
  4421                           ;main.c: 143: dato = rw_eeprom(0x01, 0, 0);
  4422  0C20  01F0               	clrf	i1rw_eeprom@data
  4423  0C21  01F1               	clrf	i1rw_eeprom@rw
  4424  0C22  3001               	movlw	1
  4425  0C23  120A  158A  231E  120A  158A  	fcall	i1_rw_eeprom
  4426  0C28  00F5               	movwf	??i1_cattle_nr
  4427  0C29  0875               	movf	??i1_cattle_nr,w
  4428  0C2A  00FA               	movwf	i1cattle_nr@dato
  4429                           
  4430                           ;main.c: 144: rta = dato;
  4431  0C2B  087A               	movf	i1cattle_nr@dato,w
  4432  0C2C  00F5               	movwf	??i1_cattle_nr
  4433  0C2D  01F6               	clrf	??i1_cattle_nr+1
  4434  0C2E  0875               	movf	??i1_cattle_nr,w
  4435  0C2F  00F8               	movwf	i1cattle_nr@rta
  4436  0C30  0876               	movf	??i1_cattle_nr+1,w
  4437  0C31  00F9               	movwf	i1cattle_nr@rta+1
  4438                           
  4439                           ;main.c: 145: rta = rta << 8;
  4440  0C32  0878               	movf	i1cattle_nr@rta,w
  4441  0C33  00F6               	movwf	??i1_cattle_nr+1
  4442  0C34  01F5               	clrf	??i1_cattle_nr
  4443  0C35  0875               	movf	??i1_cattle_nr,w
  4444  0C36  00F8               	movwf	i1cattle_nr@rta
  4445  0C37  0876               	movf	??i1_cattle_nr+1,w
  4446  0C38  00F9               	movwf	i1cattle_nr@rta+1
  4447                           
  4448                           ;main.c: 146: dato = rw_eeprom(0x02, 0, 0);
  4449  0C39  01F0               	clrf	i1rw_eeprom@data
  4450  0C3A  01F1               	clrf	i1rw_eeprom@rw
  4451  0C3B  3002               	movlw	2
  4452  0C3C  120A  158A  231E  120A  158A  	fcall	i1_rw_eeprom
  4453  0C41  00F5               	movwf	??i1_cattle_nr
  4454  0C42  0875               	movf	??i1_cattle_nr,w
  4455  0C43  00FA               	movwf	i1cattle_nr@dato
  4456                           
  4457                           ;main.c: 147: rta += dato;
  4458  0C44  087A               	movf	i1cattle_nr@dato,w
  4459  0C45  00F5               	movwf	??i1_cattle_nr
  4460  0C46  01F6               	clrf	??i1_cattle_nr+1
  4461  0C47  0875               	movf	??i1_cattle_nr,w
  4462  0C48  07F8               	addwf	i1cattle_nr@rta,f
  4463  0C49  1803               	skipnc
  4464  0C4A  0AF9               	incf	i1cattle_nr@rta+1,f
  4465  0C4B  0876               	movf	??i1_cattle_nr+1,w
  4466  0C4C  07F9               	addwf	i1cattle_nr@rta+1,f
  4467                           
  4468                           ;main.c: 148: } else {
  4469  0C4D  2CA7               	goto	i1l2157
  4470  0C4E                     i1l2137:	
  4471                           
  4472                           ;main.c: 149: rw_eeprom(0x00, 0x10, 1);
  4473  0C4E  3010               	movlw	16
  4474  0C4F  00F5               	movwf	??i1_cattle_nr
  4475  0C50  0875               	movf	??i1_cattle_nr,w
  4476  0C51  00F0               	movwf	i1rw_eeprom@data
  4477  0C52  01F1               	clrf	i1rw_eeprom@rw
  4478  0C53  0AF1               	incf	i1rw_eeprom@rw,f
  4479  0C54  3000               	movlw	0
  4480  0C55  120A  158A  231E  120A  158A  	fcall	i1_rw_eeprom
  4481                           
  4482                           ;main.c: 150: rw_eeprom(0x01, 0x00, 1);
  4483  0C5A  01F0               	clrf	i1rw_eeprom@data
  4484  0C5B  01F1               	clrf	i1rw_eeprom@rw
  4485  0C5C  0AF1               	incf	i1rw_eeprom@rw,f
  4486  0C5D  3001               	movlw	1
  4487  0C5E  120A  158A  231E  120A  158A  	fcall	i1_rw_eeprom
  4488                           
  4489                           ;main.c: 151: rw_eeprom(0x02, 0x00, 1);
  4490  0C63  01F0               	clrf	i1rw_eeprom@data
  4491  0C64  01F1               	clrf	i1rw_eeprom@rw
  4492  0C65  0AF1               	incf	i1rw_eeprom@rw,f
  4493  0C66  3002               	movlw	2
  4494  0C67  120A  158A  231E  120A  158A  	fcall	i1_rw_eeprom
  4495                           
  4496                           ;main.c: 152: rta = 0;
  4497  0C6C  01F8               	clrf	i1cattle_nr@rta
  4498  0C6D  01F9               	clrf	i1cattle_nr@rta+1
  4499                           
  4500                           ;main.c: 153: }
  4501                           ;main.c: 154: break;
  4502  0C6E  2CA7               	goto	i1l2157
  4503  0C6F                     i1l2141:	
  4504                           ;main.c: 155: case 1:
  4505                           
  4506                           
  4507                           ;main.c: 156: dato = cattle & 0x00FF;
  4508  0C6F  0873               	movf	i1cattle_nr@cattle,w
  4509  0C70  00F5               	movwf	??i1_cattle_nr
  4510  0C71  0875               	movf	??i1_cattle_nr,w
  4511  0C72  00FA               	movwf	i1cattle_nr@dato
  4512                           
  4513                           ;main.c: 157: rw_eeprom(0x02, dato, 1);
  4514  0C73  087A               	movf	i1cattle_nr@dato,w
  4515  0C74  00F5               	movwf	??i1_cattle_nr
  4516  0C75  0875               	movf	??i1_cattle_nr,w
  4517  0C76  00F0               	movwf	i1rw_eeprom@data
  4518  0C77  01F1               	clrf	i1rw_eeprom@rw
  4519  0C78  0AF1               	incf	i1rw_eeprom@rw,f
  4520  0C79  3002               	movlw	2
  4521  0C7A  120A  158A  231E  120A  158A  	fcall	i1_rw_eeprom
  4522                           
  4523                           ;main.c: 159: cattle = cattle >> 8;
  4524  0C7F  0874               	movf	i1cattle_nr@cattle+1,w
  4525  0C80  00F6               	movwf	??i1_cattle_nr+1
  4526  0C81  0873               	movf	i1cattle_nr@cattle,w
  4527  0C82  00F5               	movwf	??i1_cattle_nr
  4528  0C83  0876               	movf	??i1_cattle_nr+1,w
  4529  0C84  00F5               	movwf	??i1_cattle_nr
  4530  0C85  01F6               	clrf	??i1_cattle_nr+1
  4531  0C86  0875               	movf	??i1_cattle_nr,w
  4532  0C87  00F3               	movwf	i1cattle_nr@cattle
  4533  0C88  0876               	movf	??i1_cattle_nr+1,w
  4534  0C89  00F4               	movwf	i1cattle_nr@cattle+1
  4535                           
  4536                           ;main.c: 160: dato = cattle & 0x00FF;
  4537  0C8A  0873               	movf	i1cattle_nr@cattle,w
  4538  0C8B  00F5               	movwf	??i1_cattle_nr
  4539  0C8C  0875               	movf	??i1_cattle_nr,w
  4540  0C8D  00FA               	movwf	i1cattle_nr@dato
  4541                           
  4542                           ;main.c: 161: rw_eeprom(0x01, dato, 1);
  4543  0C8E  087A               	movf	i1cattle_nr@dato,w
  4544  0C8F  00F5               	movwf	??i1_cattle_nr
  4545  0C90  0875               	movf	??i1_cattle_nr,w
  4546  0C91  00F0               	movwf	i1rw_eeprom@data
  4547  0C92  01F1               	clrf	i1rw_eeprom@rw
  4548  0C93  0AF1               	incf	i1rw_eeprom@rw,f
  4549  0C94  3001               	movlw	1
  4550  0C95  120A  158A  231E  120A  158A  	fcall	i1_rw_eeprom
  4551                           
  4552                           ;main.c: 162: rta = 0x10;
  4553  0C9A  3010               	movlw	16
  4554  0C9B  00F8               	movwf	i1cattle_nr@rta
  4555  0C9C  3000               	movlw	0
  4556  0C9D  00F9               	movwf	i1cattle_nr@rta+1
  4557                           
  4558                           ;main.c: 164: }
  4559                           
  4560                           ;main.c: 163: break;
  4561  0C9E  2CA7               	goto	i1l2157
  4562  0C9F                     i1l2155:	
  4563  0C9F  0877               	movf	i1cattle_nr@opt,w
  4564                           
  4565                           ; Switch size 1, requested type "space"
  4566                           ; Number of cases is 2, Range of values is 0 to 1
  4567                           ; switch strategies available:
  4568                           ; Name         Instructions Cycles
  4569                           ; simple_byte            7     4 (average)
  4570                           ; direct_byte           14     8 (fixed)
  4571                           ; jumptable            260     6 (fixed)
  4572                           ;	Chosen strategy is simple_byte
  4573  0CA0  3A00               	xorlw	0	; case 0
  4574  0CA1  1903               	skipnz
  4575  0CA2  2C11               	goto	i1l2125
  4576  0CA3  3A01               	xorlw	1	; case 1
  4577  0CA4  1903               	skipnz
  4578  0CA5  2C6F               	goto	i1l2141
  4579  0CA6  2CA7               	goto	i1l2157
  4580  0CA7                     i1l2157:	
  4581                           
  4582                           ;main.c: 165: return rta;
  4583  0CA7  0879               	movf	i1cattle_nr@rta+1,w
  4584  0CA8  00F4               	movwf	?i1_cattle_nr+1
  4585  0CA9  0878               	movf	i1cattle_nr@rta,w
  4586  0CAA  00F3               	movwf	?i1_cattle_nr
  4587  0CAB  0008               	return
  4588  0CAC                     __end_ofi1_cattle_nr:	
  4589                           
  4590                           	psect	text7
  4591  0B1E                     __ptext7:	
  4592 ;; *************** function i1_rw_eeprom *****************
  4593 ;; Defined at:
  4594 ;;		line 63 in file "main.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;  addr            1    wreg     unsigned char 
  4597 ;;  data            1    0[COMMON] unsigned char 
  4598 ;;  rw              1    1[COMMON] unsigned char 
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;  addr            1    2[COMMON] unsigned char 
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      unsigned char 
  4603 ;; Registers used:
  4604 ;;		wreg, status,2, status,0
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4610 ;;      Params:         2       0       0       0       0
  4611 ;;      Locals:         1       0       0       0       0
  4612 ;;      Temps:          0       0       0       0       0
  4613 ;;      Totals:         3       0       0       0       0
  4614 ;;Total ram usage:        3 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; This function calls:
  4617 ;;		Nothing
  4618 ;; This function is called by:
  4619 ;;		i1_cattle_nr
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           
  4624                           ;psect for function i1_rw_eeprom
  4625  0B1E                     i1_rw_eeprom:	
  4626                           
  4627                           ;incstack = 0
  4628                           ; Regs used in i1_rw_eeprom: [wreg+status,2+status,0]
  4629                           ;i1rw_eeprom@addr stored from wreg
  4630  0B1E  00F2               	movwf	i1rw_eeprom@addr
  4631                           
  4632                           ;main.c: 65: if (rw) {
  4633  0B1F  0871               	movf	i1rw_eeprom@rw,w
  4634  0B20  1903               	btfsc	3,2
  4635  0B21  2B38               	goto	i1l1919
  4636                           
  4637                           ;main.c: 66: EEADR = addr;
  4638  0B22  0872               	movf	i1rw_eeprom@addr,w
  4639  0B23  1283               	bcf	3,5	;RP0=0, select bank2
  4640  0B24  1703               	bsf	3,6	;RP1=1, select bank2
  4641  0B25  008D               	movwf	13	;volatile
  4642                           
  4643                           ;main.c: 67: EEDAT = data;
  4644  0B26  0870               	movf	i1rw_eeprom@data,w
  4645  0B27  008C               	movwf	12	;volatile
  4646                           
  4647                           ;main.c: 68: EECON1bits.EEPGD = 0;
  4648  0B28  1683               	bsf	3,5	;RP0=1, select bank3
  4649  0B29  1703               	bsf	3,6	;RP1=1, select bank3
  4650  0B2A  138C               	bcf	12,7	;volsfr
  4651                           
  4652                           ;main.c: 69: EECON1bits.WREN = 1;
  4653  0B2B  150C               	bsf	12,2	;volsfr
  4654                           
  4655                           ;main.c: 70: EECON2 = 0x55;
  4656  0B2C  3055               	movlw	85
  4657  0B2D  008D               	movwf	13	;volsfr
  4658                           
  4659                           ;main.c: 71: EECON2 = 0xAA;
  4660  0B2E  30AA               	movlw	170
  4661  0B2F  008D               	movwf	13	;volsfr
  4662                           
  4663                           ;main.c: 72: EECON1bits.WR = 1;
  4664  0B30  148C               	bsf	12,1	;volsfr
  4665  0B31                     i1l124:	
  4666                           ;main.c: 73: while (!PIR2bits.EEIF);
  4667                           
  4668  0B31  1283               	bcf	3,5	;RP0=0, select bank0
  4669  0B32  1303               	bcf	3,6	;RP1=0, select bank0
  4670  0B33  1E0D               	btfss	13,4	;volatile
  4671  0B34  2B31               	goto	i1l124
  4672                           
  4673                           ;main.c: 74: PIR2bits.EEIF = 0;
  4674  0B35  120D               	bcf	13,4	;volatile
  4675                           
  4676                           ;main.c: 75: return 0;
  4677  0B36  3000               	movlw	0
  4678                           
  4679                           ;main.c: 76: }
  4680  0B37  0008               	return
  4681  0B38                     i1l1919:	
  4682                           
  4683                           ;main.c: 77: else {
  4684                           ;main.c: 78: EEADR = addr;
  4685  0B38  0872               	movf	i1rw_eeprom@addr,w
  4686  0B39  1283               	bcf	3,5	;RP0=0, select bank2
  4687  0B3A  1703               	bsf	3,6	;RP1=1, select bank2
  4688  0B3B  008D               	movwf	13	;volatile
  4689                           
  4690                           ;main.c: 79: EECON1bits.EEPGD = 0;
  4691  0B3C  1683               	bsf	3,5	;RP0=1, select bank3
  4692  0B3D  1703               	bsf	3,6	;RP1=1, select bank3
  4693  0B3E  138C               	bcf	12,7	;volsfr
  4694                           
  4695                           ;main.c: 80: EECON1bits.RD = 1;
  4696  0B3F  140C               	bsf	12,0	;volsfr
  4697                           
  4698                           ;main.c: 81: return EEDAT;
  4699  0B40  1283               	bcf	3,5	;RP0=0, select bank2
  4700  0B41  1703               	bsf	3,6	;RP1=1, select bank2
  4701  0B42  080C               	movf	12,w	;volatile
  4702  0B43  0008               	return
  4703  0B44                     __end_ofi1_rw_eeprom:	
  4704                           
  4705                           	psect	text8
  4706  0E6A                     __ptext8:	
  4707 ;; *************** function _printf *****************
  4708 ;; Defined at:
  4709 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;  f               1    wreg     PTR const unsigned char 
  4712 ;;		 -> STR_1(6), 
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;  f               1   16[BANK0 ] PTR const unsigned char 
  4715 ;;		 -> STR_1(6), 
  4716 ;;  tmpval          4    0        struct .
  4717 ;;  width           2   17[BANK0 ] int 
  4718 ;;  val             2   13[BANK0 ] unsigned int 
  4719 ;;  cp              2    0        PTR const unsigned char 
  4720 ;;  len             2    0        unsigned int 
  4721 ;;  c               1   19[BANK0 ] char 
  4722 ;;  flag            1   15[BANK0 ] unsigned char 
  4723 ;;  prec            1   12[BANK0 ] char 
  4724 ;;  ap              1   11[BANK0 ] PTR void [1]
  4725 ;;		 -> ?_printf(2), 
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  2    6[BANK0 ] int 
  4728 ;; Registers used:
  4729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4735 ;;      Params:         0       2       0       0       0
  4736 ;;      Locals:         0       9       0       0       0
  4737 ;;      Temps:          0       3       0       0       0
  4738 ;;      Totals:         0      14       0       0       0
  4739 ;;Total ram usage:       14 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:    1
  4742 ;; This function calls:
  4743 ;;		___lwdiv
  4744 ;;		___lwmod
  4745 ;;		___wmul
  4746 ;;		_isdigit
  4747 ;;		_putch
  4748 ;; This function is called by:
  4749 ;;		_ints_isr
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           
  4754                           ;psect for function _printf
  4755  0E6A                     _printf:	
  4756                           
  4757                           ;incstack = 0
  4758                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4759                           ;printf@f stored from wreg
  4760  0E6A  1283               	bcf	3,5	;RP0=0, select bank0
  4761  0E6B  1303               	bcf	3,6	;RP1=0, select bank0
  4762  0E6C  00B0               	movwf	printf@f
  4763                           
  4764                           ;doprnt.c: 466: va_list ap;
  4765                           ;doprnt.c: 499: signed char c;
  4766                           ;doprnt.c: 501: int width;
  4767                           ;doprnt.c: 506: signed char prec;
  4768                           ;doprnt.c: 508: unsigned char flag;
  4769                           ;doprnt.c: 523: union {
  4770                           ;doprnt.c: 524: unsigned long vd;
  4771                           ;doprnt.c: 525: double integ;
  4772                           ;doprnt.c: 526: } tmpval;
  4773                           ;doprnt.c: 528: unsigned int val;
  4774                           ;doprnt.c: 529: unsigned len;
  4775                           ;doprnt.c: 530: const char * cp;
  4776                           ;doprnt.c: 533: *ap = __va_start();
  4777  0E6D  3026               	movlw	(low (?_printf| 0))& (0+255)
  4778  0E6E  00A8               	movwf	??_printf
  4779  0E6F  0828               	movf	??_printf,w
  4780  0E70  00AB               	movwf	printf@ap
  4781  0E71                     i1l2121:	
  4782                           ;doprnt.c: 536: while(c = *f++) {
  4783                           
  4784  0E71  3001               	movlw	1
  4785  0E72  1283               	bcf	3,5	;RP0=0, select bank0
  4786  0E73  1303               	bcf	3,6	;RP1=0, select bank0
  4787  0E74  07B0               	addwf	printf@f,f
  4788  0E75  30FF               	movlw	-1
  4789  0E76  0730               	addwf	printf@f,w
  4790  0E77  0084               	movwf	4
  4791  0E78  120A  158A  2000  120A  158A  	fcall	stringdir
  4792  0E7D  00A8               	movwf	??_printf
  4793  0E7E  0828               	movf	??_printf,w
  4794  0E7F  00B3               	movwf	printf@c
  4795  0E80  0833               	movf	printf@c,w
  4796  0E81  1903               	btfsc	3,2
  4797  0E82  0008               	return
  4798                           
  4799                           ;doprnt.c: 538: if(c != '%')
  4800  0E83  3025               	movlw	37
  4801  0E84  0633               	xorwf	printf@c,w
  4802  0E85  1903               	btfsc	3,2
  4803  0E86  2E8E               	goto	i1l2035
  4804                           
  4805                           ;doprnt.c: 540: {
  4806                           ;doprnt.c: 541: (putch(c) );
  4807  0E87  0833               	movf	printf@c,w
  4808  0E88  120A  158A  22C7  120A  158A  	fcall	_putch
  4809                           
  4810                           ;doprnt.c: 542: continue;
  4811  0E8D  2E71               	goto	i1l2121
  4812  0E8E                     i1l2035:	
  4813                           
  4814                           ;doprnt.c: 543: }
  4815                           ;doprnt.c: 546: width = 0;
  4816  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  4817  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  4818  0E90  01B1               	clrf	printf@width
  4819  0E91  01B2               	clrf	printf@width+1
  4820                           
  4821                           ;doprnt.c: 548: flag = 0;
  4822  0E92  01AF               	clrf	printf@flag
  4823                           
  4824                           ;doprnt.c: 551: switch(*f) {
  4825                           
  4826                           ;doprnt.c: 550: for(;;) {
  4827  0E93  2E99               	goto	i1l2041
  4828  0E94                     i1l351:	
  4829                           ;doprnt.c: 579: case '0':
  4830                           
  4831                           
  4832                           ;doprnt.c: 580: flag |= 0x04;
  4833  0E94  152F               	bsf	printf@flag,2
  4834                           
  4835                           ;doprnt.c: 581: f++;
  4836  0E95  3001               	movlw	1
  4837  0E96  00A8               	movwf	??_printf
  4838  0E97  0828               	movf	??_printf,w
  4839  0E98  07B0               	addwf	printf@f,f
  4840  0E99                     i1l2041:	
  4841                           ;doprnt.c: 584: }
  4842                           
  4843                           ;doprnt.c: 582: continue;
  4844                           
  4845  0E99  0830               	movf	printf@f,w
  4846  0E9A  0084               	movwf	4
  4847  0E9B  120A  158A  2000  120A  158A  	fcall	stringdir
  4848                           
  4849                           ; Switch size 1, requested type "space"
  4850                           ; Number of cases is 1, Range of values is 48 to 48
  4851                           ; switch strategies available:
  4852                           ; Name         Instructions Cycles
  4853                           ; simple_byte            4     3 (average)
  4854                           ; direct_byte           14    11 (fixed)
  4855                           ; jumptable            263     9 (fixed)
  4856                           ;	Chosen strategy is simple_byte
  4857  0EA0  3A30               	xorlw	48	; case 48
  4858  0EA1  1903               	skipnz
  4859  0EA2  2E94               	goto	i1l351
  4860  0EA3  2EA4               	goto	i1l2043
  4861  0EA4                     i1l2043:	
  4862                           ;doprnt.c: 586: }
  4863                           
  4864                           ;doprnt.c: 585: break;
  4865                           
  4866                           
  4867                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4868  0EA4  0830               	movf	printf@f,w
  4869  0EA5  0084               	movwf	4
  4870  0EA6  120A  158A  2000  120A  158A  	fcall	stringdir
  4871  0EAB  120A  158A  22D7  120A  158A  	fcall	_isdigit
  4872  0EB0  1C03               	btfss	3,0
  4873  0EB1  2EF0               	goto	i1l2057
  4874                           
  4875                           ;doprnt.c: 598: width = 0;
  4876  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  4877  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  4878  0EB4  01B1               	clrf	printf@width
  4879  0EB5  01B2               	clrf	printf@width+1
  4880  0EB6                     i1l2047:	
  4881                           ;doprnt.c: 599: do {
  4882                           
  4883                           
  4884                           ;doprnt.c: 600: width *= 10;
  4885  0EB6  300A               	movlw	10
  4886  0EB7  00F0               	movwf	___wmul@multiplier
  4887  0EB8  3000               	movlw	0
  4888  0EB9  00F1               	movwf	___wmul@multiplier+1
  4889  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  4890  0EBB  1303               	bcf	3,6	;RP1=0, select bank0
  4891  0EBC  0832               	movf	printf@width+1,w
  4892  0EBD  00F3               	movwf	___wmul@multiplicand+1
  4893  0EBE  0831               	movf	printf@width,w
  4894  0EBF  00F2               	movwf	___wmul@multiplicand
  4895  0EC0  120A  158A  22FD  120A  158A  	fcall	___wmul
  4896  0EC5  0871               	movf	?___wmul+1,w
  4897  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  4898  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  4899  0EC8  00B2               	movwf	printf@width+1
  4900  0EC9  0870               	movf	?___wmul,w
  4901  0ECA  00B1               	movwf	printf@width
  4902                           
  4903                           ;doprnt.c: 601: width += *f++ - '0';
  4904  0ECB  0830               	movf	printf@f,w
  4905  0ECC  0084               	movwf	4
  4906  0ECD  120A  158A  2000  120A  158A  	fcall	stringdir
  4907  0ED2  3ED0               	addlw	208
  4908  0ED3  00A8               	movwf	??_printf
  4909  0ED4  30FF               	movlw	255
  4910  0ED5  1803               	skipnc
  4911  0ED6  3000               	movlw	0
  4912  0ED7  00A9               	movwf	??_printf+1
  4913  0ED8  0828               	movf	??_printf,w
  4914  0ED9  07B1               	addwf	printf@width,f
  4915  0EDA  1803               	skipnc
  4916  0EDB  0AB2               	incf	printf@width+1,f
  4917  0EDC  0829               	movf	??_printf+1,w
  4918  0EDD  07B2               	addwf	printf@width+1,f
  4919  0EDE  3001               	movlw	1
  4920  0EDF  00A8               	movwf	??_printf
  4921  0EE0  0828               	movf	??_printf,w
  4922  0EE1  07B0               	addwf	printf@f,f
  4923                           
  4924                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4925  0EE2  0830               	movf	printf@f,w
  4926  0EE3  0084               	movwf	4
  4927  0EE4  120A  158A  2000  120A  158A  	fcall	stringdir
  4928  0EE9  120A  158A  22D7  120A  158A  	fcall	_isdigit
  4929  0EEE  1803               	btfsc	3,0
  4930  0EEF  2EB6               	goto	i1l2047
  4931  0EF0                     i1l2057:	
  4932                           ;doprnt.c: 822: }
  4933                           
  4934                           ;doprnt.c: 813: continue;
  4935                           
  4936                           ;doprnt.c: 802: default:
  4937                           
  4938                           ;doprnt.c: 698: case 'i':
  4939                           ;doprnt.c: 699: break;
  4940                           
  4941                           ;doprnt.c: 697: case 'd':
  4942                           
  4943                           ;doprnt.c: 638: goto alldone;
  4944                           
  4945                           ;doprnt.c: 637: case 0:
  4946                           
  4947                           ;doprnt.c: 608: }
  4948                           ;doprnt.c: 635: switch(c = *f++) {
  4949                           
  4950  0EF0  3001               	movlw	1
  4951  0EF1  1283               	bcf	3,5	;RP0=0, select bank0
  4952  0EF2  1303               	bcf	3,6	;RP1=0, select bank0
  4953  0EF3  07B0               	addwf	printf@f,f
  4954  0EF4  30FF               	movlw	-1
  4955  0EF5  0730               	addwf	printf@f,w
  4956  0EF6  0084               	movwf	4
  4957  0EF7  120A  158A  2000  120A  158A  	fcall	stringdir
  4958  0EFC  00B3               	movwf	printf@c
  4959                           
  4960                           ; Switch size 1, requested type "space"
  4961                           ; Number of cases is 3, Range of values is 0 to 105
  4962                           ; switch strategies available:
  4963                           ; Name         Instructions Cycles
  4964                           ; simple_byte           10     6 (average)
  4965                           ; jumptable            260     6 (fixed)
  4966                           ;	Chosen strategy is simple_byte
  4967  0EFD  3A00               	xorlw	0	; case 0
  4968  0EFE  1903               	skipnz
  4969  0EFF  2FFF               	goto	i1l386
  4970  0F00  3A64               	xorlw	100	; case 100
  4971  0F01  1903               	skipnz
  4972  0F02  2F07               	goto	i1l2059
  4973  0F03  3A0D               	xorlw	13	; case 105
  4974  0F04  1903               	skipnz
  4975  0F05  2F07               	goto	i1l2059
  4976  0F06  2E71               	goto	i1l2121
  4977  0F07                     i1l2059:	
  4978                           
  4979                           ;doprnt.c: 1253: {
  4980                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4981  0F07  1283               	bcf	3,5	;RP0=0, select bank0
  4982  0F08  1303               	bcf	3,6	;RP1=0, select bank0
  4983  0F09  082B               	movf	printf@ap,w
  4984  0F0A  0084               	movwf	4
  4985  0F0B  1383               	bcf	3,7	;select IRP bank0
  4986  0F0C  0800               	movf	0,w
  4987  0F0D  00AD               	movwf	printf@val
  4988  0F0E  0A84               	incf	4,f
  4989  0F0F  0800               	movf	0,w
  4990  0F10  00AE               	movwf	printf@val+1
  4991  0F11  3002               	movlw	2
  4992  0F12  00A8               	movwf	??_printf
  4993  0F13  0828               	movf	??_printf,w
  4994  0F14  07AB               	addwf	printf@ap,f
  4995                           
  4996                           ;doprnt.c: 1261: if((int)val < 0) {
  4997  0F15  1FAE               	btfss	printf@val+1,7
  4998  0F16  2F20               	goto	i1l2069
  4999                           
  5000                           ;doprnt.c: 1262: flag |= 0x03;
  5001  0F17  3003               	movlw	3
  5002  0F18  00A8               	movwf	??_printf
  5003  0F19  0828               	movf	??_printf,w
  5004  0F1A  04AF               	iorwf	printf@flag,f
  5005                           
  5006                           ;doprnt.c: 1263: val = -val;
  5007  0F1B  09AD               	comf	printf@val,f
  5008  0F1C  09AE               	comf	printf@val+1,f
  5009  0F1D  0AAD               	incf	printf@val,f
  5010  0F1E  1903               	skipnz
  5011  0F1F  0AAE               	incf	printf@val+1,f
  5012  0F20                     i1l2069:	
  5013                           
  5014                           ;doprnt.c: 1264: }
  5015                           ;doprnt.c: 1266: }
  5016                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5017  0F20  01B3               	clrf	printf@c
  5018  0F21  0AB3               	incf	printf@c,f
  5019  0F22  3005               	movlw	5
  5020  0F23  0633               	xorwf	printf@c,w
  5021  0F24  1903               	btfsc	3,2
  5022  0F25  2F47               	goto	i1l2081
  5023  0F26                     i1l2075:	
  5024                           
  5025                           ;doprnt.c: 1306: if(val < dpowers[c])
  5026  0F26  0833               	movf	printf@c,w
  5027  0F27  00A8               	movwf	??_printf
  5028  0F28  0728               	addwf	??_printf,w
  5029  0F29  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5030  0F2A  0084               	movwf	4
  5031  0F2B  120A  158A  2000  120A  158A  	fcall	stringdir
  5032  0F30  00A9               	movwf	??_printf+1
  5033  0F31  120A  158A  2000  120A  158A  	fcall	stringdir
  5034  0F36  00AA               	movwf	??_printf+2
  5035  0F37  082A               	movf	??_printf+2,w
  5036  0F38  022E               	subwf	printf@val+1,w
  5037  0F39  1D03               	skipz
  5038  0F3A  2F3D               	goto	u192_25
  5039  0F3B  0829               	movf	??_printf+1,w
  5040  0F3C  022D               	subwf	printf@val,w
  5041  0F3D                     u192_25:	
  5042  0F3D  1C03               	btfss	3,0
  5043  0F3E  2F47               	goto	i1l2081
  5044                           
  5045                           ;doprnt.c: 1307: break;
  5046  0F3F  3001               	movlw	1
  5047  0F40  00A8               	movwf	??_printf
  5048  0F41  0828               	movf	??_printf,w
  5049  0F42  07B3               	addwf	printf@c,f
  5050  0F43  3005               	movlw	5
  5051  0F44  0633               	xorwf	printf@c,w
  5052  0F45  1D03               	btfss	3,2
  5053  0F46  2F26               	goto	i1l2075
  5054  0F47                     i1l2081:	
  5055                           
  5056                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5057  0F47  0831               	movf	printf@width,w
  5058  0F48  0432               	iorwf	printf@width+1,w
  5059  0F49  1903               	btfsc	3,2
  5060  0F4A  2F55               	goto	i1l369
  5061  0F4B  082F               	movf	printf@flag,w
  5062  0F4C  3903               	andlw	3
  5063  0F4D  1903               	btfsc	3,2
  5064  0F4E  2F55               	goto	i1l369
  5065                           
  5066                           ;doprnt.c: 1346: width--;
  5067  0F4F  30FF               	movlw	255
  5068  0F50  07B1               	addwf	printf@width,f
  5069  0F51  1803               	skipnc
  5070  0F52  0AB2               	incf	printf@width+1,f
  5071  0F53  30FF               	movlw	255
  5072  0F54  07B2               	addwf	printf@width+1,f
  5073  0F55                     i1l369:	
  5074                           
  5075                           ;doprnt.c: 1381: if(width > c)
  5076  0F55  0833               	movf	printf@c,w
  5077  0F56  00A8               	movwf	??_printf
  5078  0F57  01A9               	clrf	??_printf+1
  5079  0F58  1BA8               	btfsc	??_printf,7
  5080  0F59  03A9               	decf	??_printf+1,f
  5081  0F5A  0829               	movf	??_printf+1,w
  5082  0F5B  3A80               	xorlw	128
  5083  0F5C  00AA               	movwf	??_printf+2
  5084  0F5D  0832               	movf	printf@width+1,w
  5085  0F5E  3A80               	xorlw	128
  5086  0F5F  022A               	subwf	??_printf+2,w
  5087  0F60  1D03               	skipz
  5088  0F61  2F64               	goto	u196_25
  5089  0F62  0831               	movf	printf@width,w
  5090  0F63  0228               	subwf	??_printf,w
  5091  0F64                     u196_25:	
  5092  0F64  1803               	skipnc
  5093  0F65  2F74               	goto	i1l2089
  5094                           
  5095                           ;doprnt.c: 1382: width -= c;
  5096  0F66  1283               	bcf	3,5	;RP0=0, select bank0
  5097  0F67  1303               	bcf	3,6	;RP1=0, select bank0
  5098  0F68  0833               	movf	printf@c,w
  5099  0F69  00A8               	movwf	??_printf
  5100  0F6A  01A9               	clrf	??_printf+1
  5101  0F6B  1BA8               	btfsc	??_printf,7
  5102  0F6C  03A9               	decf	??_printf+1,f
  5103  0F6D  0828               	movf	??_printf,w
  5104  0F6E  02B1               	subwf	printf@width,f
  5105  0F6F  0829               	movf	??_printf+1,w
  5106  0F70  1C03               	skipc
  5107  0F71  03B2               	decf	printf@width+1,f
  5108  0F72  02B2               	subwf	printf@width+1,f
  5109  0F73  2F78               	goto	i1l2091
  5110  0F74                     i1l2089:	
  5111                           
  5112                           ;doprnt.c: 1383: else
  5113                           ;doprnt.c: 1384: width = 0;
  5114  0F74  1283               	bcf	3,5	;RP0=0, select bank0
  5115  0F75  1303               	bcf	3,6	;RP1=0, select bank0
  5116  0F76  01B1               	clrf	printf@width
  5117  0F77  01B2               	clrf	printf@width+1
  5118  0F78                     i1l2091:	
  5119                           
  5120                           ;doprnt.c: 1387: if(flag & 0x04) {
  5121  0F78  1D2F               	btfss	printf@flag,2
  5122  0F79  2F99               	goto	i1l2103
  5123                           
  5124                           ;doprnt.c: 1392: if(flag & 0x03)
  5125  0F7A  082F               	movf	printf@flag,w
  5126  0F7B  3903               	andlw	3
  5127  0F7C  1903               	btfsc	3,2
  5128  0F7D  2F84               	goto	i1l2097
  5129                           
  5130                           ;doprnt.c: 1393: (putch('-') );
  5131  0F7E  302D               	movlw	45
  5132  0F7F  120A  158A  22C7  120A  158A  	fcall	_putch
  5133  0F84                     i1l2097:	
  5134                           
  5135                           ;doprnt.c: 1415: if(width)
  5136  0F84  1283               	bcf	3,5	;RP0=0, select bank0
  5137  0F85  1303               	bcf	3,6	;RP1=0, select bank0
  5138  0F86                     L7:	
  5139  0F86  0831               	movf	printf@width,w
  5140  0F87  0432               	iorwf	printf@width+1,w
  5141  0F88  1903               	btfsc	3,2
  5142  0F89  2FB9               	goto	i1l2113
  5143                           
  5144                           ;doprnt.c: 1417: (putch('0') );
  5145                           
  5146                           ;doprnt.c: 1416: do
  5147  0F8A  3030               	movlw	48
  5148  0F8B  120A  158A  22C7  120A  158A  	fcall	_putch
  5149                           
  5150                           ;doprnt.c: 1418: while(--width);
  5151  0F90  30FF               	movlw	255
  5152  0F91  1283               	bcf	3,5	;RP0=0, select bank0
  5153  0F92  1303               	bcf	3,6	;RP1=0, select bank0
  5154  0F93  07B1               	addwf	printf@width,f
  5155  0F94  1803               	skipnc
  5156  0F95  0AB2               	incf	printf@width+1,f
  5157  0F96  30FF               	movlw	255
  5158  0F97  07B2               	addwf	printf@width+1,f
  5159  0F98  2F86               	goto	L7
  5160  0F99                     i1l2103:	
  5161                           ;doprnt.c: 1420: } else
  5162                           
  5163                           
  5164                           ;doprnt.c: 1422: {
  5165                           ;doprnt.c: 1424: if(width
  5166                           ;doprnt.c: 1428: )
  5167  0F99  0831               	movf	printf@width,w
  5168  0F9A  0432               	iorwf	printf@width+1,w
  5169  0F9B  1903               	btfsc	3,2
  5170  0F9C  2FAF               	goto	i1l2109
  5171  0F9D                     i1l2105:	
  5172                           ;doprnt.c: 1429: do
  5173                           
  5174                           
  5175                           ;doprnt.c: 1430: (putch(' ') );
  5176  0F9D  3020               	movlw	32
  5177  0F9E  120A  158A  22C7  120A  158A  	fcall	_putch
  5178                           
  5179                           ;doprnt.c: 1431: while(--width);
  5180  0FA3  30FF               	movlw	255
  5181  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  5182  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  5183  0FA6  07B1               	addwf	printf@width,f
  5184  0FA7  1803               	skipnc
  5185  0FA8  0AB2               	incf	printf@width+1,f
  5186  0FA9  30FF               	movlw	255
  5187  0FAA  07B2               	addwf	printf@width+1,f
  5188  0FAB  0831               	movf	printf@width,w
  5189  0FAC  0432               	iorwf	printf@width+1,w
  5190  0FAD  1D03               	btfss	3,2
  5191  0FAE  2F9D               	goto	i1l2105
  5192  0FAF                     i1l2109:	
  5193                           
  5194                           ;doprnt.c: 1438: if(flag & 0x03)
  5195  0FAF  082F               	movf	printf@flag,w
  5196  0FB0  3903               	andlw	3
  5197  0FB1  1903               	btfsc	3,2
  5198  0FB2  2FB9               	goto	i1l2113
  5199                           
  5200                           ;doprnt.c: 1439: (putch('-') );
  5201  0FB3  302D               	movlw	45
  5202  0FB4  120A  158A  22C7  120A  158A  	fcall	_putch
  5203  0FB9                     i1l2113:	
  5204                           
  5205                           ;doprnt.c: 1469: }
  5206                           ;doprnt.c: 1472: prec = c;
  5207  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  5208  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  5209  0FBB  0833               	movf	printf@c,w
  5210  0FBC  00A8               	movwf	??_printf
  5211  0FBD  0828               	movf	??_printf,w
  5212  0FBE  00AC               	movwf	printf@prec
  5213  0FBF                     i1l2119:	
  5214                           ;doprnt.c: 1474: while(prec--) {
  5215                           
  5216  0FBF  30FF               	movlw	255
  5217  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  5218  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  5219  0FC2  00A8               	movwf	??_printf
  5220  0FC3  0828               	movf	??_printf,w
  5221  0FC4  07AC               	addwf	printf@prec,f
  5222  0FC5  0A2C               	incf	printf@prec,w
  5223  0FC6  1903               	btfsc	3,2
  5224  0FC7  2E71               	goto	i1l2121
  5225                           
  5226                           ;doprnt.c: 1478: {
  5227                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5228  0FC8  300A               	movlw	10
  5229  0FC9  00A0               	movwf	___lwmod@divisor
  5230  0FCA  3000               	movlw	0
  5231  0FCB  00A1               	movwf	___lwmod@divisor+1
  5232  0FCC  082C               	movf	printf@prec,w
  5233  0FCD  00A8               	movwf	??_printf
  5234  0FCE  0728               	addwf	??_printf,w
  5235  0FCF  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5236  0FD0  0084               	movwf	4
  5237  0FD1  120A  158A  2000  120A  158A  	fcall	stringdir
  5238  0FD6  00F6               	movwf	___lwdiv@divisor
  5239  0FD7  120A  158A  2000  120A  158A  	fcall	stringdir
  5240  0FDC  00F7               	movwf	___lwdiv@divisor+1
  5241  0FDD  082E               	movf	printf@val+1,w
  5242  0FDE  00F9               	movwf	___lwdiv@dividend+1
  5243  0FDF  082D               	movf	printf@val,w
  5244  0FE0  00F8               	movwf	___lwdiv@dividend
  5245  0FE1  120A  158A  23D0  120A  158A  	fcall	___lwdiv
  5246  0FE6  0877               	movf	?___lwdiv+1,w
  5247  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  5248  0FE8  1303               	bcf	3,6	;RP1=0, select bank0
  5249  0FE9  00A3               	movwf	___lwmod@dividend+1
  5250  0FEA  0876               	movf	?___lwdiv,w
  5251  0FEB  00A2               	movwf	___lwmod@dividend
  5252  0FEC  120A  158A  239C  120A  158A  	fcall	___lwmod
  5253  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  5254  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  5255  0FF3  0820               	movf	?___lwmod,w
  5256  0FF4  3E30               	addlw	48
  5257  0FF5  00A9               	movwf	??_printf+1
  5258  0FF6  0829               	movf	??_printf+1,w
  5259  0FF7  00B3               	movwf	printf@c
  5260                           
  5261                           ;doprnt.c: 1523: }
  5262                           ;doprnt.c: 1524: (putch(c) );
  5263  0FF8  0833               	movf	printf@c,w
  5264  0FF9  120A  158A  22C7  120A  158A  	fcall	_putch
  5265  0FFE  2FBF               	goto	i1l2119
  5266  0FFF                     i1l386:	
  5267                           ;doprnt.c: 1540: return 0;
  5268                           ;	Return value of _printf is never used
  5269                           
  5270                           ;doprnt.c: 1525: }
  5271                           ;doprnt.c: 1533: }
  5272                           ;doprnt.c: 1535: alldone:
  5273                           
  5274  0FFF  0008               	return
  5275  1000                     __end_of_printf:	
  5276                           
  5277                           	psect	text9
  5278  0AC7                     __ptext9:	
  5279 ;; *************** function _putch *****************
  5280 ;; Defined at:
  5281 ;;		line 46 in file "main.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  data            1    wreg     unsigned char 
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;  data            1    0[COMMON] unsigned char 
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  1    wreg      void 
  5288 ;; Registers used:
  5289 ;;		wreg
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5295 ;;      Params:         0       0       0       0       0
  5296 ;;      Locals:         1       0       0       0       0
  5297 ;;      Temps:          0       0       0       0       0
  5298 ;;      Totals:         1       0       0       0       0
  5299 ;;Total ram usage:        1 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; This function calls:
  5302 ;;		Nothing
  5303 ;; This function is called by:
  5304 ;;		_printf
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           
  5309                           ;psect for function _putch
  5310  0AC7                     _putch:	
  5311                           
  5312                           ;incstack = 0
  5313                           ; Regs used in _putch: [wreg]
  5314                           ;putch@data stored from wreg
  5315  0AC7  00F0               	movwf	putch@data
  5316  0AC8                     i1l114:	
  5317                           ;main.c: 48: continue;
  5318                           
  5319                           ;main.c: 47: while(!PIR1bits.TXIF)
  5320                           
  5321  0AC8  1283               	bcf	3,5	;RP0=0, select bank0
  5322  0AC9  1303               	bcf	3,6	;RP1=0, select bank0
  5323  0ACA  1E0C               	btfss	12,4	;volatile
  5324  0ACB  2AC8               	goto	i1l114
  5325                           
  5326                           ;main.c: 49: TXREG = data;
  5327  0ACC  0870               	movf	putch@data,w
  5328  0ACD  0099               	movwf	25	;volatile
  5329  0ACE  0008               	return
  5330  0ACF                     __end_of_putch:	
  5331                           
  5332                           	psect	text10
  5333  0AD7                     __ptext10:	
  5334 ;; *************** function _isdigit *****************
  5335 ;; Defined at:
  5336 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  c               1    wreg     unsigned char 
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;  c               1    1[COMMON] unsigned char 
  5341 ;; Return value:  Size  Location     Type
  5342 ;;		None               void
  5343 ;; Registers used:
  5344 ;;		wreg, status,2, status,0
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5350 ;;      Params:         0       0       0       0       0
  5351 ;;      Locals:         2       0       0       0       0
  5352 ;;      Temps:          0       0       0       0       0
  5353 ;;      Totals:         2       0       0       0       0
  5354 ;;Total ram usage:        2 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; This function calls:
  5357 ;;		Nothing
  5358 ;; This function is called by:
  5359 ;;		_printf
  5360 ;; This function uses a non-reentrant model
  5361 ;;
  5362                           
  5363                           
  5364                           ;psect for function _isdigit
  5365  0AD7                     _isdigit:	
  5366                           
  5367                           ;incstack = 0
  5368                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5369                           ;isdigit@c stored from wreg
  5370  0AD7  00F1               	movwf	isdigit@c
  5371  0AD8  01F0               	clrf	_isdigit$632
  5372  0AD9  303A               	movlw	58
  5373  0ADA  0271               	subwf	isdigit@c,w
  5374  0ADB  1803               	skipnc
  5375  0ADC  2AE3               	goto	i1l1837
  5376  0ADD  3030               	movlw	48
  5377  0ADE  0271               	subwf	isdigit@c,w
  5378  0ADF  1C03               	skipc
  5379  0AE0  2AE3               	goto	i1l1837
  5380  0AE1  01F0               	clrf	_isdigit$632
  5381  0AE2  0AF0               	incf	_isdigit$632,f
  5382  0AE3                     i1l1837:	
  5383  0AE3  0C70               	rrf	_isdigit$632,w
  5384  0AE4  0008               	return
  5385  0AE5                     __end_of_isdigit:	
  5386                           
  5387                           	psect	text11
  5388  0AFD                     __ptext11:	
  5389 ;; *************** function ___wmul *****************
  5390 ;; Defined at:
  5391 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  multiplier      2    0[COMMON] unsigned int 
  5394 ;;  multiplicand    2    2[COMMON] unsigned int 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  product         2    4[COMMON] unsigned int 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  2    0[COMMON] unsigned int 
  5399 ;; Registers used:
  5400 ;;		wreg, status,2, status,0
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5406 ;;      Params:         4       0       0       0       0
  5407 ;;      Locals:         2       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0
  5409 ;;      Totals:         6       0       0       0       0
  5410 ;;Total ram usage:        6 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; This function calls:
  5413 ;;		Nothing
  5414 ;; This function is called by:
  5415 ;;		_ints_isr
  5416 ;;		_printf
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           
  5421                           ;psect for function ___wmul
  5422  0AFD                     ___wmul:	
  5423                           
  5424                           ;incstack = 0
  5425                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5426  0AFD  01F4               	clrf	___wmul@product
  5427  0AFE  01F5               	clrf	___wmul@product+1
  5428  0AFF                     i1l1843:	
  5429  0AFF  1C70               	btfss	___wmul@multiplier,0
  5430  0B00  2B07               	goto	i1l470
  5431  0B01  0872               	movf	___wmul@multiplicand,w
  5432  0B02  07F4               	addwf	___wmul@product,f
  5433  0B03  1803               	skipnc
  5434  0B04  0AF5               	incf	___wmul@product+1,f
  5435  0B05  0873               	movf	___wmul@multiplicand+1,w
  5436  0B06  07F5               	addwf	___wmul@product+1,f
  5437  0B07                     i1l470:	
  5438  0B07  3001               	movlw	1
  5439  0B08                     u161_25:	
  5440  0B08  1003               	clrc
  5441  0B09  0DF2               	rlf	___wmul@multiplicand,f
  5442  0B0A  0DF3               	rlf	___wmul@multiplicand+1,f
  5443  0B0B  3EFF               	addlw	-1
  5444  0B0C  1D03               	skipz
  5445  0B0D  2B08               	goto	u161_25
  5446  0B0E  3001               	movlw	1
  5447  0B0F                     u162_25:	
  5448  0B0F  1003               	clrc
  5449  0B10  0CF1               	rrf	___wmul@multiplier+1,f
  5450  0B11  0CF0               	rrf	___wmul@multiplier,f
  5451  0B12  3EFF               	addlw	-1
  5452  0B13  1D03               	skipz
  5453  0B14  2B0F               	goto	u162_25
  5454  0B15  0870               	movf	___wmul@multiplier,w
  5455  0B16  0471               	iorwf	___wmul@multiplier+1,w
  5456  0B17  1D03               	btfss	3,2
  5457  0B18  2AFF               	goto	i1l1843
  5458  0B19  0875               	movf	___wmul@product+1,w
  5459  0B1A  00F1               	movwf	?___wmul+1
  5460  0B1B  0874               	movf	___wmul@product,w
  5461  0B1C  00F0               	movwf	?___wmul
  5462  0B1D  0008               	return
  5463  0B1E                     __end_of___wmul:	
  5464                           
  5465                           	psect	text12
  5466  0B9C                     __ptext12:	
  5467 ;; *************** function ___lwmod *****************
  5468 ;; Defined at:
  5469 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;  divisor         2    0[BANK0 ] unsigned int 
  5472 ;;  dividend        2    2[BANK0 ] unsigned int 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;  counter         1    5[BANK0 ] unsigned char 
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  2    0[BANK0 ] unsigned int 
  5477 ;; Registers used:
  5478 ;;		wreg, status,2, status,0
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5484 ;;      Params:         0       4       0       0       0
  5485 ;;      Locals:         0       1       0       0       0
  5486 ;;      Temps:          0       1       0       0       0
  5487 ;;      Totals:         0       6       0       0       0
  5488 ;;Total ram usage:        6 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; This function calls:
  5491 ;;		Nothing
  5492 ;; This function is called by:
  5493 ;;		_printf
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           
  5498                           ;psect for function ___lwmod
  5499  0B9C                     ___lwmod:	
  5500                           
  5501                           ;incstack = 0
  5502                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5503  0B9C  1283               	bcf	3,5	;RP0=0, select bank0
  5504  0B9D  1303               	bcf	3,6	;RP1=0, select bank0
  5505  0B9E  0820               	movf	___lwmod@divisor,w
  5506  0B9F  0421               	iorwf	___lwmod@divisor+1,w
  5507  0BA0  1903               	btfsc	3,2
  5508  0BA1  2BCB               	goto	i1l1899
  5509  0BA2  01A5               	clrf	___lwmod@counter
  5510  0BA3  0AA5               	incf	___lwmod@counter,f
  5511  0BA4                     i1l1889:	
  5512  0BA4  1BA1               	btfsc	___lwmod@divisor+1,7
  5513  0BA5  2BB2               	goto	i1l1891
  5514  0BA6  3001               	movlw	1
  5515  0BA7                     u172_25:	
  5516  0BA7  1003               	clrc
  5517  0BA8  0DA0               	rlf	___lwmod@divisor,f
  5518  0BA9  0DA1               	rlf	___lwmod@divisor+1,f
  5519  0BAA  3EFF               	addlw	-1
  5520  0BAB  1D03               	skipz
  5521  0BAC  2BA7               	goto	u172_25
  5522  0BAD  3001               	movlw	1
  5523  0BAE  00A4               	movwf	??___lwmod
  5524  0BAF  0824               	movf	??___lwmod,w
  5525  0BB0  07A5               	addwf	___lwmod@counter,f
  5526  0BB1  2BA4               	goto	i1l1889
  5527  0BB2                     i1l1891:	
  5528  0BB2  0821               	movf	___lwmod@divisor+1,w
  5529  0BB3  0223               	subwf	___lwmod@dividend+1,w
  5530  0BB4  1D03               	skipz
  5531  0BB5  2BB8               	goto	u174_25
  5532  0BB6  0820               	movf	___lwmod@divisor,w
  5533  0BB7  0222               	subwf	___lwmod@dividend,w
  5534  0BB8                     u174_25:	
  5535  0BB8  1C03               	skipc
  5536  0BB9  2BC0               	goto	i1l1895
  5537  0BBA  0820               	movf	___lwmod@divisor,w
  5538  0BBB  02A2               	subwf	___lwmod@dividend,f
  5539  0BBC  0821               	movf	___lwmod@divisor+1,w
  5540  0BBD  1C03               	skipc
  5541  0BBE  03A3               	decf	___lwmod@dividend+1,f
  5542  0BBF  02A3               	subwf	___lwmod@dividend+1,f
  5543  0BC0                     i1l1895:	
  5544  0BC0  3001               	movlw	1
  5545  0BC1                     u175_25:	
  5546  0BC1  1003               	clrc
  5547  0BC2  0CA1               	rrf	___lwmod@divisor+1,f
  5548  0BC3  0CA0               	rrf	___lwmod@divisor,f
  5549  0BC4  3EFF               	addlw	-1
  5550  0BC5  1D03               	skipz
  5551  0BC6  2BC1               	goto	u175_25
  5552  0BC7  3001               	movlw	1
  5553  0BC8  02A5               	subwf	___lwmod@counter,f
  5554  0BC9  1D03               	btfss	3,2
  5555  0BCA  2BB2               	goto	i1l1891
  5556  0BCB                     i1l1899:	
  5557  0BCB  0823               	movf	___lwmod@dividend+1,w
  5558  0BCC  00A1               	movwf	?___lwmod+1
  5559  0BCD  0822               	movf	___lwmod@dividend,w
  5560  0BCE  00A0               	movwf	?___lwmod
  5561  0BCF  0008               	return
  5562  0BD0                     __end_of___lwmod:	
  5563                           
  5564                           	psect	text13
  5565  0BD0                     __ptext13:	
  5566 ;; *************** function ___lwdiv *****************
  5567 ;; Defined at:
  5568 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  divisor         2    6[COMMON] unsigned int 
  5571 ;;  dividend        2    8[COMMON] unsigned int 
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;  quotient        2   11[COMMON] unsigned int 
  5574 ;;  counter         1   13[COMMON] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  2    6[COMMON] unsigned int 
  5577 ;; Registers used:
  5578 ;;		wreg, status,2, status,0
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5584 ;;      Params:         4       0       0       0       0
  5585 ;;      Locals:         3       0       0       0       0
  5586 ;;      Temps:          1       0       0       0       0
  5587 ;;      Totals:         8       0       0       0       0
  5588 ;;Total ram usage:        8 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; This function calls:
  5591 ;;		Nothing
  5592 ;; This function is called by:
  5593 ;;		_ints_isr
  5594 ;;		_printf
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           
  5599                           ;psect for function ___lwdiv
  5600  0BD0                     ___lwdiv:	
  5601                           
  5602                           ;incstack = 0
  5603                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5604  0BD0  01FB               	clrf	___lwdiv@quotient
  5605  0BD1  01FC               	clrf	___lwdiv@quotient+1
  5606  0BD2  0876               	movf	___lwdiv@divisor,w
  5607  0BD3  0477               	iorwf	___lwdiv@divisor+1,w
  5608  0BD4  1903               	btfsc	3,2
  5609  0BD5  2C07               	goto	i1l1877
  5610  0BD6  01FD               	clrf	___lwdiv@counter
  5611  0BD7  0AFD               	incf	___lwdiv@counter,f
  5612  0BD8                     i1l1865:	
  5613  0BD8  1BF7               	btfsc	___lwdiv@divisor+1,7
  5614  0BD9  2BE6               	goto	i1l1867
  5615  0BDA  3001               	movlw	1
  5616  0BDB                     u165_25:	
  5617  0BDB  1003               	clrc
  5618  0BDC  0DF6               	rlf	___lwdiv@divisor,f
  5619  0BDD  0DF7               	rlf	___lwdiv@divisor+1,f
  5620  0BDE  3EFF               	addlw	-1
  5621  0BDF  1D03               	skipz
  5622  0BE0  2BDB               	goto	u165_25
  5623  0BE1  3001               	movlw	1
  5624  0BE2  00FA               	movwf	??___lwdiv
  5625  0BE3  087A               	movf	??___lwdiv,w
  5626  0BE4  07FD               	addwf	___lwdiv@counter,f
  5627  0BE5  2BD8               	goto	i1l1865
  5628  0BE6                     i1l1867:	
  5629  0BE6  3001               	movlw	1
  5630  0BE7                     u167_25:	
  5631  0BE7  1003               	clrc
  5632  0BE8  0DFB               	rlf	___lwdiv@quotient,f
  5633  0BE9  0DFC               	rlf	___lwdiv@quotient+1,f
  5634  0BEA  3EFF               	addlw	-1
  5635  0BEB  1D03               	skipz
  5636  0BEC  2BE7               	goto	u167_25
  5637  0BED  0877               	movf	___lwdiv@divisor+1,w
  5638  0BEE  0279               	subwf	___lwdiv@dividend+1,w
  5639  0BEF  1D03               	skipz
  5640  0BF0  2BF3               	goto	u168_25
  5641  0BF1  0876               	movf	___lwdiv@divisor,w
  5642  0BF2  0278               	subwf	___lwdiv@dividend,w
  5643  0BF3                     u168_25:	
  5644  0BF3  1C03               	skipc
  5645  0BF4  2BFC               	goto	i1l1873
  5646  0BF5  0876               	movf	___lwdiv@divisor,w
  5647  0BF6  02F8               	subwf	___lwdiv@dividend,f
  5648  0BF7  0877               	movf	___lwdiv@divisor+1,w
  5649  0BF8  1C03               	skipc
  5650  0BF9  03F9               	decf	___lwdiv@dividend+1,f
  5651  0BFA  02F9               	subwf	___lwdiv@dividend+1,f
  5652  0BFB  147B               	bsf	___lwdiv@quotient,0
  5653  0BFC                     i1l1873:	
  5654  0BFC  3001               	movlw	1
  5655  0BFD                     u169_25:	
  5656  0BFD  1003               	clrc
  5657  0BFE  0CF7               	rrf	___lwdiv@divisor+1,f
  5658  0BFF  0CF6               	rrf	___lwdiv@divisor,f
  5659  0C00  3EFF               	addlw	-1
  5660  0C01  1D03               	skipz
  5661  0C02  2BFD               	goto	u169_25
  5662  0C03  3001               	movlw	1
  5663  0C04  02FD               	subwf	___lwdiv@counter,f
  5664  0C05  1D03               	btfss	3,2
  5665  0C06  2BE6               	goto	i1l1867
  5666  0C07                     i1l1877:	
  5667  0C07  087C               	movf	___lwdiv@quotient+1,w
  5668  0C08  00F7               	movwf	?___lwdiv+1
  5669  0C09  087B               	movf	___lwdiv@quotient,w
  5670  0C0A  00F6               	movwf	?___lwdiv
  5671  0C0B  0008               	return
  5672  0C0C                     __end_of___lwdiv:	
  5673                           
  5674                           	psect	text14
  5675  07B4                     __ptext14:	
  5676 ;; *************** function _display *****************
  5677 ;; Defined at:
  5678 ;;		line 85 in file "main.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;		None
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5692 ;;      Params:         0       0       0       0       0
  5693 ;;      Locals:         0       0       0       0       0
  5694 ;;      Temps:          0       0       0       0       0
  5695 ;;      Totals:         0       0       0       0       0
  5696 ;;Total ram usage:        0 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; This function calls:
  5699 ;;		Nothing
  5700 ;; This function is called by:
  5701 ;;		_ints_isr
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           
  5706                           ;psect for function _display
  5707  07B4                     _display:	
  5708                           
  5709                           ;main.c: 86: switch (digit) {
  5710                           
  5711                           ;incstack = 0
  5712                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0]
  5713  07B4  2FEE               	goto	i1l1989
  5714  07B5                     i1l132:	
  5715                           ;main.c: 87: case 1:
  5716                           
  5717                           
  5718                           ;main.c: 88: PORTCbits.RC3 = 0;
  5719  07B5  1187               	bcf	7,3	;volatile
  5720                           
  5721                           ;main.c: 89: PORTCbits.RC4 = 1;
  5722  07B6  1607               	bsf	7,4	;volatile
  5723                           
  5724                           ;main.c: 90: PORTCbits.RC5 = 1;
  5725  07B7  1687               	bsf	7,5	;volatile
  5726                           
  5727                           ;main.c: 91: PORTB = outC;
  5728  07B8  0867               	movf	_outC,w
  5729  07B9  0086               	movwf	6	;volatile
  5730                           
  5731                           ;main.c: 92: if (resC) {
  5732  07BA  0864               	movf	_resC,w
  5733  07BB  1903               	btfsc	3,2
  5734  07BC  2FC7               	goto	i1l133
  5735                           
  5736                           ;main.c: 93: if (PORTAbits.RA6) {
  5737  07BD  1F05               	btfss	5,6	;volatile
  5738  07BE  2FC3               	goto	i1l1967
  5739                           
  5740                           ;main.c: 94: PORTA = resC | 0xC0;
  5741  07BF  0864               	movf	_resC,w
  5742  07C0  38C0               	iorlw	192
  5743  07C1  0085               	movwf	5	;volatile
  5744                           
  5745                           ;main.c: 95: }
  5746  07C2  0008               	return
  5747  07C3                     i1l1967:	
  5748                           
  5749                           ;main.c: 96: else {
  5750                           ;main.c: 97: PORTA = resC | 0x80;
  5751  07C3  0864               	movf	_resC,w
  5752  07C4  3880               	iorlw	128
  5753  07C5  0085               	movwf	5	;volatile
  5754                           
  5755                           ;main.c: 98: }
  5756                           ;main.c: 99: }
  5757  07C6  0008               	return
  5758  07C7                     i1l133:	
  5759                           
  5760                           ;main.c: 100: else {
  5761                           ;main.c: 101: PORTAbits.RA7 = 0;
  5762  07C7  1385               	bcf	5,7	;volatile
  5763                           
  5764                           ;main.c: 102: }
  5765                           ;main.c: 103: break;
  5766  07C8  0008               	return
  5767  07C9                     i1l138:	
  5768                           ;main.c: 104: case 2:
  5769                           
  5770                           
  5771                           ;main.c: 105: PORTCbits.RC3 = 1;
  5772  07C9  1587               	bsf	7,3	;volatile
  5773                           
  5774                           ;main.c: 106: PORTCbits.RC4 = 0;
  5775  07CA  1207               	bcf	7,4	;volatile
  5776                           
  5777                           ;main.c: 107: PORTCbits.RC5 = 1;
  5778  07CB  1687               	bsf	7,5	;volatile
  5779                           
  5780                           ;main.c: 108: PORTB = outD;
  5781  07CC  0866               	movf	_outD,w
  5782  07CD  0086               	movwf	6	;volatile
  5783                           
  5784                           ;main.c: 109: if (resD || resC) {
  5785  07CE  0863               	movf	_resD,w
  5786  07CF  1903               	btfsc	3,2
  5787  07D0  0864               	movf	_resC,w
  5788  07D1  1903               	btfsc	3,2
  5789  07D2  2FDD               	goto	i1l139
  5790                           
  5791                           ;main.c: 110: if (PORTAbits.RA6) {
  5792  07D3  1F05               	btfss	5,6	;volatile
  5793  07D4  2FD9               	goto	i1l1977
  5794                           
  5795                           ;main.c: 111: PORTA = resD | 0xC0;
  5796  07D5  0863               	movf	_resD,w
  5797  07D6  38C0               	iorlw	192
  5798  07D7  0085               	movwf	5	;volatile
  5799                           
  5800                           ;main.c: 112: }
  5801  07D8  0008               	return
  5802  07D9                     i1l1977:	
  5803                           
  5804                           ;main.c: 113: else {
  5805                           ;main.c: 114: PORTA = resD | 0x80;
  5806  07D9  0863               	movf	_resD,w
  5807  07DA  3880               	iorlw	128
  5808  07DB  0085               	movwf	5	;volatile
  5809                           
  5810                           ;main.c: 115: }
  5811                           ;main.c: 116: }
  5812  07DC  0008               	return
  5813  07DD                     i1l139:	
  5814                           
  5815                           ;main.c: 117: else {
  5816                           ;main.c: 118: PORTAbits.RA7 = 0;
  5817  07DD  1385               	bcf	5,7	;volatile
  5818                           
  5819                           ;main.c: 119: }
  5820                           ;main.c: 120: break;
  5821  07DE  0008               	return
  5822  07DF                     i1l145:	
  5823                           ;main.c: 121: case 3:
  5824                           
  5825                           
  5826                           ;main.c: 122: PORTCbits.RC3 = 1;
  5827  07DF  1587               	bsf	7,3	;volatile
  5828                           
  5829                           ;main.c: 123: PORTCbits.RC4 = 1;
  5830  07E0  1607               	bsf	7,4	;volatile
  5831                           
  5832                           ;main.c: 124: PORTCbits.RC5 = 0;
  5833  07E1  1287               	bcf	7,5	;volatile
  5834                           
  5835                           ;main.c: 125: PORTB = outU;
  5836  07E2  0865               	movf	_outU,w
  5837  07E3  0086               	movwf	6	;volatile
  5838                           
  5839                           ;main.c: 126: if (PORTAbits.RA6) {
  5840  07E4  1F05               	btfss	5,6	;volatile
  5841  07E5  2FEA               	goto	i1l1985
  5842                           
  5843                           ;main.c: 127: PORTA = resU | 0xC0;
  5844  07E6  0862               	movf	_resU,w
  5845  07E7  38C0               	iorlw	192
  5846  07E8  0085               	movwf	5	;volatile
  5847                           
  5848                           ;main.c: 128: }
  5849  07E9  0008               	return
  5850  07EA                     i1l1985:	
  5851                           
  5852                           ;main.c: 129: else {
  5853                           ;main.c: 130: PORTA = resU | 0x80;
  5854  07EA  0862               	movf	_resU,w
  5855  07EB  3880               	iorlw	128
  5856  07EC  0085               	movwf	5	;volatile
  5857                           
  5858                           ;main.c: 133: }
  5859                           
  5860                           ;main.c: 131: }
  5861                           ;main.c: 132: break;
  5862  07ED  0008               	return
  5863  07EE                     i1l1989:	
  5864  07EE  1283               	bcf	3,5	;RP0=0, select bank0
  5865  07EF  1303               	bcf	3,6	;RP1=0, select bank0
  5866  07F0  0861               	movf	_digit,w
  5867                           
  5868                           ; Switch size 1, requested type "space"
  5869                           ; Number of cases is 3, Range of values is 1 to 3
  5870                           ; switch strategies available:
  5871                           ; Name         Instructions Cycles
  5872                           ; simple_byte           10     6 (average)
  5873                           ; direct_byte           20    11 (fixed)
  5874                           ; jumptable            263     9 (fixed)
  5875                           ;	Chosen strategy is simple_byte
  5876  07F1  3A01               	xorlw	1	; case 1
  5877  07F2  1903               	skipnz
  5878  07F3  2FB5               	goto	i1l132
  5879  07F4  3A03               	xorlw	3	; case 2
  5880  07F5  1903               	skipnz
  5881  07F6  2FC9               	goto	i1l138
  5882  07F7  3A01               	xorlw	1	; case 3
  5883  07F8  1903               	skipnz
  5884  07F9  2FDF               	goto	i1l145
  5885  07FA  2FFB               	goto	i1l148
  5886  07FB                     i1l148:	
  5887  07FB  0008               	return
  5888  07FC                     __end_of_display:	
  5889  007E                     btemp	set	126	;btemp
  5890  007E                     wtemp0	set	126


Data Sizes:
    Strings     6
    Constant    12
    Data        1
    BSS         48
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     56      78
    BANK1            80     13      43
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ints_isr in COMMON

    _ints_isr->___lwdiv
    i1_cattle_nr->i1_rw_eeprom
    _printf->___lwdiv
    ___lwmod->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _ints_isr in BANK0

    _ints_isr->_printf
    _printf->___lwmod

Critical Paths under _main in BANK1

    _main->_cattle_nr
    _cattle_nr->_rw_eeprom

Critical Paths under _ints_isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ints_isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ints_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1631
                                             11 BANK1      2     2      0
                          _cattle_nr
                        _init_timer2
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_timer2                                          6     4      2     198
                                              0 BANK1      6     4      2
 ---------------------------------------------------------------------------------
 (1) _cattle_nr                                            8     6      2    1433
                                              3 BANK1      8     6      2
                          _rw_eeprom
 ---------------------------------------------------------------------------------
 (2) _rw_eeprom                                            3     1      2     936
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ints_isr                                            36    36      0    7985
                                             20 BANK0     36    36      0
                            ___lwdiv
                             ___wmul
                            _display
                             _printf
                        i1_cattle_nr
 ---------------------------------------------------------------------------------
 (4) i1_cattle_nr                                          8     6      2     941
                                              3 COMMON     8     6      2
                        i1_rw_eeprom
 ---------------------------------------------------------------------------------
 (5) i1_rw_eeprom                                          3     1      2     504
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _printf                                              22    20      2    3292
                                              6 BANK0     14    12      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1788
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     374
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _display                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cattle_nr
     _rw_eeprom
   _init_timer2
   _uart_init

 _ints_isr (ROOT)
   ___lwdiv
     ___wmul (ARG)
   ___wmul
   _display
   _printf
     ___lwdiv
       ___wmul (ARG)
     ___lwmod
       ___lwdiv (ARG)
         ___wmul (ARG)
     ___wmul
     _isdigit
     _putch
   i1_cattle_nr
     i1_rw_eeprom

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      D      2B       7       53.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     38      4E       5       97.5%
BITBANK0            50      0       1       4        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      87      12        0.0%
ABS                  0      0      87       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 11 15:09:36 2018

                       _i 0068                         _j 0069                         pc 0002  
             __CFG_CP$OFF 0000                        fsr 0004       ___wmul@multiplicand 0072  
     __end_ofi1_rw_eeprom 0B44                       l124 0B87                       l310 0DFD  
                     l311 0DA1                       l321 0E11                       l330 0E69  
                     _PR2 0092              __CFG_CPD$OFF 0000                       _res 006D  
                     fsr0 0004                       indf 0000              __CFG_IESO$ON 0000  
            __CFG_LVP$OFF 0000                      l2005 0CF6                      l2023 0D51  
                    l2009 0D1D                      l2025 0D59                      l1821 0B8E  
                    l2711 0E35                      l2705 0E1F                      l2715 0E43  
                    l2709 0E2D                      l2725 0E53                      l2683 0DBD  
                    l2685 0DC5                      l2679 0DAF                      l1993 0CB3  
                    l2689 0DD3                      STR_1 0812                      u1795 0B52  
            __CFG_WRT$OFF 0000             __CFG_FCMEN$ON 0000               i1_cattle_nr 0C0C  
                    _main 0D5E                      _resC 0064                      _resD 0063  
                    _resU 0062                      _tick 005E                      _outC 0067  
                    _outD 0066                      _outU 0065                      btemp 007E  
           __CFG_BOREN$ON 0000                      start 0012             __CFG_MCLRE$ON 0000  
                   ?_main 0070                     _EEADR 010D                     _EEDAT 010C  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188                     _T2CON 0012  
         __end_of___lwdiv 0C0C                     i1l114 0AC8                     i1l211 0443  
                   i1l132 07B5                     i1l124 0B31                     i1l220 03FD  
                   i1l212 03C0                     i1l133 07C7             i1rw_eeprom@rw 0071  
                   i1l231 0475                     i1l145 07DF                     i1l305 07A9  
                   i1l138 07C9                     i1l139 07DD                     i1l171 006D  
                   i1l148 07FB                     i1l165 0040                     i1l351 0E94  
                   i1l239 04E7                     i1l191 02B4                     i1l264 0614  
         __end_of___lwmod 0BD0                     i1l273 0695                     i1l257 05B7  
                   i1l185 0161                     i1l290 073C                     i1l283 06DB  
                   i1l259 05E5                     i1l470 0B07                     i1l295 0772  
                   i1l288 070A                     i1l369 0F55                     i1l386 0FFF  
                   _RCREG 001A                     _SPBRG 0099                     _PORTA 0005  
                   _PORTB 0006                     _TRISA 0085                     _TRISB 0086  
                   _TRISC 0087                     _TXREG 0019              ?_init_timer2 00BE  
         __end_of_display 07FC                     _datos 00A0                     _digit 0061  
                   _btnUp 0353           __end_of_dpowers 0810         i1cattle_nr@cattle 0073  
         __end_of_isdigit 0AE5                     _swBot 0811                     _reset 0351  
                   _tempo 005A                     _swTop 0810                     _putch 0AC7  
                   _swiza 0354                     pclath 000A                     status 0003  
                   wtemp0 007E               i1_rw_eeprom 0B1E           __initialization 0015  
            __end_of_main 0E6A                    ??_main 00C9                    _EECON2 018D  
                  ?_putch 0070                    _ANSELH 0189                    i1l2103 0F99  
                  i1l2105 0F9D                    i1l2113 0FB9                    i1l2041 0E99  
                  i1l2121 0E71                    i1l2043 0EA4                    i1l2035 0E8E  
                  i1l2203 00B1                    i1l2211 0162                    i1l2109 0FAF  
                  i1l2141 0C6F                    i1l2125 0C11                    i1l2301 02CD  
                  i1l2221 017B                    i1l2205 00EB                    i1l2213 0163  
                  i1l2119 0FBF                    i1l2047 0EB6                    i1l2311 037F  
                  i1l2223 01D8                    i1l2081 0F47                    i1l2057 0EF0  
                  i1l2137 0C4E                    i1l2233 01E4                    i1l2209 0145  
                  i1l2091 0F78                    i1l2075 0F26                    i1l2059 0F07  
                  i1l2155 0C9F                    i1l2227 01DB                    i1l2069 0F20  
                  i1l2157 0CA7                    i1l2341 03D9                    i1l2333 03C3  
                  i1l2237 01EC                    i1l2229 01DD                    i1l2423 04FF  
                  i1l2097 0F84                    i1l2089 0F74                    i1l2425 0507  
                  i1l2353 040B                    i1l2345 03E3                    i1l2281 0294  
                  i1l2257 025D                    i1l2249 0210                    i1l2185 007C  
                  i1l2441 0535                    i1l2515 05DF                    i1l2507 05CF  
                  i1l2419 04F5                    i1l2435 051D                    i1l2363 0427  
                  i1l2339 03C7                    i1l2291 02AA                    i1l2195 0095  
                  i1l2187 0080                    i1l2429 0511                    i1l2357 0415  
                  i1l2285 029E                    i1l2197 0099                    i1l2189 008F  
                  i1l2359 041D                    i1l2279 0282                    i1l2199 00A8  
                  i1l2447 0548                    u210_20 004C                    i1l2641 0792  
                  i1l2625 0764                    i1l2617 0743                    i1l2545 0661  
                  i1l2553 067B                    i1l2393 047C                    u210_22 004D  
                  i1l1843 0AFF                    i1l2635 0780                    i1l2571 06AD  
                  i1l2539 0648                    i1l2475 057C                    i1l2459 0559  
                  i1l2395 048E                    i1l2387 0478                    i1l1837 0AE3  
                  i1l2645 079C                    i1l2573 06B5                    i1l2557 0687  
                  i1l2581 06CB                    i1l1919 0B38                    i1l2639 078A  
                  i1l2567 06A3                    i1l2583 06CC                    i1l2399 0498  
                  i1l2751 0159                    i1l1873 0BFC                    i1l1865 0BD8  
                  i1l2649 07A8                    i1l2577 06BF                    i1l2489 05A4  
                  i1l1867 0BE6                    i1l1891 0BB2                    i1l1877 0C07  
                  i1l2589 06D5                    i1l1967 07C3                    i1l1895 0BC0  
                  i1l1985 07EA                    i1l1977 07D9                    i1l1889 0BA4  
                  i1l1899 0BCB                    i1l1989 07EE                    u209_20 0046  
                  _INTCON 000B                    u209_22 0047                    u161_25 0B08  
                  u162_25 0B0F                    u250_25 04D1                    u234_25 0377  
                  u172_25 0BA7                    u244_25 045E                    u236_25 03A9  
                  u261_20 05AD                    u165_25 0BDB                    u245_25 046F  
                  u237_25 03BA                    u309_27 0542                    u262_20 05AE  
                  u174_25 0BB8                    u167_25 0BE7                    u175_25 0BC1  
                  u271_25 05F2                    u168_25 0BF3                    u192_25 0F3D  
                  u272_25 05FF                    u248_25 04B5                    u169_25 0BFD  
                  u273_25 060C                    u249_25 04C3                    u290_25 06E8  
                  u274_25 061A                    u291_25 06F5                    u275_25 0628  
                  u196_25 0F64                    u292_25 0702                    u276_25 0636  
                  u293_25 0710                    u294_25 071E                    u295_25 072C  
                  _OSCCON 008F                    _SPBRGH 009A            __CFG_PWRTE$OFF 0000  
                  ___wmul 0AFD                 ??___lwdiv 007A             rw_eeprom@addr 00C0  
                  _btnUpT 0060                 ??___lwmod 0024             rw_eeprom@data 00BE  
                  _garron 006B                    _printf 0E6A          __end_of_ints_isr 07B4  
               ??_display 0070                 ??_isdigit 0070                    saved_w 007E  
           ints_isr@k_401 004D             ints_isr@nral1 0051             ints_isr@nral2 0043  
           ints_isr@lower 0056             ints_isr@valor 0054             ints_isr@upper 0041  
 __end_of__initialization 002B            __pcstackCOMMON 0070              __pidataBANK0 07FC  
           __end_of_swBot 0812             __end_of_swTop 0811             __end_of_putch 0ACF  
      __size_of_cattle_nr 00B2      __size_of_init_timer2 002A                   ??_putch 0070  
             ints_isr@aux 004E                __pbssBANK0 0058                __pbssBANK1 00A0  
            ?i1_cattle_nr 0073                __pmaintext 0D5E                   ?___wmul 0070  
              __pintentry 0004                   ?_printf 0026           i1rw_eeprom@addr 0072  
         i1rw_eeprom@data 0070        __size_of_uart_init 0018        __size_of_rw_eeprom 002E  
              __stringtab 0800         __end_of_cattle_nr 0D5E                 ?_ints_isr 0070  
            ?i1_rw_eeprom 0070           __size_of___wmul 0021                   ___lwdiv 0BD0  
                 ___lwmod 0B9C                   _btnDown 0352                   __ptext1 0AE5  
                 __ptext2 0B44                   __ptext3 0CAC                   __ptext4 0B6E  
                 __ptext5 002F                   __ptext6 0C0C                   __ptext7 0B1E  
                 __ptext8 0E6A                   __ptext9 0AC7           __size_of_printf 0196  
                 _display 07B4                   _mainAux 00BC                   _dpowers 0806  
                 _isdigit 0AD7                   clrloop0 0AD0      end_of_initialization 002B  
              ??_ints_isr 0034         __end_of_uart_init 0AFD         __end_of_rw_eeprom 0B9C  
               _RCSTAbits 0018                   printf@c 0033                   printf@f 0030  
              _timerReset 0058                 _PORTAbits 0005                 _PORTCbits 0007  
         cattle_nr@cattle 00C1               printf@width 0031                 _TXSTAbits 0098  
    __size_ofi1_cattle_nr 00A0            __end_of___wmul 0B1E               _BAUDCTLbits 0187  
             rw_eeprom@rw 00BF             __pbitbssBANK0 0350            __end_of_printf 1000  
     start_initialization 0015  __CFG_FOSC$INTRC_NOCLKOUT 0000                  ??___wmul 0074  
    __size_ofi1_rw_eeprom 0026               __pdataBANK0 006D                  ??_printf 0028  
            ints_isr@drop 0040             cattle_nr@dato 00C8             ??_init_timer2 00C0  
               ___latbits 0002             __pcstackBANK0 0020             __pcstackBANK1 00BE  
               _accuValor 005C                 __pnvBANK0 006B          ___lwdiv@dividend 0078  
               _cattle_nr 0CAC         __size_of_ints_isr 0785                  ?___lwdiv 0076  
                ?___lwmod 0020           init_timer2@post 00BE                 __pstrings 0800  
                ?_display 0070                  ?_isdigit 0070          ___lwdiv@quotient 007B  
          __size_of_putch 0008       __end_of_init_timer2 0B6E         interrupt_function 0004  
          ___wmul@product 0074                 clear_ram0 0ACF                  _PIE1bits 008C  
                _PIR1bits 000C                  _PIR2bits 000D              _ints_isr$845 004A  
              ?_cattle_nr 00C1                 _uart_init 0AE5                 _rw_eeprom 0B6E  
             __stringbase 0805         ___wmul@multiplier 0070                printf@flag 002F  
              printf@prec 002C           i1cattle_nr@dato 007A                _EECON1bits 018C  
              ?_uart_init 0070          __size_of___lwdiv 003C                ?_rw_eeprom 00BE  
        __size_of___lwmod 0034              cattle_nr@opt 00C5              cattle_nr@rta 00C6  
      __end_of__stringtab 0806               _isdigit$632 0070          __size_of_display 0048  
               ints_isr@k 004C               _init_timer2 0B44          __size_of_isdigit 000E  
         ___lwdiv@divisor 0076           ___lwdiv@counter 007D                  __ptext10 0AD7  
                __ptext11 0AFD                  __ptext12 0B9C                  __ptext13 0BD0  
                __ptext14 07B4                  _btnDownT 005F         __CFG_BOR4V$BOR40V 0000  
          init_timer2@eoc 00BF            init_timer2@pre 00C2            init_timer2@sfr 00C3  
           ??i1_cattle_nr 0075             __size_of_main 010C                  _ints_isr 002F  
             ??_cattle_nr 00C3         ints_isr@garron_1c 0044         ints_isr@garron_1d 0045  
       ints_isr@garron_2c 0047         ints_isr@garron_2d 0048         ints_isr@garron_1u 0046  
       ints_isr@garron_2u 0049                 printf@val 002D            i1cattle_nr@opt 0077  
          i1cattle_nr@rta 0078                 putch@data 0070                  isdigit@c 0071  
                intlevel1 0000          ___lwmod@dividend 0022         ints_isr@lower_404 0052  
               stringcode 0800             ??i1_rw_eeprom 0072       __end_ofi1_cattle_nr 0CAC  
             ??_uart_init 00BE                  printf@ap 002B               ??_rw_eeprom 00C0  
         ___lwmod@divisor 0020           ___lwmod@counter 0025                  stringdir 0800  
                stringtab 0800           ints_isr@aux_405 004F           ints_isr@process 0350  
